% Chapter Chapter 13 For Reproducible Research in R and RStudio
% Christopher Gandrud
% Created: 16/07/2012 05:45:03 pm CEST
% Updated: 14 January 2013

<<set-parent13, echo=FALSE, results='hide', cache=FALSE>>=
set_parent('/Parent/Rep-Res-Parent.Rnw')
@

\chapter{Presenting on the Web and Beyond with Markdown/HTML}\label{MarkdownChapter}

LaTeX is the standard markup language for creating academic quality articles and books. If we want to present research findings via the internet our best option is HTML. HTML syntax can be tedious to write, as we saw in Chapter \ref{TablesChapter}. Luckily the Markdown language was created as a simplified way of writing HTML documents. As we have seen, Markdown can be fully integrated with \emph{knitr} for creating reproducible research HTML presentation documents.

In this chapter we will learn the basic Markdown syntax for creating simple reproducible HTML documents. Please refer back to previous chapters for syntax used to display code and code chunks (Chapter \ref{StatsModel}), tables (Chapter \ref{TablesChapter}) and figures (Chapter \ref{FiguresChapter}) with R Markdown documents. We will also briefly look at some more advanced features for including math, bibliographies and customizing styles with CSS. Then we will learn how to create HTML slideshows with Markdown and the \emph{slidify} R package. The remainder of the chapter will look at options for publishing Markdown created documents, including locally, on RPubs, on the blogging service Tumblr, as well as via Dropbox and GitHub. 

\section{The Basics}

Markdown was created specifically to make it easy to write HTML (Or XHTML) using a syntax that is human readable and possibly publishable without compiling. For example, compare the Markdown table syntax in Chapter \ref{TablesChapter} to the HTML syntax for virtually the same table. Let's look at the key Markdown syntax.\footnote{For more information see John Gruber's explanation: \url{http://daringfireball.net/projects/markdown/}.}

That being said, to make Markdown simple it does not have as many capabilities as HTML. To get around this problem you can still use HTML in Markdown. Note that Markdown syntax cannot be used between HTML element tags. 

\subsection{Getting Started with Markdown Editors}

Like for R LaTeX, RStudio functions as a very good editor for R Markdown documents and regular non-knittable documents as well. To create a new R Markdown document in RStudio click \texttt{File} in the menu bar then \texttt{New} \textrightarrow{} \texttt{R Markdown}. RStudio has full syntax highlighting for code chunks and can knit \emph{.Rmd} files into \emph{.md} then render them in \emph{.html} with a click of the \texttt{Knit HTML} button (\includegraphics[scale=0.5]{Children/Chapter13/images13/KnitHTML.png}). As we saw in Chapter \ref{GettingStartedRKnitr} (Figure \ref{NotebookExample}), when you knit a Markdown document in RStudio, it will preview the HTML document for you. You can always view HTML documents by opening them with your web browser. You can do this directly from RStudio's \textbf{HTML Preview} window by clicking the \texttt{View the page with the system browser} button (\includegraphics[scale=0.45]{Children/Chapter10/images10/ShowInBrowser.png}). You can also click the \texttt{Markdown quick reference} button (\includegraphics[scale=0.5]{Children/Chapter13/images13/MDButton.png}) for a quick guide to the Markdown syntax used in RStudio.\foonote{RStudio uses Git Flavored Markdown, which is a variant of Markdown developed by GitHub. See: \url{http://github.github.com/github-flavored-markdown/}.}

Being plain-text, you can also use any text editor to modify Markdown documents, though they lack the level of integration with \emph{knitr} that RStudio has. There are also Markdown specific programs that include useful features like live preview (i.e. continuously updating) of how the Markdown document will look when compiled. Again these will not run \emph{knitr} code. However, they do include some features RStudio lacks, like word counts, the ability to save in PDF formats, and multiple CSS style files to format your documents with. On my Mac I often use Mou\footnote{\url{http://mouapp.com/}} and Marked\footnote{See: \url{http://markedapp.com/}. Marked can be integrated fairly well with RStudio as it only preview Markdown documents, rather than allowing you to edit them. It has more functionality than RStudio's \textbf{HTML Preview} window.}. One option of Windows is MarkdownPad.\footnote{\url{http://markdownpad.com/}} 

\subsection{Preamble and document structure}

That was trick subsection title. Unlike LaTeX documents Markdown documents do not have a preamble. There is also no need to start a body environment or anything like that. HTML head elements (HTMLs preamble equivalent) is added automatically when you render Markdown documents into HTML. So with Markdown, you can just start typing.

Here is an example of an R Markdown document that creates the map we saw in Chapter \re{FiguresChapter}:\footnote{This code is available on GitHub at: \url{https://github.com/christophergandrud/Rep-Res-Examples/blob/master/RMarkdownExamples/ExampleKnitrMarkdown.Rmd}.}

<<Ch13FullExample, eval=FALSE, engine='sh'>>=
# Example R Markdown File
## from ''Reproducible Research with R and RStudio''
### Christopher Gandrud
### 14 January 2013

-----------

```{r LoadPackages, include=FALSE}
# Load required packages
library(devtools)
```

We can use use R's [googleVis](http://code.google.com/p/google-
motion-charts-with-r/#Examples) package to create interactive 
JavaScript tables, charts, and maps. Here is an example of 
how to create a map with *googleVis*'s `gvisGeoMap` command. 

Let's first download some data from [GitHub](https://github.com/). 
See chapters 6 and 7 for details about this data as well as the 
[variable description page](https://github.com/christophergandrud/
Rep-Res-Examples/blob/master/DataGather_Merge/MainData_
VariableDescriptions.md).

-----------

## Fertilizer Consumption (kilograms per hectare of arable land) 
in 2003
### Data from the [World Bank](http://data.worldbank.org/
indicator/AG.CON.FERT.ZS)

```{r CreategvisGeoMap, echo=FALSE, message=FALSE, results='asis'}
# Create geo map of global fertilizer consumption for 2003
# The data is loaded from GitHub (http://bit.ly/V0ldsf)
## The data gathering process used to create this data set
## is completely reproducible. For more information see:
## http://bit.ly/YnMKBG
source_url("http://bit.ly/VNnZxS")
```

-----------
@

\noindent When knitted in RStudio and viewed in the Google Chrome web browser\index{Google Chrome} the final presentation document looks like Figure \ref{MarkdownExampleFig}.

\begin{figure}
	\caption{Example Rendered R Markdown Document}
	\label{MarkdownExampleFig}
	\begin{center}
		\includegraphics[width=0.8\textwidth]{Children/Chapter13/images13/MarkdownExampleMap.png}
	\end{center}
\end{figure}


\subsection{Headers}\label{header, Markdown}

Headers in Markdown are extremely simple. To create a line in the topmost header style--maybe a title--just place one hash mark (\verb|#|) at the beginning of the line. The second tier header gets two hashes (\verb|##|) and so on. You can also put the hash mark(s) at the end of the header, but this is not necessary. Here is an example of the three header:

<<Ch13header, eval=FALSE, tidy=FALSE, engine='sh'>>=
# A level one header
## A level two header
### A level three header
@

\noindent There are six header levels in Markdown. You can also create level one headers by following a line of text with equal signs. Level two headers can be created by following a line of text with dashes:

<<Ch13headerLines, eval=FALSE, tidy=FALSE, engine='sh'>>=
A level one header
===================

A level two header
-------------------
@

\subsection{Horizontal Lines}\index{lines, Markdown}

If you would like to create horizontal lines that run the width of the page in Markdown simply place three or more equal signs or dashes separated by text from above by one blank line:

<<Ch13Lines, eval=FALSE, tidy=FALSE, engine='sh'>>=
Create a horizontal inline

=========
@

\subsection{Paragraphs and new lines}\index{paragraphs, Markdown}

Just like in LaTeX new paragraphs are created by putting text on a new line separated by a blank line. For example:

<<Ch13NewLine, eval=FALSE, tidy=FALSE, engine='sh'>>=
This is the first paragraph.

This is the second paragraph.
@

\noindent You might have noticed that in the headers example we did not need to separate the header with a blank line.

Separating lines with a blank line places a blank line in the HTML document. End a line with two or more white spaces (  ) to create a new line that is not separated by a blank line.\index{new line, Markdown}

\subsection{Italics and bold}\index{italics, Markdown}\index{bold, Markdown}

To \emph{italicize} a word in Markdown simply place it between two asterisks, e.g. \verb|*Italicize these words*|. To make a word \textbf{bold} place it between four asterisks: \verb|**Make these words bold**|.

\subsection{Links}\label{MarkdownLinks}

To create hyperlinks in Markdown use the \verb|[LINK_TEXT](URL)| syntax.\footnote{You can also include a \texttt{title} attribute after the URL. Though this is generally not very useful. See page \pageref{TitleAttribute} for a discussion.} \verb|LINK_TEXT| is the text that you would like to show up as the hyperlink text. When you click on this text it will take you to the linked site specified by \texttt{URL}.

If you want to show a URL as as the text simply type it in both the square brackets and parentheses. This is a little tedious so in RStudio you can just type the URL and it will be hyper-linked. In other regular Markdown place the URL between less than and greater than signs (\verb|<URL>|).

\subsection{Special characters and font customization}

Unlike LaTeX Markdown can include almost any letters and characters included in your system. The main exceptions are characters used by Markdown syntax (e.g. \verb|*|, \verb|#|, \verb|\| and so on). You will have to escape these (see below). Font sizes and typefaces cannot be set directly with Markdown syntax. You need to set these with HTML or CSS, which I don't cover here.

\subsection{Lists}\index{lists, Markdown}

To create itemized lists Markdown simply place the items after one dash:

<<Ch13ItemizeList, eval=FALSE, tidy=FALSE, engine='sh'>>=
- Item 1
- Another item
- Item 3
@

\noindent To create a numbered list use numbers and periods rather than dashes.

<<Ch13NumberedList, eval=FALSE, tidy=FALSE, engine='sh'>>=
1. Item 1
2. Another item
3. Item 3
@

\subsection{Escape characters}\index{escape character, Markdown}

Markdown, like LaTeX and R uses backslashes (\verb|\|) as an escape character. For example if you want to have an asterisk in the text of your document, rather than start an italicize your text, type: \verb|\*|. Two characters ampersand (\verb|&|) and the less than sign (\verb|<|) have special meanings in HTML.\footnote{Ampersands declare the begining of a speacial HTML character. Less than signs begin HTML tags.} So, to have them printed literally in your text you have to use the HTML code for the characters. Ampersands are created with \verb|&amp|. Less than signs are created with \verb|&lt|. 

\subsection{Math}

Markdown by itself can't formatting mathematical equations. We can create LaTeX style equations by adding on the MathJax JavaScript engine.\index{MathJax} MathJax syntax is the same as LaTeX syntax (see page \pageref{MathLaTeX}), especially when used from RStudio. Markdown documents rendered in RStudio automatically links to the MathJax engine online.\footnote{You will not be able to render equations when you are not online when you are linking to the engine.} If you want to use another program to render Markdown documents with MathJax equations you may need to take extra steps to link to MathJax. For more details see: \url{http://docs.mathjax.org/en/latest/start.html#mathjax-cdn}.

Because backslashes are Markdown escape characters, in many Markdown editors you will have to use two backslashes to create math environments with MathJax. For example, in LaTeX and RStudio's Markdown you can create a display equation like this:

\[
s^{2} = \frac{\sum(x - \bar{x}^2)}{n - 1}
\]

\noindent you type:

<<Ch13Equation1, eval=FALSE, tidy=FALSE, engine='sh'>>=
\[
s^{2} = \frac{\sum(x - \bar{x}^2)}{n - 1}
\]
@

\noindent In other markdown programs you may have to use:

<<Ch13Equation2, eval=FALSE, tidy=FALSE, engine='sh'>>=
\\[
s^{2} = \frac{\sum(x - \bar{x}^2)}{n - 1}
\\]
@

\section{Expanding Markdown with MultiMarkdown and Custom CSS in RStudio}

Markdown is simple and easy to use. But being simple means that it lacks important functionality for presenting research results, such as footnotes and bibliographies. Also, customizing the look of a Markdown document is difficult. In this section I will show how to overcome these limitations, especially in RStudio, with MultiMarkdown and CSS. Space constraints limit me from giving a full introduction to either of these tools, so we are mostly going to focus on how to set up Markdown and custom CSS style files in RStudio.

\subsection{MultiMarkdown}\label{MultiMarkdownDiscussion}


\subsection{CSS style files and Markdown}

\paragraph{CSS style files in RStudio}


\section{Presentations with \texttt{Slidify}}

It is possible to create reproducible \emph{knitr} HTML5 slideshows\index{slideshow}\index{HTML5} with R using Ramnath Vaidyanathan's \emph{Slidify}\index{Slidify} package \citeyearpar{R-slidify}.\footnote{For more information about Slidify please visit its excellent website at \url{http://ramnathv.github.com/slidify/}. For example, this site includes information on how to customize slideshow layouts.} This package converts R Markdown files into HTML slideshows. There are a number of advantages to creating HTML presentations:

\begin{itemize}
	\item You can use the relatively simple Markdown syntax.
	\item HTML presentations are a nice native way to show content on the web.
	\item Slidify presentations can incorporate virtually any content that can be included in a webpage. This includes interactive content, like motion charts created by \emph{googleVis}\index{googleVis} (see Chapter \ref{FiguresChapter}).
\end{itemize} 

\noindent There are a number of steps to create an HTML5 slideshow with \emph{Slidify}:

\begin{itemize}
	\item initialize a slideshow with the \verb|author| command,
	\item edit the slideshows main R Markdown file, called \emph{index.Rmd} by default. This includes both the files header and body.
	\item Use the \verb|slidify| command to run \emph{knitr} and compile the slideshow 
	\item publish the slideshow online with the \verb|publish| command.
\end{itemize}

\noindent We will cover each step in turn.

\paragraph{HTML5 frameworks}

Before getting into the details of how to use \emph{Slidify}, let's briefly understand what an HTML5 slideshow is and the frameworks that make it possible. HTML5 slideshows rely on a number of web technologies in addition to HTML5, CSS,\index{CSS}\footnote{Cascading Style Sheets} JavaScript,\index{JavaScript} to essentially create a website that behaves like a Latex beamer\index{beamer} or Powerpoint\index{Powerpoint} presentation. They run in your web browser and you may need to be connected to the internet for them to work properly as key components may be located remotely. Most browsers have a \texttt{Full Screen} mode you can use for presentations. 

There are a number of different HTML5 slideshow frameworks that let you create and style you slideshows. Table \ref{SlideshowFrameworks} lists some of the major frameworks supported by \emph{Slidify}. In all of the framworks you advance through slides with the forward arrow button on your keyboard. Of course you can go back with the back arrow. Despite this similarity, the frameworks have different looks and capabilities. Check out their respective websites listed in Table \ref{SlideshowFrameworks} for more information. The URL's listed in Table 5 \ref{SlideshowFrameworks} link to example slideshows.

\begin{table}
	\caption{A Selection of HTML5 Slideshow Frameworks}
	\label{SlideshowFrameworks}
	\begin{center}
	\begin{tabular}{l c}
		\hline
		Framework & Website for more information \\[0.25cm]
		\hline\hline
		io2012 & \url{http://code.google.com/p/io-2012-slides/} \\[0.25cm]
		html5slides & \url{http://code.google.com/p/html5slides/} \\[0.25cm]
		deck.js &  \url{http://imakewebthings.com/deck.js/} \\[0.25cm]
		\hline
	\end{tabular}
	\end{center}
\end{table}

\paragraph{Installing Slidify}

To get started with Slidify load the \emph{devtools} packages and install its libraries from GitHub\index{GitHub}.\footnote{As of when I wrote this (December 2012) Slidify was not yet available on CRAN\index{CRAN}.}

<<Ch13DownloadSlidify, eval=FALSE>>=
# Load devtools
library(devtools)

# Install Slidify and ancillary libraries
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
@

\paragraph{Initializing a new slideshow}

Use the \verb|author| command to create a new slideshow. Imagine we want to create a new slideshow in \emph{Presentation} folder of our \emph{ExampleProject} called \emph{MySlideShow}. To do this type:

<<Ch13SlidifyAuthor, eval=FALSE>>=
# Set working directory
setwd("/ExampleProject/Presentation")

# Load Slidify
library(slidify)

# Create slide show
author("MySlideShow")
@

This will create a new folder with an R Markdown file called \emph{index.Rmd}. It will also initialize a Git\index{Git} repository and create a folder called \emph{assets}. The \emph{assets} folder is where CSS,\index{CSS} JavaScript,\index{JavaScript} and other files needed to create the full slideshow are stored. Luckily, \emph{Slidify} takes care of all these things for us. Though if you want to you can certainly customize these files.\footnote{See \url{http://ramnathv.github.com/slidify/customize.html} for more details on the best way to modify these files.} You will primarily edit the \emph{index.Rmd} file. You are can change the name of this file if you like. 

\paragraph{The \emph{Slidify} header}

When you \verb|author| a slideshow, \emph{Slidify} automatically opens the \emph{index.Rmd}.\footnote{If you are using RStudio the file will open in a new source tab. In the R application, it will open the file in your default text editor. Finally in command line R on Mac or Unix-like computers it will open in VIM\index{VIM}.} First thing you will see in this file is the \emph{Slidify} header:

{\small
<<Ch13SlidifyHeader, eval=FALSE, tidy=FALSE>>=
---
title       : 
subtitle    : 
author      : 
job         : 
framework   : io2012        # {io2012, html5slides, shower, dzslides, ...}
highlighter : highlight.js  # {highlight.js, prettify, highlight}
hitheme     : tomorrow      # 
widgets     : []            # {mathjax, quiz, bootstrap}
mode        : selfcontained # {standalone, draft}
---
@
}

The first four lines relate to what will appear on the slideshow's title slide, i.e. the title, subtitle, author, and job.\footnote{This is intended as a place to put your job title and affiliation.}  The next five lines affect the slideshow's formating. The \texttt{framework} line allows you to change the slideshow's overall type. It is currently set by default to Google's \emph{io2012} framework. You can see a number of other supported formats on the right side of the line. These include \emph{html5slides}, Opera's \emph{shower} format and \emph{dzslides}. You can use one of these other formats by deleting \texttt{io2012} after the colon and replacing it with the name of your desired framework.

The following two lines (\texttt{highlighter} and \texttt{hitheme}) relate to which syntax highlighting\index{syntax highlighting} theme you would like code chunks to be formatted with. The default highlighter is \emph{highlighter.js}\footnote{See: \url{http://softwaremaniacs.org/soft/highlight/en/}.} with the \emph{tomorrow} theme.\footnote{See: \url{https://github.com/chriskempson/tomorrow-theme}.}

The next line allows you to automatically include a number of different widgets. As we saw earlier in this chapter, the \emph{Mathjax} widget lets us view well formatted math in Markdown produced documents. The \emph{bootstrap} widget lets you take advantage of, among other things, the wide range of JavaScript plug-ins available from Twitter Bootstrap\index{Twitter Bootstrap}.\footnote{See: \url{http://twitter.github.com/bootstrap/javascript.html}. For an example of how you can combine Twitter Bootstrap's \emph{Carousel} plug-in with \emph{googleVis} to create interactive timeline maps in slide shows see: \url{http://ramnathv.github.com/carouselDemo/#1}.} To add widgets, type their name in the square brackets (\verb|[]|) separated by a comma.

Finally there is the \texttt{mode} option. In general you will want to use the default \texttt{selfcontained} mode.\todo{Get more info on mode.}

\paragraph{Slide frames and slide titles}

\emph{Slidify} R Markdown documents use very similar syntax to ordinary R Markdown documents. \emph{knitr} code chunks are written in the same way. An important difference is that three dashes (\verb|---|) delimit individual slide frames. Importantly, you need to have an empty line before and after the three dashes or else a new slide will not be created. Two hash marks (\verb|##|) are used to indicate a slide's title.\footnote{One hash mark does creates a slide title formatted in the same way as the text.} 

\paragraph{Compiling a Slideshow}

Use the \verb|slidify| command to compile an R Markdown file into a slideshow. This run \emph{knitr} and parse your R Markdown file into a slideshow:

<<Ch13SlidifyFile, eval=FALSE>>=
# Change to slideshow's working directory
setwd("/ExampleProject/Presentation/MySlideShow")

# Compile the slideshow
slidify("MySlideShow.Rmd")
@

\noindent In RStudio\index{RStudio} you can click the \texttt{Knit HTML} button and it will `slidify' the R Markdown file. The slideshow will likely not work in the RStudio preview window, but opening the \emph{index.html} file in your web browser works fine. 

\paragraph{Publishing Slidify slideshows}

You can of course show slideshows on your own computer by opening the \emph{index.html} file in a web browser. If you want to make your slideshow available to anyone with an internet connection use Slidify's \verb|publish| command. This will allow you to publish your presentation via GitHub\index{GitHub}, Dropbox\index{Dropbox}, or RPubs\index{RPubs}. Because we've already learned about how to use GitHub and Dropbox, I'll focus on using these two services to publish your slideshow.

To publish our example \emph{MySlideShow} on GitHub first create a new GitHub repository\index{GitHub repository} called `MySlideShow' (see Chapter \ref{Storing} for instructions on how to create a new repository). Make sure the repository is empty, i.e. has no files in it. Then type in R:

<<Ch13GitPublish, eval=FALSE>>=
publish(user = "USER", repo = "MySlideShow")
@

\noindent \texttt{USER} is your GitHub user name. This will create a new GitHub Pages\index{GitHub Pages} website where your slideshow will be accessible to anyone on the internet. We look at GitHub Pages in more detail later in this chapter.

To use the webpage hosting abilities of Dropbox public folders type:

<<Ch13DrobpoxPublish, eval=FALSE>>=
publish("MySlideShow", host = "dropbox")
@

\noindent This will create a new directory in your Dropbox \emph{Public} folder. To get the URL address for the slideshow navigate to the folder and copy the public link for the \emph{index.html} file (see Chapter \ref{Storing} for more details).

Note: Before you use the \verb|publish| command you will need to have set up accounts for the respective services before publishing a slideshow to them. In the GitHub and Dropbox cases you also need to have set up the services on your computer. Please refer back to Chapter \ref{Storing} for more details on how to set up these services.

\section{Publishing Markdown Documents}

We saw in the previous section how \emph{slidify} can publish slideshows via RPubs, Dropbox and GitHub. In this section we will look at these options and others in more detail for publishing reproducible Markdown documents.

\subsection{Locally}

\subsection{RPubs}

\subsection{Hosting webpages with Dropbox}

\subsection{Blogging with Tumblr}

\subsection{Jekyll-Bootstrap and GitHub}

see \url{http://jfisher-usgs.github.com/r/2012/07/03/knitr-jekyll/}

\subsection{Jekyll and Github Pages}

\section{Using Markdown for non-HTML output with Pandoc}

Markdown syntax is very simple. So simple, you may be tempted to write many or all of your presentation documents in Markdown. This presents the obvious problem of how to convert your markdown documents to other markup languages if, for example, you want to create a LaTeX formatted PDF. As we saw in the previous chapter, Pandoc can help solve this problem. Pandoc is a command line program that can convert files written in Markdown, HTML, LaTeX, and a number of other markup languages\footnote{See the Pandoc website for more details: \url{http://johnmacfarlane.net/pandoc/}} to any of the other formats. 

%% Fill In Example with Fake Documents.

  
