% Chapter Chapter 13 For Reproducible Research in R and RStudio
% Christopher Gandrud
% Created: 16/07/2012 05:45:03 pm CEST
% Updated: 3 January 2013

<<set-parent13, echo=FALSE, results='hide', cache=FALSE>>=
set_parent('/Parent/Rep-Res-Parent.Rnw')
@

\chapter{Presenting on the Web and Beyond with Markdown/HTML}\label{MarkdownChapter}

\todo[inline]{This chapter is incomplete.}

\section{The Basics}

\subsection{Headings}\label{headings, Markdown}

Headings in Markdown are extremely simple. To create a line in the topmost heading style--maybe a title--just place one hash mark (\verb|#|) at the beginning of the line. The second tier heading just gets two hashes (\verb|##|) and so on. You can also put the hash mark(s) at the end of the heading, but this is not necessary.

\subsection{Italics and bold}

\subsection{Links}\label{MarkdownLinks}

\subsection{Math}

\subsection{Escape characters}\index{escape character, Markdown}

Markdown, like LaTeX and R uses backslashes (\verb|\|) as an escape character. For example if you want to have an asterisk in the text of your document, rather than start an italicize your text type: \verb|\*|. Two characters ampersand (\verb|&|) and the less than sign (\verb|<|) have special meanings in HTML\footnote{Ampersands declare the begining of a speacial HTML character. Less than signs begin HTML tags.} So, have them printed literally in your text you have to use HTML code for the characters. Ampersands are created with \verb|&amp|. Less than signs are created with \verb|&lt|. 

\subsection{CSS style files and Markdown}

\paragraph{CSS style files in RStudio}

\paragraph{Drawing figures with CSS}

\subsection{Added features with MultiMarkdown}\label{MultiMarkdownDiscussion}

\section{Simple webpages}

\subsection{RPubs}

\subsection{Hosting webpages with Dropbox}

\section{Reproducible websites}

\section{Presentations with \texttt{Slidify}}

It is possible to create reproducible \emph{knitr} HTML5 slideshows\index{slideshow}\index{HTML5} with R using Ramnath Vaidyanathan's \emph{Slidify}\index{Slidify} package \citeyearpar{R-slidify}.\footnote{For more information about Slidify please visit its excellent website at \url{http://ramnathv.github.com/slidify/}. For example, this site includes information on how to customize slideshow layouts.} This package converts R Markdown files into HTML slideshows. There are a number of advantages to creating HTML presentations:

\begin{itemize}
	\item You can use the relatively simple Markdown syntax.
	\item HTML presentations are a nice native way to show content on the web.
	\item Slidify presentations can incorporate virtually any content that can be included in a webpage. This includes interactive content, like motion charts created by \emph{googleVis}\index{googleVis} (see Chapter \ref{FiguresChapter}).
\end{itemize} 

\noindent There are a number of steps to create an HTML5 slideshow with \emph{Slidify}:

\begin{itemize}
	\item initialize a slideshow with the \verb|author| command,
	\item edit the slideshows main R Markdown file, called \emph{index.Rmd} by default. This includes both the files header and body.
	\item Use the \verb|slidify| command to run \emph{knitr} and compile the slideshow 
	\item publish the slideshow online with the \verb|publish| command.
\end{itemize}

\noindent We will cover each step in turn.

\paragraph{HTML5 frameworks}

Before getting into the details of how to use \emph{Slidify}, let's briefly understand what an HTML5 slideshow is and the frameworks that make it possible. HTML5 slideshows rely on a number of web technologies in addition to HTML5, CSS,\index{CSS}\footnote{Cascading Style Sheets} JavaScript,\index{JavaScript} to essentially create a website that behaves like a Latex beamer\index{beamer} or Powerpoint\index{Powerpoint} presentation. They run in your web browser and you may need to be connected to the internet for them to work properly as key components may be located remotely. Most browsers have a \texttt{Full Screen} mode you can use for presentations. 

There are a number of different HTML5 slideshow frameworks that let you create and style you slideshows. Table \ref{SlideshowFrameworks} lists some of the major frameworks supported by \emph{Slidify}. In all of the framworks you advance through slides with the forward arrow button on your keyboard. Of course you can go back with the back arrow. Despite this similarity, the frameworks have different looks and capabilities. Check out their respective websites listed in Table \ref{SlideshowFrameworks} for more information. The URL's listed in Table 5 \ref{SlideshowFrameworks} link to example slideshows.

\begin{table}
	\caption{A Selection of HTML5 Slideshow Frameworks}
	\label{SlideshowFrameworks}
	\begin{center}
	\begin{tabular}{l c}
		\hline
		Framework & Website for more information \\[0.25cm]
		\hline\hline
		io2012 & \url{http://code.google.com/p/io-2012-slides/} \\[0.25cm]
		html5slides & \url{http://code.google.com/p/html5slides/} \\[0.25cm]
		deck.js &  \url{http://imakewebthings.com/deck.js/} \\[0.25cm]
		\hline
	\end{tabular}
	\end{center}
\end{table}
\todo{fill in table}

\paragraph{Installing Slidify}

To get started with Slidify load the \emph{devtools} packages and install its libraries from GitHub\index{GitHub}.\footnote{As of when I wrote this (December 2012) Slidify was not yet available on CRAN\index{CRAN}.}

<<Ch13DownloadSlidify, eval=FALSE>>=
# Load devtools
library(devtools)

# Install Slidify and ancillary libraries
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
@

\paragraph{Initializing a new slideshow}

Use the \verb|author| command to create a new slideshow. Imagine we want to create a new slideshow in \emph{Presentation} folder of our \emph{ExampleProject} called \emph{MySlideShow}. To do this type:

<<Ch13SlidifyAuthor, eval=FALSE>>=
# Set working directory
setwd("/ExampleProject/Presentation")

# Load Slidify
library(slidify)

# Create slide show
author("MySlideShow")
@

This will create a new folder with an R Markdown file called \emph{index.Rmd}. It will also initialize a Git\index{Git} repository and create a folder called \emph{assets}. The \emph{assets} folder is where CSS,\index{CSS} JavaScript,\index{JavaScript} and other files needed to create the full slideshow are stored. Luckily, \emph{Slidify} takes care of all these things for us. Though if you want to you can certainly customize these files.\footnote{See \url{http://ramnathv.github.com/slidify/customize.html} for more details on the best way to modify these files.} You will primarily edit the \emph{index.Rmd} file. You are can change the name of this file if you like. 

\paragraph{The \emph{Slidify} header}

When you \verb|author| a slideshow, \emph{Slidify} automatically opens the \emph{index.Rmd}.\footnote{If you are using RStudio the file will open in a new source tab. In the R application, it will open the file in your default text editor. Finally in command line R on Mac or Unix-like computers it will open in VIM\index{VIM}.} First thing you will see in this file is the \emph{Slidify} header:

{\small
<<Ch13SlidifyHeader, eval=FALSE, tidy=FALSE>>=
---
title       : 
subtitle    : 
author      : 
job         : 
framework   : io2012        # {io2012, html5slides, shower, dzslides, ...}
highlighter : highlight.js  # {highlight.js, prettify, highlight}
hitheme     : tomorrow      # 
widgets     : []            # {mathjax, quiz, bootstrap}
mode        : selfcontained # {standalone, draft}
---
@
}

The first four lines relate to what will appear on the slideshow's title slide, i.e. the title, subtitle, author, and job.\footnote{This is intended as a place to put your job title and affiliation.}  The next five lines affect the slideshow's formating. The \texttt{framework} line allows you to change the slideshow's overall type. It is currently set by default to Google's \emph{io2012} framework. You can see a number of other supported formats on the right side of the line. These include \emph{html5slides}, Opera's \emph{shower} format and \emph{dzslides}. You can use one of these other formats by deleting \texttt{io2012} after the colon and replacing it with the name of your desired framework.

The following two lines (\texttt{highlighter} and \texttt{hitheme}) relate to which syntax highlighting\index{syntax highlighting} theme you would like code chunks to be formatted with. The default highlighter is \emph{highlighter.js}\footnote{See: \url{http://softwaremaniacs.org/soft/highlight/en/}.} with the \emph{tomorrow} theme.\footnote{See: \url{https://github.com/chriskempson/tomorrow-theme}.}

The next line allows you to automatically include a number of different widgets. As we saw earlier in this chapter, the \emph{Mathjax} widget lets us view well formatted math in Markdown produced documents. The \emph{bootstrap} widget lets you take advantage of, among other things, the wide range of JavaScript plug-ins available from Twitter Bootstrap\index{Twitter Bootstrap}.\footnote{See: \url{http://twitter.github.com/bootstrap/javascript.html}. For an example of how you can combine Twitter Bootstrap's \emph{Carousel} plug-in with \emph{googleVis} to create interactive timeline maps in slide shows see: \url{http://ramnathv.github.com/carouselDemo/#1}.} To add widgets, type their name in the square brackets (\verb|[]|) separated by a comma.

Finally there is the \texttt{mode} option. In general you will want to use the default \texttt{selfcontained} mode.\todo{Get more info on mode.}

\paragraph{Slide frames and slide titles}

\emph{Slidify} R Markdown documents use very similar syntax to ordinary R Markdown documents. \emph{knitr} code chunks are written in the same way. An important difference is that three dashes (\verb|---|) delimit individual slide frames. Importantly, you need to have an empty line before and after the three dashes or else a new slide will not be created. Two hash marks (\verb|##|) are used to indicate a slide's title.\footnote{One hash mark does creates a slide title formatted in the same way as the text.} 

\paragraph{Compiling a Slideshow}

Use the \verb|slidify| command to compile an R Markdown file into a slideshow. This run \emph{knitr} and parse your R Markdown file into a slideshow:

<<Ch13SlidifyFile, eval=FALSE>>=
# Change to slideshow's working directory
setwd("/ExampleProject/Presentation/MySlideShow")

# Compile the slideshow
slidify("MySlideShow.Rmd")
@

\noindent In RStudio\index{RStudio} you can click the \texttt{Knit HTML} button and it will `slidify' the R Markdown file. The slideshow will likely not work in the RStudio preview window, but opening the \emph{index.html} file in your web browser works fine. 

\paragraph{Publishing Slidify slideshows}

You can of course show slideshows on your own computer by opening the \emph{index.html} file in a web browser. If you want to make your slideshow available to anyone with an internet connection use Slidify's \verb|publish| command. This will allow you to publish your presentation via GitHub\index{GitHub}, Dropbox\index{Dropbox}, or RPubs\index{RPubs}. Because we've already learned about how to use GitHub and Dropbox, I'll focus on using these two services to publish your slideshow.

To publish our example \emph{MySlideShow} on GitHub first create a new GitHub repository\index{GitHub repository} called `MySlideShow' (see Chapter \ref{Storing} for instructions on how to create a new repository). Make sure the repository is empty, i.e. has no files in it. Then type in R:

<<Ch13GitPublish, eval=FALSE>>=
publish(user = "USER", repo = "MySlideShow")
@

\noindent \texttt{USER} is your GitHub user name. This will create a new GitHub Pages\index{GitHub Pages} website where your slideshow will be accessible to anyone on the internet. We look at GitHub Pages in more detail later in this chapter.

To use the webpage hosting abilities of Dropbox public folders type:

<<Ch13DrobpoxPublish, eval=FALSE>>=
publish("MySlideShow", host = "dropbox")
@

\noindent This will create a new directory in your Dropbox \emph{Public} folder. To get the URL address for the slideshow navigate to the folder and copy the public link for the \emph{index.html} file (see Chapter \ref{Storing} for more details).

Note: Before you use the \verb|publish| command you will need to have set up accounts for the respective services before publishing a slideshow to them. In the GitHub and Dropbox cases you also need to have set up the services on your computer. Please refer back to Chapter \ref{Storing} for more details on how to set up these services.

\subsection{Blogging with Tumblr}

\subsection{Jekyll-Bootstrap and GitHub}

see \url{http://jfisher-usgs.github.com/r/2012/07/03/knitr-jekyll/}

\subsection{Jekyll and Github Pages}

\section{Using Markdown for non-HTML output with Pandoc}

Markdown syntax is very simple. So simple, you may be tempted to write many or all of your presentation documents in Markdown. This presents the obvious problem of how to convert your markdown documents to other markup languages if, for example, you want to create a LaTeX formatted PDF. As we saw in the previous chapter, Pandoc can help solve this problem. Pandoc is a command line program that can convert files written in Markdown, HTML, LaTeX, and a number of other markup languages\footnote{See the Pandoc website for more details: \url{http://johnmacfarlane.net/pandoc/}} to any of the other formats. 

%% Fill In Example with Fake Documents.

  
