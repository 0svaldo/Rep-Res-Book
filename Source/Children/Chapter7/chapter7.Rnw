% Chapter Chapter 7 For Reproducible Research in R and RStudio
% Christopher Gandrud
% Created: 16/07/2012 05:45:03 pm CEST
% Updated: 31 December 2012

<<set-parent7, echo=FALSE, results='hide', cache=FALSE>>=
set_parent('/git_repositories/Rep-Res-Book/Source/Parent/Rep-Res-Parent.Rnw')
@

\chapter{Preparing Data for Analysis}\label{DataClean}

Once we have gathered the raw data that we want to include in our statistical analyses we generally need to clean so that it can be merged it into a single data file. This chapter covers some of the basics of how to clean data files and merge them together into one data frame using R. If you are very familiar with data transformations in R you may want to skip onto the next chapter. 

\section{Cleaning data for merging}

In order to successfully merge two or more data frames we need to make sure that they are in the same format. Let's look at some of the important formatting issues and how to reformat your data frames so that they can be easily merged.

\subsection{Get a handle on your data}

Before doing anything to your data it is a good idea to take a look at it and see what needs to be done. Surprisingly, just taking a little time to look at your data will help you avoid many error messages and much frustration. 

To get a sense of your data you could of course just type a data frame object's name into the R console. This will print the entire data frame. For data frames with more than a few variables and observations. We have already seen a number of commands that are useful for seeing parts of your data. The \texttt{names}\index{names} command shows you the variable names of a data frame object. The \texttt{head}\index{head} command shows the first few observations in a data frame and \texttt{tail}\index{tail} shows the last few.

The \texttt{summary} command\index{summary, R command} is especially helpful for seeing not only basic descriptive statistics for all of the variables in a data frame, but also the variables' types. For example, let's us the \emph{FertConsumpData} object we created in Chapter \ref{DataGather}:

{\small
<<Ch7SummaryExamp>>=
# Summarize FertConsumpData data frame object
summary(FertConsumpData)
@
}

\noindent We can immediately see that the variables \textbf{iso2C} are character strings. Because \emph{summary} is able to calculate means, medians, and so on for \textbf{AG.CON.FERT.ZS} and \textbf{year} we know they are numeric. You can of course run \emph{summary} on a particular variable by using the component selector (\verb|$|):

<<Ch7SummarizeCompSelect>>=
# Summarize the methane emissions variable from FertConsumpData 
summary(FertConsumpData$AG.CON.FERT.ZS)
@

\noindent We'll come back to why knowing this type of information is important for merging and data analysis later in this Chapter.

You can view a portion of a data frame object with the \texttt{View} command.\index{View R command} This will open a new window that lets you see a selection of the data frame. If you are using RStudio, you can click on the data frame in the \emph{Workspace} tab and you will get something that look similar. Note that neither of these viewers are interactive in that you can't use them to manipulate the data. They are only data viewers. To be see similar windows that you can interactively edit use the \texttt{fix} command in the same way that you use \texttt{view}. This can be useful for small edits, but remember that the edits are not reproducible.

\subsection{Reshaping Data}

Obviously it is usually a good if the data sets kept in data frame type objects. See Chapter \ref{GettingStartedRKnitr} (page \pageref{data.frame}) for how to convert objects into data frames with the \texttt{data.frame} command. Not only do data sets (generally) need to be stored in data frame objects they also need to follow the same layout before they can be merged. Most R statistical analysis tools assume that your data is in ``long'' format\index{long formatted data} (as we also did in Chapter \ref{GettingStartedRKnitr}). This usually means that data frame columns are variables and rows are specific observations (see Table \ref{ExampleLong}).

\begin{table}[h!]
    \caption{Long Formatted Data Example}
    \label{ExampleLong}
    \begin{tabular}{l c}
        \\[0.15cm]
        \hline
        Observation & Variable1 \\
        \hline \\[0.1cm]
        Subject1 & \\[0.25cm]
        Subject2 & \\[0.25cm]
        Subject3 & \\[0.25cm]
        \ldots & \\[0.25cm]
        \hline
    \end{tabular}
\end{table}

\noindent In this chapter we will mostly use examples of time-series cross-sectional data (TSCS)\index{cross-sectional time-series data}\index{TSCS} that we want to have in long-format. Long formatted TSCS has is simply a data frame where rows identify observations of a particular subject at three points in time (see Table \ref{ExampleTSCSLong})

 \begin{table}[h!]
    \caption{Long Formatted Time-series Cross-sectional Data Example}
    \label{ExampleTSCSLong}
    \begin{tabular}{l c c}
        \\[0.15cm]
        \hline
        Subject & Time & Variable1 \\
        \hline \\[0.1cm]
        Subject1 & 1 & \\[0.25cm]
        Subject1 & 2 & \\[0.25cm]
        Subject1 & 3 & \\[0.25cm]
        Subject2 & 1 & \\[0.25cm]
        Subject2 & 2 & \\[0.25cm]
        Subject2 & 3 & \\[0.25cm]
        \ldots & & \\[0.25cm]
        \hline
    \end{tabular}
\end{table}

\noindent In this chapter our TSCS data is specifically going to be countries that are observed in multiple years.

\noindent If one of your data sets is not in this format then you will need to reshape\index{reshape data} it. Some data sets are in ``wide'' format;\index{wide formatted data} where one of the columns in long formatted data is widened to cover multiple columns. This can be confusing without an example. Table \ref{ExampleWide} shows how Table \ref{ExampleTSCSLong} looks when we widen the time variable.

\begin{table}[h!]
    \caption{Wide Formatted Data Example}
    \label{ExampleWide}
    \begin{tabular}{l c c c}
        \\[0.15cm]
        \hline 
        Subject & Time1 & Time2 & Time3 \\
        \hline \\[0.1cm]
        Subject1 & & & \\[0.25cm]
        Subject2 & & & \\[0.25cm]
        \ldots & & & \\[0.25cm]
        \hline
    \end{tabular}
\end{table}

Reshaping data is often the cause of much confusion and frustration. Though probably never easy, there are a number of useful R functions for changing data from wide format to long and vice versa. These include the matrix transpose command (\textbf{t})\footnote{See this example by Rob Kabacoff: \url{http://www.statmethods.net/management/reshape.html}. Note also that because the matrix transpose function is denoted with simply as \texttt{t}, you should not give any object the name \emph{t}.}\index{matrix transpose} and the \textbf{reshape}\index{reshape, command} command, both in loaded in R by default.  Another very helpful package is \emph{reshape2} \citep{R-reshape2}.\index{reshape2} This provides more general tools for reshaping data and is worth investing some time in learning well. In this section we will cover some of \emph{reshape2}'s basic commands and use them to reshape TSCS data frame from wide to long format. We will also encounter this package in more detail in Chapter \ref{FiguresChapter} when we want to transform data so that it can be graphed.

Let's imagine that the fertilizer consumption data we previously downloaded from the World Bank is in wide rather than long format and is in a data frame objected called \emph{WideFert}. It looks like this:\footnote{Please see the Appendix (page \pageref{WideAppendix}) for the code I used to reshape the data.}

<<Ch7WideCreate, include=FALSE>>=
# Reshape Wide
MoltenFert <- melt(data = FertConsumpData, 
                    id.vars = c("iso2c", "country", "year"), measure.vars= "AG.CON.FERT.ZS")

# Cast MoltenFert to year wide format
WideFert <- dcast(data = MoltenFert, 
                    formula = iso2c + country ~ year, 
                    value_var = "AG.CON.FERT.ZS")

# Order Wide Fert by country
WideFert <- WideFert[order(WideFert$country), ]
@

<<Ch7ShowWideFert>>=
head(WideFert)
@

Let's use \emph{reshape2}'s \texttt{melt}\index{melt} command to reshape this data from wide to long format. The term ``melt'' is intended to evoke an image of the data melting down from a wide to long format.\footnote{The opposite \texttt{cast} command (\texttt{dcast}\index{cast}\index{dcast} in the case of data frames) is supposed to evoke an image of casting out the data from long to wide format. See page \ref{WideAppendix} for am example using the \texttt{dcast} command.} In our \emph{WideFert} data we don't want the \textbf{iso2c} and \textbf{country} variables to be melted. These variables identify the data set's subjects. we can tell \texttt{melt} that they are id variables with the \texttt{id.vars} argument. The remaining columns (i.e. \textbf{2002}, \textbf{2003}, \textbf{2004} and \textbf{2005}) will be melted into two new variables: \textbf{variable}, and \textbf{value}. The former will contain the years and the later will contain the fertilizer consumption data. Here is the full code:

<<Ch7MeltFert, tidy=FALSE>>=
# Melt WideFert
MoltenFert <- melt(data = WideFert, 
                    id.vars = c("iso2c", "country"))

# Show MoltenFert
head(MoltenFert)
@ 

\noindent Note that objects that are created by \texttt{melt} are often referred to as ``molten'' data in the \emph{reshape2} documentation. That is why I've given our new data frame the name \emph{MoltenFert}. 

\subsection{Renaming variables}

Frequently, in the data clean up process we want to change the names of our variables. This will make our data easier to understand and may even be necessary to properly combine data sets (see below). In the previous example, for instance, our \emph{MoltenFert} data frame has two variables--\textbf{variable} and \textbf{value}--that would be easier to understand if they were renamed \textbf{year} and \textbf{FertilizerConsumption}. Rename data frame variables is straight forward with the \texttt{rename} command in the \emph{reshape} package \citep{R-reshape}.\emph{The \emph{reshape} package precedes \emph{reshape2}, which was created to improve the performance of the \texttt{melt} and \texttt{cast} commands}

\subsection{Changing variables types}

\subsection{Recode factor levels}

Now that we've solved the row names problem let's tackle another issue. In the summary output you'll also see that the population variable--now called \textbf{LongPop}--no longer seems to be numeric. When we converted the transposed matrix into a data frame R turned this column into a factor type variable, because it now includes \texttt{population}. You can tell this because 

\subsection{Creating ID Variables}

\subsection{Sorting \& ordering data}

\section{Merging data sets}

\subsection{Binding}

\subsection{The merge command}

\subsection{Duplicate values}

\section*{Appendix}\label{WideAppendix}

R code for turning \emph{FertConsumData} into year-wide format:

<<Ch7WideCreateShow, eval=FALSE, tidy=FALSE>>=
# Load WDI package 
library(WDI)
library(reshape2)

# Gather agricultural methane emissions data from WDI
FertConsumpData <- WDI(indicator = "AG.CON.FERT.ZS")

# Melt data
## Note: data must be melted before it can be cast.
MoltenFert <- melt(data = FertConsumpData, 
                    id.vars = c("iso2c", "country", "year"), 
                    measure.vars= "AG.CON.FERT.ZS")

# Cast MoltenFert to year wide format
WideFert <- dcast(data = MoltenFert, 
                    formula = iso2c + country ~ year, 
                    value_var = "AG.CON.FERT.ZS")

# Order Wide Fert by country
WideFert <- WideFert[order(WideFert$country), ]
@