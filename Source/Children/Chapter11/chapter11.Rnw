% Chapter Chapter 11 For Reproducible Research in R and RStudio
% Christopher Gandrud
% Created: 16/07/2012 05:45:03 pm CEST
% Updated: 12 October 2012

<<set-parent11, echo=FALSE, results='hide', cache=FALSE>>=
set_parent('/git_repositories/Rep-Res-Book/Source/Parent/Rep-Res-Parent.Rnw')
@

\chapter{Presenting with LaTeX}\label{LatexChapter}

This chapter gives you a quick introduction to basic LaTeX document structures and commands. In the next chapter (Chapter \ref{LargeDocs}) we will build on these skills by learning how to use {\emph{knitr}} to create more complex multi-part LaTeX documents. 

\todo[inline]{Much of this chapter is incomplete.}

\section{The Basics}

\subsection{Editors}

As I mentioned earlier, RStudio is an fully functional LaTeX editor as well as an integrated development environment for R. Of course it is oriented towards combining R and LaTeX. If you want to create a new LaTeX document you can click {\tt{File}} \rightarrow {\tt{New}} \rightarrow {\tt{R\; Sweave}}. 

Remember from Chapter \ref{GettingStartedRKnitr} that R Sweave\index{R Sweave} files are basically LaTeX files that can include {\emph{knitr}} code chunks. You can compile R Sweave files like regular LaTeX files in RStudio even if they do not have code chunks. If you use another program to compile them you might need to change the file extension from {\tt{.Rnw}} to {\tt{.tex}}.

\subsection{Basic syntax}

All commands in LaTeX start with the backslash (\texttt{\textbackslash{}}) escape character\index{escape character}. For example, to create a section heading you use the \texttt{section} command. The arguments for LaTeX commands are written inside of curly braces (\texttt{\{\}}) like this:

<<Ch11Section, eval=FALSE>>=
\section{My Section Name}
@

\subsection{The header \& the body}

All LaTeX documents require a header\index{LaTeX header}. The header goes before the body of the document and specifies what type of presentation document you are creating--an article, a book, a slideshow, and so on. LaTeX refers to these as classes\index{LaTeX class}. You also can specify what style it should be formatted in and load any extra packages you may want to use to help you format your document.\footnote{The command to load a package in LaTeX is \texttt{\textbackslash{}usepackage}. For example, if you include \texttt{\textbackslash{}usepackage\{url\}} in the header of your document you will be able to specify URL links in the body with the command \texttt{\textbackslash{}url\{SOMEURL\}}.}

The header is followed by the body of your document. You tell LaTeX where the body\index{LaTeX begin document} of your document starts by typing \texttt{\textbackslash{}begin\{document\}}. The very last line of you document is usually \texttt{\textbackslash{}end\{document\}}, indicating that your document has ended. When you open a new R Sweave file in RStudio it creates an article class document with a very simple header and body like this:

\begin{knitrout}
\definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}\color{fgcolor}\begin{kframe}
\begin{alltt}
\textbackslash{}documentclass\{article\}

\textbackslash{}begin\{document\}


\textbackslash{}end\{document\}
\end{alltt}
\end{kframe}
\end{knitrout}


\subsection{Headings}

\subsection{Footnotes \& Bibliographies}

\subsubsection{Footnotes}

Plain, non-bibliographic footnotes are easy to create in LaTeX. Simply place \texttt{\textbackslash{}footnote\{} where you would like the footnote number to appear in the text. Then type in footnote's text. Of course remember to close the footnote with a \texttt{\}}. LaTeX does the rest, including formatting and numbering.

\subsubsection{Bibliographies}

\paragraph{Citing R Packages with BibTeX}

Researchers are pretty good about consistently citing others' articles and data. However, citations of R packages used in analyses is very inconsistent. This is unfortunate not only because correct attribution is not being given to those who worked to create the package, but also because it makes reproducibility harder. It obscures important steps that were taken in the research process, primarily which package versions were used. Fortunately, R includes the tools to quickly and dynamically generate citations, including the versions of the packages you are using. It can also add them directly to an existing bibliography file.

You can automatically create citations for R packages using the \texttt{citation} command in inside of a code chunk. For example if you want the citation information for the \texttt{xtable} package you would simply type:

<<Ch11IntroCite>>=
citation("xtable")
@

\noindent inside of a code chunk. This gives you both the plain citation as well as the BibTeX version for use in LaTeX and MultiMarkdown documents. If you only want the BibTeX version of the citation you can use the \texttt{toBibtex} command in the \emph{utils} package.

<<Ch11IntrotoBibtex>>=
toBibtex(citation("xtable"))
@

\noindent You can append the citation to your existing BibTeX file using the \texttt{sink} command in \emph{base} R. This command diverts output and/or the messages to a file. For example, imagine that your existing BibTeX file is called \texttt{biblio.bib}. To add the \emph{xtable} package citation:

<<Ch11Sink, eval=FALSE, tidy=FALSE>>=
# Divert output to biblio.bib
sink(file = "biblio.bib", 
     append = TRUE, type = c("output")
     )      

# Extract BibTeX citation     
toBibtex(citation("xtable")) 
sink()
@

\noindent This places the citation at the end of your \texttt{biblio.bib} file. It is very important to include the argument \texttt{append = TRUE}. If you don't you will erase the existing file and replace it with only the new citation. The argument \texttt{type = c("output")} tells R to include only the output, not the messages.

A more concise way to add citations to a bibliography is with \texttt{write.bibtex} command in the \emph{knitcitations} package\cite[]{R-knitcitations}. To add the \emph{xtable} citation to our \texttt{biblio.bib} file we only need to enter:

<<Ch11knitCitations, tidy=FALSE, message=FALSE, eval=FALSE>>=
# Load package
library(knitcitations)
 
# Write xtable citation and
# to biblio.bib
write.bibtex(entry = c("xtable"), 
              file = "bibliography.bib", append = TRUE)
@

\noindent Note, you will likely only want to append the citations once. Otherwise your bibliography document will grow with redundant information every time you run this command.

The {\emph{knitr}} package can also create BibTeX bibliographies for R packages using the \texttt{write\_bib} command. To use this command you list the packages whose citation details you want to include in a specified file. The command currently does not have the ability to append the citations to an existing file, but instead writes them to a new file.

\section{Presentations with Beamer}

You can make slideshow presentations with LaTeX. 

\subsection{knitr LaTeX slideshows}
{\emph{knitr}} largely the works the same way in in LaTeX slideshows as it does in article or book class documents. There are a few differences to look out for. 

\paragraph{Slide frames}

A quick way to create each Beamer slide is to use the \texttt{frame} command:

<<Ch11FrameExample, eval=FALSE>>=

\frame{

}
@

\noindent If you want to include highlighted {\emph{knitr}} code chunks on your slides you should add the \texttt{fragile} option to the \texttt{frame} command.\footnote{For a detailed discussion of why you need to use the \texttt{fragile} option with the verbatim environment that {\emph{knitr}} uses to display highlighted text in LaTeX documents see this blog post by Pieter Belmans: \url{http://pbelmans.wordpress.com/2011/02/20/why-latex-beamer-needs-fragile-when-using-verbatim/}.} Here is an example:

<<Ch11FrameFragileEx, eval=FALSE>>=
\begin{frame}[fragile]
    An example fragile frame.
\end{frame}
@

\paragraph{Results}

By default {\emph{knitr}} hides the results or a code chunk. If you want to show the results in your slideshow simply set the {\tt{results}} option to {\tt{'asis'}}.
