% Chapter Chapter 5 For Reproducible Research in R and RStudio
% Christopher Gandrud
% Created: 16/07/2012 05:45:03 pm CEST
% Updated: 5 October 2012

<<set-parent6, echo=FALSE, results='hide', cache=FALSE>>=
set_parent('/git_repositories/Rep-Res-Book/Source/Parent/Rep-Res-Parent.Rnw')
@

\chapter{Storing, Collaborating, Accessing Files, Versioning}\label{Storing}

A stumbling block to actually reproducing a piece of research is getting a hold of the datasets and the codebooks that describe the data used in an analysis. A useful way to overcome this problem is to keep your research on a cloud storage service \cite[see][]{Howe2012}. This chapter describes two different `cloud' storage services--Dropbox and GitHub\footnote{These services store your data on remote servers}--that you can use to make your research files easily accessible to others.

Not only do these services enable others to reproduce your research, they also have a number of benefits for your own research workflow. Researchers often face a number of data management issues that, beyond making their research difficult to reproduce, can make doing the initial research difficult.

First, there is the problem of \textbf{storing} the data so that it is protected against computer failure--virus infections, spilling coffee on your laptop, and so on. Storing data locally--on your computer--or on a flash drive is generally more prone to loss than on remote servers in the cloud.

Second, we may work on a project with different computers and other devices. For example, we may use a computer at work to run computationally intensive analysis, while editing our presentation document on an tablet computer while riding the train to work. Because of this we need to be able to \textbf{access} our files from multiple devices while in different locations. Also, we often need a way for our \textbf{collaborators} to access and edit research files.

Finally, we almost never create a data set or write a paper perfectly all at once. We may make changes and then realize that we liked an earlier version, or parts of an earlier version better. This is a particularly
important issue in data management where we may transform our data in unintended ways and want to go back to an earlier version. Collaborative projects can have regular incidents of one author accidentally deleting something in a file that another author needed, for example. To deal with these issues we need to store our data in a system that has \textbf{version control}. Version control systems keep track of changes we make to our files and allow us to access previous versions if we
like.

All of these issues are not only issues for the original researchers, but also for independent researchers trying to reproduce the findings.

You can solve all of these problems in a couple of different ways using free or low cost cloud-based storage formats. In this chapter we will learn how to use Dropbox and GitHub for research file:

\begin{itemize}
    \item storage,
    \item accessing,
    \item collaboration,
    \item version control.
\end{itemize}

\section{Saving data in reproducible formats}

Before getting into the details of cloud-based data storage for all of our research files, lets just consider what type of formats you should actually save your data in\index{saving data}. A key issue for reproducibility is that others be able to not only get ahold of the exact data you used in your analysis, but be able to understand and use the data not only now, but in the future. Some file formats make this easier than others.

In general, for small to moderately-sized data sets\footnote{I don't cover methods for storing and handling very large data sets--with high hundreds of thousands and more observations. For information on large data and R, not just storage, one place to look is this blog post by from RDataMining: \url{http://rdatamining.wordpress.com/2012/05/06/online-resources-for-handling-big-data-and-parallel-computing-in-r/} (posted 6 May 2012).} a plain-text format like comma-separated values\index{comma-separated values} (\texttt{.csv}) or tab-separated values\index{tab-separated values} (\texttt{.tsv}) can be a good way to store your data. These formats simply store a data set as a text file. A row in the data set is a line in the text file. Data is separated into columns with commas or tabs, respectively. These formats are not dependent on a specific program. Any program that can open text files can open them including a wide variety of statistical programs other than R. This helps future proof your research. Version control systems that track changes to text, like GitHub--are also very effective version control systems with these types of files. 

To save data in a plain-text format use the \texttt{write.table} command\index{write.table}. For example, to save a data frame called {\emph{Data}} as a csv file type:

<<Ch5WriteTable, eval=FALSE>>=
write.table(x = Data, file = "MyData.csv", sep = ",")
@

\noindent The \texttt{sep = ","} argument specifies that we want to use a comma to separate the values. For csv files you can use a modified version of this command called \texttt{write.csv}\index{write.csv}. 

R is able to save data in a wide variety of other file formats, mostly through the {\emph{foreign}} package in.

\section{Storing your files in the cloud}

In this book we'll cover two (largely) free\footnote{Dropbox provides a minimum amount of storage for free, above which a fee is charged. GitHub lets you create publicly accessible repositories for free, but they charge for private repositories.} cloud storage services that allow you to store, access, collaborate on, and version control your research files. These services are Dropbox and GitHub. Though they both meet our basic storage needs, they do so in different ways and require different levels of effort to set up.

These two services are certainly not the only way to make your research files available. Research oriented services include the SDSC Cloud,\footnote{\url{https://cloud.sdsc.edu/hp/index.php}} the Dataverse Network Project,\footnote{\url{http://thedata.org/}}, figshare\footnote{\url{http://figshare.com/}} and RunMyCode.\footnote{\url{http://www.runmycode.org/}} These services include good built-in citation systems, unlike Dropbox and GitHub, but their ability to store, access, collaborate on, and version control files is mixed.

\subsection{Dropbox}

The easiest types of cloud storage for your research are services like
Dropbox and Google Drive. These services typically
involve a folder based on your computer's hard drive that is
automatically synced with a similar folder on a cloud-based server.
Typically you can sign up for the service for free and receive a limited
amount of storage space (usually a few gigabytes, which should be plenty
if your research is made up of text files.).

Most of these services not only store your data in the cloud, but also
provide some way to share files and maybe even includes basic version
control. I am going to focus on using Dropbox because it
currently offers a complete set of features that allow you to store,
version, collaborate, and access your data.

\subsubsection{Version control}

Dropbox has a simple version control system. Every time you
save a document on Dropbox a new version is created. One the
Dropbox website

\subsubsection{Accessing Data}

There are two similar, but importantly different ways to access data
stored on Dropbox. All files stored on Dropbox have a
URL address through which they can be access from computer connected to
the internet. Some of these files can be easily loaded directly into
R, while others must me manually (point-and-click) downloaded
onto your computer and then loaded into R. The key factor is
whether or not the files are located in your Dropbox's
\emph{Public} folder. Files in the \emph{Public} folder can be
downloaded directly into R. Files not in the \emph{Public} folder
have to be downloaded manually.\footnote{This is not completely true. It
  could be possible to create a web scraper\footnote{web scraper} that could
  download a data file from a file not in your \emph{Public} folder.
  However, this is kind of a hassle and not practical, especially since
  the accessing files from the \emph{Public} folder is so easy.}

Either way you find a file's URL address by first right-clicking on the
file icon in you Dropbox folder. If the file is stored in the
\emph{Public} folder, you go to Dropbox then \emph{Copy
Public Link}. This copies the URL into your clipboard from where you can
paste it into your R source code (or wherever). Once you have
the URL you can load the file directly into R using the
\texttt{read.table} command for dataframes (see Chapter 5) or the \texttt{source}
command for source files (see Chapter 8).

If the file is not in your \emph{Public} folder you also go to
Dropbox after right-clicking. Then choose \emph{Get Link}.
This will open a webpage in your default web browser from where you can
download the file. You can copy and paste the page's URL from your
browser's address bar.

You can also get these URL links through the online version of your
Dropbox. First log into the Dropbox website. When you
hover your curser over a file (or folder) name you will see a chain icon
appear on the far right. Clicking on this icon will get you the link.

Storing files in the \emph{Public} folder clearly makes replication
easier because the files can be downloaded and run directly in
R.

Note that you cannot save files through the URL link. You must save
files in the Dropbox folder on your computer.

\subsection{GitHub}

Dropbox does a fine job of meeting our four basic criteria for
reproducible data storage. GitHub meets these criteria and
more.

GitHub was not explicitly designed to host research projects or
even data. It was designed to host `socially coded' computer programs.
It built an interface on top of the git version control system
that makes it easy relatively easy for a number of collaborators to work
together to build a computer program. This seems very far from
reproducible research.

However, remember that as reproducible researchers we are just building
projects out of interconnected text files. This is exactly the same as
computer programming. and like computer programers, we need ways to
store, version control, access, and collaborate on our text files.
Because GitHub is very actively used by people with very
similar needs (who are also really good programmers), the interface
offers many highly developed and robust features for reproducible
researchers.

As is usually the case, GitHub's added features mean that it is
takes a longer time than Dropbox to set up and become familiar.
So we need good reasons to want to invest the time needed to learn
GitHub rather than just sticking with Dropbox or a
similar service. Here is a list of GitHub's key features
relative to Dropbox for reproducible research:

\begin{itemize}
\item
  Git is directly integrated into RStudio projects
  (\textbf{RStudio} also supports the subversion version
  control system, but I don't cover that here).
\item
  Dropbox's version control system only lets you the see the
  file names, the times they were created, who created them, and revert
  back to specific versions. git tracks every change you make
  in a way that makes it relatively easy to find the version you want.
  The GitHub website and GUI programs for Mac and Windows
  provide nice interfaces for examining specific changes. You can also
  use the command line to see changes.
\item
  Dropbox creates a new version every time you save a file,
  which can make it difficult to actually find the version you want.
  git's version control system only creates a new version when
  you tell it to.
\item
  Dropbox does not merge conflicting versions of a file
  together. This can be annoying when you are collaborating on project
  and more than one author is making changes to documents.
  GitHub identifies conflicts and lets you reconcile them.
\item
  The GitHub website as an `'Issues'' area where you can to
  note and discuss issues you have while doing your research. Basically
  this is an interactive to-do list for your research project.
\end{itemize}

\subsubsection{Setting Up GitHub}

There are a number of ways to set up GitHub on your computer. I will briefly cover both the command line version (available for Windows, Mac, and Linux) and the Graphical User Interface version currently available only for Windows and Mac.

COMPLETE

\subsubsection{Storage in GitHub}

\subsubsection{Accessing in GitHub}

\subsubsection{Collaboration in GitHub}

Repositories can have official collaborators. Public repositories can have unlimited collaborators. Anyone with a GitHub account can be a collaborator. 

COMPLETE 

Anyone with a GitHub account can make changes to files in a public repository on the repository's website. Simply click the \texttt{Edit} button above the file and make edits. If the person making the edits is not the a repository collaborator, their edit will be sent to the repository's owner for approval.\footnote{This is called a \texttt{pull}\index{git pull} in git terminology}. This is a useful way for independent researchers to catch errors and directly address them.

\paragraph{Branches}

\paragraph{Syncing repository}

\subsubsection{Version Control in GitHub}

GitHub's version control system is much more comprehensive than Dropbox's. However, it also has a steeper learning curve.

\paragraph{Reverting to an old version of a file}

You can use the {\tt{git checkout}} command to revert to a previous version of a document, because you accidentally deleted something important or made other changes you don't like. To 'checkout' a particular version of a file type:

<<GitCheckout, error=FALSE, eval=FALSE>>=
git checkout COMMITREF FILENAME
@

\noindent Now the previous version of the file is in your working directory, where you can commit it as usual.

Let's break down the code.  {\tt{FILENAME}} is the name of the file that you want to change\footnote{If it is in a repository's subdirectory you will need to include this in the file name.} and {\tt{COMMITREF}} is the reference that git gave to the commit you want to revert back to. The reference is easy to find and copy in GitHub. On the file's GitHub page click on the {\tt{History}} button. This will show you all of the commits. By clicking on {\tt{Browse Code}} you can see what the file at that commit looks like. Above this button is another with a series of numbers and letters. This is the commit's SHA (Secure Hash Algorithm). For our purposes, it is the commit's reference number. Click on the {\tt{Copy SHA}} button to the left of the SHA to copy it. You can then paste it as an argument to your {\tt{git checkout}} command. 

\paragraph{More Practice with Command Line GitHub}

If you want more practice setting up GitHub in the command
line, GitHub and the website Code School have an interactive
tutorial that you might find interesting. You can find it at:
\url{http://try.github.com/levels/1/challenges/4}.
