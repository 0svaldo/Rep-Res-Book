% Chapter Chapter 5 For Reproducible Research in R and RStudio
% Christopher Gandrud
% Created: 16/07/2012 05:45:03 pm CEST
% Updated: 16 January 2012

<<set-parent5, echo=FALSE, results='hide', cache=FALSE>>=
set_parent('/git_repositories/Rep-Res-Book/Source/Rep-Res-Parent.Rnw')
@

\chapter{Storing, Collaborating, Accessing Files, Versioning}\label{Storing}

In addition to being well organized, your research files need to be accessible for other researchers to be able to reproduce your findings. A useful way to make your files accessible is to store them on a cloud storage service\footnote{These services store your data on remote servers} \cite[see][]{Howe2012}. This chapter describes in detail two different cloud storage services--Dropbox and GitHub--that you can use to make your research files easily accessible to others. Not only do these services enable others to reproduce your research, they also have a number of benefits for your research workflow. Researchers often face a number of data management issues that, beyond making their research difficult to reproduce, can make doing the initial research difficult.

First, there is the problem of \textbf{storing} data so that it is protected against computer failure--virus infections, spilling coffee on your laptop, and so on. Storing data locally--on your computer--or on a flash drive is generally more prone to loss than on remote servers in the cloud.

Second, we may work on a project with different computers and mobile devices. For example, we may use a computer at work to run computationally intensive analysis, while editing our presentation document on a tablet computer while riding the train to the office. So, we need to be able to \textbf{access} our files from multiple devices in different locations. We often need a way for our \textbf{collaborators} to access and edit research files as well.

Finally, we almost never create a data set or write a paper perfectly all at once. We may make changes and then realize that we liked an earlier version, or parts of an earlier version better. This is a particularly important issue in data management where we may transform our data in unintended ways and want to go back to earlier versions. Also, when working on a collaborative project, one of the authors may accidentally delete something in a file that another author needed. To deal with these issues we need to store our data in a system that has \textbf{version control}. Version control systems keep track of changes we make to our files and allow us to access previous versions if we want to.

You can solve all of these problems in a couple of different ways using free or low cost cloud-based storage formats. In this chapter we will learn how to use Dropbox and GitHub for research file:

\begin{itemize}
    \item storage,
    \item accessing,
    \item collaboration,
    \item version control.
\end{itemize}

\section{Saving data in reproducible formats}

Before getting into the details of cloud-based data storage for all of our research files, lets consider what type of formats you should actually save your data in\index{data file formats}. A key issue for reproducibility is that others be able to not only get ahold of the exact data you used in your analysis, but be able to understand and use the data now and in the future. Some file formats make this easier than others.

In general, for small to moderately-sized data sets\footnote{I don't cover methods for storing and handling very large data sets--with high hundreds of thousands and more observations. For information on large data and R, not just storage, one place to look is this blog post from RDataMining: \url{http://rdatamining.wordpress.com/2012/05/06/online-resources-for-handling-big-data-and-parallel-computing-in-r/} (posted 6 May 2012). One popular service for large file storage is Amazon S3\index{Amazon S3} (\url{http://aws.amazon.com/s3/}). I haven't used this service and can't suggest ways to integreate it with R.} a plain-text format like comma-separated values\index{comma-separated values} (\texttt{.csv}) or tab-separated values\index{tab-separated values}\footnote{Sometimes this format is called tab-delimited values\index{tab-delimited values}.} (\texttt{.tsv}) are good ways to store your data. These formats simply store a data set as a text file. A row in the data set is a line in the text file. Data is separated into columns with commas or tabs, respectively. These formats are not dependent on a specific program. Any program that can open text files can open them including a wide variety of statistical programs other than R as well as spreadsheet programs like Microsoft Excel.\index{Microsoft Excel} Using text file formats helps future proof your research. Version control systems that track changes to text--like Git--are also very effective version control systems for these types of files. 

To save data in a plain-text format with R use the \texttt{write.table} command\index{R command!write.table}. For example, to save a data frame called {\emph{Data}} as a CSV file called {\emph{MainData.csv}} in our example {\emph{DataFiles}} directory (see Figure \ref{ExampleTree}):

<<Ch5WriteTable, eval=FALSE, tidy=FALSE>>=
write.table(Data, "/ExampleProject/Data/DataFiles/MainData.csv",
                 sep = ",")
@

\noindent The \texttt{sep = ","} argument specifies that we want to use a comma to separate the values. For CSV files you can use a modified version of this command called \texttt{write.csv}\index{R command!write.csv}. This command simply makes it so that you don't have to write \texttt{sep = ","}.\footnote{\texttt{write.csv} is a `wrapper'\index{wrapper} for \emph{write.table}.} 

If you want to save your data with rows separated by tabs, rather than commas, simply set the argument \verb|sep = "\t"| and the file extension to \texttt{.tsv}.\label{TSVEscape}

R is able to save data in a wide variety of other file formats, mostly through the {\emph{foreign}} package (see Chapter \ref{DataGather}). These formats may be less future proof than simple text-formatted data files.

One advantage of other statistical program's file formats is that they include not only the underlying data but also other information like variable descriptions. If you are using plain-text files to store your data you will need to include a separate file, preferably in the same directory as the data file describing the variables in the data set and their sources. In Chapter \ref{TablesChapter} (page \pageref{VarDescriptTables}) we will look at how to automate the creation of variable description files.

\section{Storing your files in the cloud}

In this book we'll cover two (largely) free cloud storage services that allow you to store, access, collaborate on, and version control your research files. These services are Dropbox and GitHub.\footnote{Dropbox provides a minimum amount of storage for free, above which they charge a fee. GitHub lets you create publicly accessible repositories--kind of like project folders--for free, but they charge for private repositories.} Though they both meet our basic storage needs, they do so in different ways and require different levels of effort to set up and maintain.

These two services are certainly not the only way to make your research files available. Research oriented services include the SDSC Cloud,\footnote{\url{https://cloud.sdsc.edu/hp/index.php}} the Dataverse Network Project,\footnote{\url{http://thedata.org/}}, figshare\footnote{\url{http://figshare.com/}} and RunMyCode.\footnote{\url{http://www.runmycode.org/}} These services include good built-in citation systems, unlike Dropbox and GitHub. They may be a very good place to store research files once the research is completed or close to completion. Some journals are beginning to require key reproducibility files be uploaded to these sites. However, these sites' ability to store, access, collaborate on, and version control files \emph{during} the main part of the research process is mixed. Services like Dropbox and Github are very capable of being part of the research workflow from the beginning.

\subsection{Dropbox}

The easiest types of cloud storage for your research are services like Dropbox\footnote{\url{http://www.dropbox.com/}} and Google  Drive.\footnote{\url{https://drive.google.com/}} These services not only store your data in the cloud, but also provide ways to share files. They even include basic version control capabilities. I'm going to focus on Dropbox because it currently offers a complete set of features that allow you to store, version, collaborate, and access your data. I will focus on how to use Dropbox on a computer. Some Dropbox functionality may be different on mobile devices.

\subsection{Storage}

When you sign up for Dropbox and install the program\footnote{See \url{https://www.dropbox.com/downloading} for downloading and installation instructions.} it creates a directory on your computer's hard drive. When you place new files and folders in this directory and make changes to them, Dropbox automatically syncs the directory with a similar folder on a cloud-based server. Typically when you sign up to the service you'll receive a limited amount of storage space for free; usually a few gigabytes. This is probably enough storage space for a number of text file based research projects.

\subsubsection{Accessing Data}

There are two similar, but importantly different ways to access data stored on Dropbox. All files stored on Dropbox have a URL address through which they can be accessed from a computer connected to the internet. Some of these files can be easily loaded directly into R, while others must me manually (point-and-click) downloaded onto your computer and then loaded into R. Files in the Dropbox \emph{Public}\index{Dropbox!Public folder} folder can be downloaded directly into R. Files not in the \emph{Public} folder have to be downloaded manually.\footnote{This is not completely true. It could be possible to create a web scraper\index{web scraper} that could download data from a file not in your \emph{Public} folder. However, this is a hassle and not practical, especially given that accessing files from the \emph{Public} folder is so easy.} Either way you find a file's URL address by first right-clicking on the file icon in your Dropbox folder. 

Note: if you created your Dropbox account after 4 October 2012 you will not automatically have a \emph{Public} folder. To enable on on your account see this website: \url{https://www.dropbox.com/help/16/en}.\label{EnablePublicFolder}\index{Dropbox!enable Public folder}

If the file is stored in the \emph{Public} folder, you go to \texttt{Dropbox} in the menu that pops up, then click \emph{Copy Public Link}.\label{PublicLink} This copies the URL into your clipboard from where you can paste it into your R source code (or wherever). Once you have the URL you can load the file directly into R using the \texttt{read.table} command for data frames (see Chapter 5) or the \texttt{source} command for source code files (see Chapter 8).

To give you a preview of how to download data on financial regulator type directly into R from Dropbox, try downloading a data file from my Public folder. The data set's URL is: \url{http://dl.dropbox.com/u/12581470/code/Replicability_code/Fin_Trans_Replication_Journal/Data/public.fin.msm.model.csv}.\footnote{This data is from \cite{Gandrud2012}} I've used the URL shortening service bitly\index{bitly}\footnote{See \url{https://bitly.com/}.} to make this link fit on the page.

<<Ch5PublicFolderDownload, tidy=FALSE>>=
# Download data on Financial Regulators 
# stored in a Dropbox Public folder
FinRegulatorData <- read.table("http://bit.ly/PhjaPM", 
                    			sep = ",", header = TRUE)
                    
# Show variables in Data
names(FinRegulatorData)
@

\noindent Storing files in the \emph{Public} folder clearly makes replication easier because R can access these files easily.

When the file is not in your \emph{Public} folder you also go to \texttt{Dropbox} after right-clicking on the file. Then choose \texttt{Get Link}. This will open a webpage in your default web browser from where you can download the file. You can copy and paste the page's URL from your browser's address bar. 

You can also get these URL links through the online version of your Dropbox. First log into the Dropbox website. If the file is in your \emph{Public} folder, right-click on it and then select \texttt{Copy Public Link}. When you hover your cursor over a file or folder not in the \emph{Public} Folder you will see a chain-link icon appear on the far right. Clicking on this icon will get you the link.

\subsection{Collaboration}

Though others can easily access your data and files through Dropbox URL links, you cannot save files through the link. You must save files in the Dropbox folder on your computer or upload them through the website. If you would like collaborators to be able to modify the research files you will need to `share' the Dropbox folder with them. You cannot share your \emph{Public} folder, so you will need to keep the files you want collaborators to be able to modify in a non-public folder. Once you create this folder you can share it with your collaborators by right-clicking on the folder and selecting \texttt{Invite to folder} on the Dropbox website or \texttt{Dropbox} \textrightarrow\: \texttt{Share This Folder\ldots} on the locally stored folder. Enter your collaborator's email address when prompted. They will be sent an email that will allow them to accept the share request and, if they don't already have an account, sign up for Dropbox.

\subsubsection{Version control}

Dropbox has a simple version control system. Every time you save a document a new version is created on Dropbox. To view a previous version, navigate to the file on the Dropbox website. Then right-click on the file. In the menu that pops up select \texttt{Previous Versions}. This will take you to a webpage listing previous versions of the file, who created the version, and when it was created. A new version of a file is created every time you save a file and it is synced to the Dropbox cloud service. You can see a list of changes made to files in your Dropbox folder by going to the website and clicking on \texttt{Events}.

Note that with a free Dropbox account, previous versions of a file are only stored for \textbf{30 days}. To be able to save previous versions for more than 30 days you will need a paid account. For more details see: \url{https://www.dropbox.com/help/113/en}.

\subsection{GitHub}\index{GitHub}

Dropbox adequately meets our four basic criteria for reproducible data storage. It is easy to set up and use. GitHub meets the criteria and more, especially when it comes to version control. It is, however, less straightforward at first. In this section we will learn enough of the basics to get you started using GitHub to store, access, collaborate on, and version control your research.

GitHub is an interface and cloud hosting service built on top of the Git\index{Git} version control system.\footnote{I used Git version 1.7.9.6 for this book.} Git does the version control. GitHub stores the data remotely as well as providing a number of other features, some of which we look at below. GitHub was not explicitly designed to host research projects or even data. It was designed to host ``socially coded" computer programs--in what Git calls ``repositories"\index{Git!repository}--repos for short--by making it easy for a number of collaborators to work together to build computer programs. This seems very far from reproducible research.

Remember that as reproducible researchers we are building projects out of interconnected text files. In important ways this is exactly the same as building a computer program. Computer programs are also basically large collections of interconnected text files. Like computer programmers, we need ways to store, version control, access, and collaborate on our text files. Because GitHub is very actively used by people with very similar needs (who are also really good programmers), the interface offers many highly developed and robust features for reproducible researchers.

GitHub's extensive features and heart in the computer programming community means that it takes a longer time than Dropbox for novice users to set up and become familiar with. So we need good reasons to want to invest the time needed to learn GitHub. Here is a list of GitHub's advantages over Dropbox for reproducible research that will hopefully convince you to get started using it:\footnote{Because many of these features apply to any service that relies on Git, much of this list of advantages also applies to alternative Git cloud storage services such as Bitbucket (\url{https://bitbucket.org/}).} \\[0.25cm]

\noindent{\bf{Storage and Access}}
\begin{itemize}
    \item Dropbox simply creates folders stored in the cloud which you can share with other people. GitHub makes your projects accessible on a fully featured project website (see Figure \ref{BookRepository}). An example feature is that it automatically renders Markdown files called {\emph{README.md}}\footnote{You can use a variety of other markup languages as well. See \url{https://github.com/github/markup}.} in a GitHub directory on the repository's website. This makes it easy for independent researchers to find the file and read it.   
    \item GitHub can create and and host a website for your research project that you could use to present the results, not just the replication files.
\end{itemize} 

\vspace{0.25cm}

\begin{wrapfigure}{r}{0.5\textwidth}
    \caption{A Basic Git Repository with Hidden {\emph{.git}} Folder Revealed}
    \label{BasicGitRepo}
        \begin{center}    
        \includegraphics[width=0.45\textwidth]{Children/Chapter5/images5/BasicGitRepository.png}
        \end{center}
\end{wrapfigure}
       
\noindent{\bf{Collaboration}} \\[0.25cm]

Dropbox allows multiple people to share files and change them. GitHub does this and more:

\begin{itemize}
        \item GitHub keeps meticulous records of who contributed what to a project.
        \item Each GitHub repository has an ``Issues'' area where you can note issues and discuss them with your collaborators. Basically this is an interactive to-do list for your research project. It also stores the issues so you have a full record.
        \item Each repository can also host a wiki\index{wiki} that, for example, could explain in detail how certain aspects of a research project were done.
        \item Anyone can suggest changes to files in a public repository. These changes can be accepted or declined by the project's authors. The changes are recorded by the Git version control system. This could be especially useful if an independent researcher notices an error. 
\end{itemize}

\vspace{0.25cm}

\noindent{\bf{Version Control}}    
\begin{itemize}
    \item Dropbox's version control system only lets you see files' names, the times they were created, who created them, and revert back to specific versions. Git tracks every change you make. The GitHub website and GUI programs for Mac and Windows provide nice interfaces for examining specific changes in text files.
    \item Dropbox creates a new version every time you save a file. This can make it difficult to actually find the version you want as the versions quickly multiply. Git's version control system only creates a new version when you tell it to.
    \item All files in on Dropbox are version controlled. Git allows you to ignore specific files. This is helpful if you have large binary (not text files) that you do not want to version control because doing so will use up considerable storage space.
    \item Unless you have a paid account, previous file versions in Dropbox disappear after 30 days. GitHub stores previous versions indefinitely for all account types.
    \item Dropbox does not merge conflicting versions of a file together. This can be annoying when you are collaborating on project and more than one author is making changes to documents at the same time. GitHub identifies conflicts and lets you reconcile them.
    \item Git is directly integrated into RStudio Projects\index{RStudio!Projects}.\footnote{RStudio also supports the Subversion version control system, but I don't cover that here.}
\end{itemize}

\subsubsection{Setting up GitHub: Basic}

There are at least three ways to use Git/GitHub on your computer. You can use the command line version of Git. It's available for Mac and Linux (in the Terminal\index{Terminal}) as well as Windows (through Git Bash\index{Git Bash}).\footnote{The interface for Git Bash looks a lot like the Terminal or Windows PowerShell.} You can also use the Graphical User Interface GitHub program. Currently it's only available for Windows and Mac.  RStudio also has GUI-style Git functionality for RStudio Projects.\index{RStudio!Projects} In this section I focus on how to use the command line version, because it will help you understand what the GUI versions are doing and allow you to better explore more advanced Git features not covered in this book. In the next section I will mention how to use Git with RStudio Projects. 

The first thing to do to setup GitHub is go to their website (\url{https://github.com/}) and sign up for an account. Second, you should go to the following website for instructions on setting up Git: \url{https://help.github.com/articles/set-up-git}. The instructions on that website are very comprehensive, so I'll direct you there for the full setup information. Note that installing the GUI version of GitHub also installs Git and, on Windows, Git Bash. 

\subsubsection{Version Control with Git}

Git is primarily a version control system, so we will start our discussion of how to use it by looking at how to version your repositories.

\paragraph{Setting up Git repositories locally}

You can setup a Git repo on your computer with the command line.\footnote{Much of the discussion of the command line in this section is inspired by Nick Farina's blog post on Git (see \url{http://nfarina.com/post/9868516270/git-is-simpler}, posted 7 September 2012).} I keep my repositories\index{Git!repository} in a folder called {\emph{git\_repositories}}.\footnote{To follow along with this code you will first need to create a folder called {\emph{git\_repositories}} in your root directory. Throughout this section I use Unix file path conventions.} It has the root folder as its parent. Imagine that we want to set up a repository in this directory for a project called {\emph{ExampleProject}}. Initially it will have one README file called {\emph{README.md}}. To do this we would first type into the Terminal for Mac and Linux computers:

<<Ch5CLGitRep, eval=FALSE, engine='sh'>>=
# Make new directory 'ExampleProject
mkdir /git_repositories/ExampleProject

# Change to directory 'ExampleProject'
cd /git_repositories/ExampleProject

# Create new file README.md
echo "# An Example Repository" > README.md
@

\noindent So far we have only made the new directory and set it as our working directory (see Chapter \ref{DirectoriesChapter}). All of the examples in this section assume your current working directory is set to the repo. Then with the \texttt{echo} Shell command we created a new file named {\emph{README.md}} that includes the text \verb|# An Example Repository|. Note that the code is basically the same in Windows PowerShell, though obviously the directory names are different. Also, you don't have to do these steps in the command line. You could just created the new folders and files the same what that you normally do with your mouse in your GUI operating system.

Now that we have a directory with a file we can tell Git that the we want to treat the directory {\emph{ExamplProject}} as a repository and that we want to track changes made to the file {\emph{README.md}}. Use Git's \texttt{init} (initialize) command to set directory as a repository. See Table \ref{GitCommandsTable} for the list of Git commands covered in this chapter.\footnote{For a comprehensive guide to Git commands see \url{http://git-scm.com/}.} Use Git's \texttt{add} command to add a file to the Git repository. For example, 

<<Ch5GitAdd, eval=FALSE, engine='sh'>>=
# Initialize the Git repository
git init

# Add README to the repository
git add README.md
@  

\noindent You probably noticed that you always need to put \texttt{git} before the command. This tells the command line what program the command is from. When you initialize a folder as a Git repository a hidden folder called {\emph{.git}} is added to the directory (see Figure \ref{BasicGitRepo}). This is where all of your changes are kept. If you want to add all of the files in the working directory to the Git repository type:

<<Ch5GitAddPeriod, eval=FALSE, engine='sh'>>=
# Add all files to the repository
git add .
@

\noindent Now when we want Git to track changes made to files added to the repository we can use the \texttt{commit}\index{Git command!commit} command. In Git language we are ``committing" the changes to the repository.

<<Ch5Commit, eval=FALSE, engine='sh'>>=
# Commit changes
git commit -a -m "First Commit, created README file"
@

\noindent The \texttt{-a} (all) command commits changes made to all of the files that have been added to the repository. You can include a message with the commit using the \texttt{-m} command like: \texttt{"First Commit, created README file"} Messages help you remember general details about individual commits. This is helpful when you want to revert to old versions. \textbf{Remember:} Git only tracks changes when you commit them. 

Finally, you can use the \texttt{status} command for details about your repository, including uncommitted changes. Generally it's a good idea to use the \texttt{-s} (short) argument, so that the output is more readable.

<<Ch5Status, eval=FALSE, engine='sh'>>=
# Display status
git status -s
@

\begin{table}
  \caption{A Selection of Git Commands Used in this Chapter}
  \begin{center}
  \label{GitCommandsTable}
  \begin{tabular}{l p{7cm}}
    \hline  
    Command & Description \\[0.25cm] \hline\hline
    \texttt{add} & Add a file to a Git repository. \\[0.25cm]
    \texttt{branch} & Create and delete branches. \\[0.25cm]
    \texttt{checkout} & Checkout a branch. \\[0.25cm]
    \texttt{clone} & Clone a repository (for example the GitHub version) into the current working directory. \\[0.25cm]
    \texttt{commit} & Commit changes to a Git repository. \\[0.25cm] 
    \texttt{fetch} & Download objects from the remote (or another) repository. \\[0.25cm] 
    \texttt{.gitignore} & Not a git command, but a file you can add to your repository specifying what files/file types for Git to ignore. \\[0.25cm]
    \texttt{init} & Initialize a Git repository. \\[0.25cm]
    \texttt{log} & Show commit history. \\[0.25cm]
    \texttt{merge} & Merges two or more commits/branches together. \\[0.25cm]
    \texttt{pull} & \texttt{fetch} data from a remote repository and try to \texttt{merge} it with your commits. \\[0.25cm]
    \texttt{push} & Add committed changes to a remote Git repository, i.e. GitHub. \\[0.25cm]
    \texttt{remote add} & Add a new remote repository to an existing project. \\[0.25cm]
    \texttt{rm} & Remove files from Git version tracking. \\[0.25cm]
    \texttt{status} & Show the status of a Git repository including uncommitted changes made to files. \\[0.25cm]
    \texttt{tag} & Bookmark particularly significant commits. 
    \hline
  \end{tabular}
  \end{center}
  {\scriptsize{Note: when you use these commands in the command line, you will need to precede them with \texttt{git} so the shell knows where they are from.}}
\end{table}

\paragraph{Checkout}\index{Git command!checkout}

It is useful to step back for a second and try to understand what Git is doing when you commit your changes. In the hidden {\emph{.git}} folder Git is saving all of the information in compressed form from each of your commits into a sub-folder called {\emph{Objects}}. Commit objects\index{Git!commit object}\footnote{Other Git objects include trees (sort of like directories), tags (bookmarks for important points in a repo's history) and blobs (individual files).} are everything from a particular commit. I mean everything. If you delete all of the files in your repository (except for the {\emph{.git}} folder) you can completely recover all of the files from your most recent commit with the \texttt{checkout} command:

<<Ch5CheckoutBasic, eval=FALSE, engine='sh'>>=
# Checkout latest commit
git checkout --
@

\noindent You can also change to a particular commit of a particular file with \texttt{checkout}. Simply replace the \verb|---| with the commit reference. The reference is easy to find and copy in GitHub.\footnote{You can of course search your commit history and roll back to a previous commit using only the command line. To see the commit history use the \texttt{log} command (more details at \url{http://git-scm.com/book/en/Git-Basics-Viewing-the-Commit-History}). When a repo has many commits, this can be a very tedious command to use, so I highly recommend the GUI version of GitHub or the repo's GitHub website.} Click on the link that lists the number of repo commits on the right-hand side of the repo's webpage. This will show you all of the commits. By clicking on {\tt{Browse Code}} you can see what the file at that commit looks like. Above this button is another with a series of numbers and letters. This is the commit's SHA-1 (Secure Hash Algorithm) hash.\index{SHA-1 hash} For our purposes, it is the commit's reference number. Click on the {\tt{Copy SHA}} button to the left of the SHA to copy it. You can then paste it as an argument to your {\tt{git checkout}} command. In the next section we'll briefly look at how to switch versions in RStudio.

\paragraph{Tags}

SHA-1 hashes are a bit cumbersome to work with. What was the hash number for that one commit? To solve this problem you can add bookmarks, known as ``tags"\index{Git!tag}\index{Git command!tag} to particularly important commits. Imagine we just committed our first full draft of a project. We want to give it the tag ``v0.1''. To do this use Git's tag command:

<<Ch5TagMake, eval=FALSE, engine='sh'>>=
# Tag most recent commit v0.1
git tag -a v0.1 -m "First draft"
@

\noindent The \verb|-a| option adds the tag \texttt{v0.1} and \verb|-m| let's us add a message. Now we can checkout this particular commit by using its tag, i.e.:

<<Ch5CheckoutTag, eval=FALSE, engine='sh'>>=
# Checkout v0.1
git checkout v0.1
@

\paragraph{Branches}

Sometimes you may want to work on an alternative version of your projects and then merge changes to this alternative version back into the main one. For example the main version could be the most stable current copy of your research, while the alternative version could be a place where you test out new ideas. Git allows you to create a new \emph{branch}\index{Git!branch}\index{Git command!branch} (alternative version of the repo) which can be merged back into the \emph{master} (main) branch. To see what branch you are using type:

<<Ch5CheckBranch, engine='sh'>>=
# Show git branch
git branch
@

To create a new branch use, simply enough, the \texttt{branch} command. For example, to create a new branch called \emph{Test}:

<<Ch5NewBranch, eval=FALSE, engine='sh'>>=
# Create Test branch
git branch Test
@

\noindent You can now use \texttt{checkout} to checkout the branch.\footnote{To delete the \emph{Test} branch use the \texttt{-d} argument, i.e. \texttt{git branch -d Test}.} Here is a short cut for creating and checking out the branch:

<<Ch5NewBranchShortCut, eval=FALSE, engine='sh'>>=
# Create and checkout Test branch
git checkout -b Test
@

\noindent To merge\index{Git command!merge} changes you commit in the \emph{Test} branch to the \emph{master} first checkout the \emph{master} branch then:

<<ChMergeBrances, eval=FALSE, engine='sh'>>=
# Merge master and Test branches
git merge Test
@

\noindent Not, when you merge a branch you may encounter conflicts in the files that make it impossible to smoothly merge the files together. Git will tell you what and where these are, you then need to decide what to keep and what to delete.

\paragraph{Having Git ignore files}

There may be files in your repository that you do not want to keep under version control. Maybe this is because they are very large files, cache files from \emph{knitr} and other files that are they byproduct of compiling an R LaTeX document. To have Git ignore a file simply create a file called \emph{.gitignore}.\footnote{Note that like \emph{.git}, \emph{.gitignore} files are hidden.}\index{Git!.gitignore}\index{Git!ignore files} You can either put this file in the repository's parent directory to create a \emph{.gitignore} file for the whole repository. You can also place one in a child directory to ignore files only in that directory. In the \emph{.gitignore} file add ignore rules by simply including the names of the files that you want to have Git ignore. 

For example, a \emph{.gitignore} file that is useful for ignoring files that are the byproduct of compiling an R LaTeX file would look something like this:

<<Ch5gitignore, eval=FALSE, engine='sh'>>=
# Ignore LaTeX compile byproduct files #
########################################
*.aux
*.bbl
*.blg
cache/*
figure/*
*.log
*.pdf
*.gz
*.tex
@

\noindent The asterisks (\verb|*|) is a ``wildcard"\index{wildcard} and stands for any character. In other words, it tells Git to look for files with any name that end in the specified file extensions. This is faster than writing out the full name of every \emph{.tex} file, for example. It also makes it easy to copy the rules into new repos. You'll also notice the \texttt{cache/*} and \texttt{figure/*} rules. These tell Git to ignore all of the files in the \emph{cache} and \emph{figure} directories. These files are the product of caching code chunks and creating figures, respectively.

Note, Git will not ignore files that have already been commited to a repository. To ignore these files you will first need to remove them from Git with Git's \texttt{rm} (remove) command.\index{Git command!rm} If you wanted to remove a file called \emph{ExampleProject.tex} from version tracking so that it could be ignored type:

<<Ch5Gitrm, eval=FALSE, engine='sh'>>=
# Remove ExampleProject.tex from Git version tracking
git rm --cached ExampleProject.tex
@

\noindent Using the \texttt{--cached} argument tells Git not to track the file, but not delete it. 

For more information on \emph{.gitignore} files see GitHub's reference page on the topic at: \url{https://help.github.com/articles/ignoring-files}.


\subsubsection{Remote Storage on GitHub}

So far we've been using repos stored locally. To create repositories stored on GitHub, first create a new repository through the GitHub website. On your main GitHub account page click the \texttt{New repository} button. In the next page that appears give the repository a name, brief description, choose whether to make it public or private. Also click the check box to to create a \emph{README.md} file in the repository. When you click \texttt{Create Repository} you will be directed to the repository's GitHub page.\label{NewGHRepo}

To download the repository onto your local computer you need to ``clone'' it. The repo's GitHub page contains a button called \texttt{Clone in} \ldots.\footnote{The button will indicate the operating system you are using. For example in Figure \ref{BookRepository} it says \texttt{Clone in Mac}.} Clicking this will open GUI GitHub (if it is installed) and prompt you to specify what directory on your computer you would like to clone the repository into. You can also use the \texttt{clone}\index{Git command!clone} command. Image that the URL for a repo called \emph{Example Project} is \texttt{https://github.com/USERNAME/ExampleProject.git}. To clone it into the \emph{/git\_repositories} directory type:\footnote{If you are on the repo's webpage you can copy it's URL by clicking on the \texttt{copy to clipboard} icon next to the URL on the same line as the \texttt{Clone in} \ldots button.}

<<Ch5Clone, eval=FALSE, engine='sh'>>=
# Change working directory 
cd /git_repositories/

# Clone ExampleProject
git clone https://github.com/USERNAME/ExampleProject.git
@

\paragraph{Pushing files to a GitHub repo}

So far we have learned how to add and commit changes to a local Git repo. To add your commits to the remote GitHub repository use the \texttt{push}\index{Git command!push} command. For example, if your current working directory is the Git repo you want to push and you have already added/committed the changes you want to include in the remote repo type:

<<Ch5Push, eval=FALSE, engine='sh'>>=
# Add changes to the GitHub remote master branch
git push origin master
@

\noindent The \texttt{origin} is simply the remotely stored repository on GitHub and \texttt{master} is the master branch. You can change this to another branch if you'ld lik. If you have not set up password caching\footnote{See \url{https://help.github.com/articles/set-up-git} for more details.} you will now be prompted to give your GitHub user name and password.

\begin{figure}[t]
    \caption{Part of this Book's GitHub Repository Webpage}
    \label{BookRepository}
    \begin{center}
    \includegraphics[scale=0.5]{Children/Chapter5/images5/GitHubReadme.png}
    \end{center}
\end{figure}

You can also push your tags to GitHub.\index{GitHub!tag} To push all of the tags to GitHub type:

<<Ch5PushTags, eval=FALSE, engine='sh'>>=
git push --tags
@

\noindent Now on the repo's GitHub page there will be a \texttt{Tags} section that will allow you to view and download the files in each tagged version of the repository. 

\subsubsection{Accessing on GitHub}

\paragraph{Downloading into R \& viewing files}

In Chapter \ref{DataGather} we learn how to load data from a text file stored on GitHub directly into R. In general it is similar to loading data from Dropbox Public folders, but because the files are stored on a secure server it requires a few extra steps. See page \pageref{SecureDataDownload} for more details.

The GitHub web user interface also allows you, your collaborators (see below) or if the repo is public, anyone to look at text files with a web browser. Collaborators can actually also create, modify and commit changes in the web user interface. This can be useful for making small changes, especially from a mobile device without a full installation of Git. Anyone with a GitHub account can make changes to files in a public repository on the repo's website. Simply click the \texttt{Edit} button above the file and make edits. If the person making the edits is not a designated collaborator, their edits will be sent to the repository's owner for approval.\footnote{This is called a \texttt{pull}\index{Git command!pull} in git terminology. See the next section for more details.}. This can be a useful way for independent researchers to catch errors and directly address them.

\subsubsection{Collaboration with GitHub}

Repositories can have official collaborators that can make changes to files in the repo. Public repositories can have unlimited collaborators. Anyone with a GitHub account can be a collaborator. To add a collaborator to a repository you created click on the \texttt{Settings} button on the repository's website (see Figure \ref{BookRepository}). Then click the \texttt{Collaborators} button on the left-hand side of the page. You will be given a box to \texttt{Add a friend}. You can search for other people's GitHub user names. If your collaborator doesn't have one, they will have to create a new account. Once you add someone as a collaborator they can clone the repository onto their computer as you did earlier.

\paragraph{Syncing repository}

What do you do if you and your collaborators are both making changes to the files? To avoid too many conflicts, it is a good idea to sync your local repository with the remote repository \textbf{before} you push your commits to GitHub. Use the \texttt{pull command}\index{Git command!pull} to sync your local and remote repository. First add and commit your changes, then type:

<<Ch5Pull, eval=FALSE, engine='sh'>>=
# Sync repository
git pull 
@ 

\noindent If you have merge conflicts you will probably want to resolve these in the individual files and commit the changes. Finally, push your merged changes up to the remote repository.

\subsection{Summing up the GitHub workflow}

We've covered a lot of ground in this section. Let's sum up the basic GitHub workflow you will probably follow. Let's assume you already have a repo on GitHub that you've cloned to your computer. 

\begin{enumerate}
    \item add any changes you've made with \texttt{git add .},
    \item \texttt{commit} the changes,
    \item \texttt{pull} your collaborators' changes from the GitHub repo and resolve any merge conflicts,
    \item \texttt{push} your changes to GitHub. 
\end{enumerate}

\paragraph{More Practice with Command Line Git \& GitHub}

If you want more practice setting up GitHub in the command line, GitHub and the website Code School have an interactive tutorial that you might find interesting. You can find it at: \url{http://try.github.com/levels/1/challenges/4}.

\section{RStudio \& GitHub}

RStudio can accomplish many of the Git commands covered in the previous section with a graphical user interface. 

\subsection{Set Up}

You can Git initialize new RStudio projects as repositories, Git initialize existing projects, and create RStudio Projects\index{RStudio!Projects} from cloned repos. When you do this RStudio automatically adds a \emph{.gitignore} file telling Git to ignore the R files: \emph{.Rproj.user}, \emph{.Rhistory} and \emph{.RData}. 

\paragraph{New Git version controlled repository}
To create a new project with Git version control go to \texttt{Project} in the RStudio menu bar. Then click \texttt{Create Project \ldots}. Select \texttt{New Project}. Enter the Projects name and desired directory. Make sure to check the dialog box for \texttt{Create a git repository for this project}. 

\paragraph{Git initialize existing projects}

If you have an existing RStudio Project and want to add Git version control to it first go to \texttt{Project} in the RStudio menu bar. Then select \texttt{Project Options \ldots}. Select the \texttt{Git/SVN} icon. Finally select \texttt{Git} from the drop down menu for \texttt{Version Control System:}.

You can push an existing repository stored on your computer to a new remote one on GitHub, for example. To do this first create a new repo on GitHub with the same name as your RStudio project like we did earlier.\footnote{If your project already has a README file make sure you don't have GitHub initialize the repository with another README file.} Then copy the remote repository's URL like we saw before when we cloned a repository. Open a new shell from withing RStudio. To do this, click the \texttt{Shell} button in Git tab's \texttt{More} drop down menu. Then use the Git's \texttt{remote}\index{Git command!remote} command with the \texttt{add} argument. For example, if your repository's GitHub URL is \texttt{https://github.com/USERNAME/ExampleProject.git} then type:

{\small
<<Ch5GitRemoteAdd, eval=FALSE, engine='sh'>>=
# Add a remote (GitHub) repository to an existing repo
git remote add origin https://github.com/USERNAME/ExampleProject.git
@
}

\noindent This will add the local \texttt{origin} repository to GitHub. Finally, push the repository to GitHub: 

<<Ch5GitPushRemote, eval=FALSE, engine='sh'>>=
# Push local repository to GitHub for the first time
git push -u origin master
@

\noindent This is almost identical to the \texttt{push} command we saw earlier. The only difference is the addition of the \texttt{-u} (upstream tracking)\index{Git!upstream tracking} argument. This argument simply adds a tracking reference for the upstream (GitHub) repository branches. 

Once you have done this you will not need to use the shell to push changes to GitHub. You can use the \texttt{Push} command in the \texttt{More} drop down menu in your project's \emph{Git} tab. Just like when pushing from the shell, you will be asked for your GitHub user name and password.

\paragraph{Clone repository into a new project}

To create a new project from a cloned GitHub Repository again go to \texttt{Project} in the RStudio menu bar. Then click \texttt{Create Project \ldots}. Select the \texttt{Version Control} option and then \texttt{Git}. Finally paste the repository's URL in the field called \texttt{Repository URL:}, enter the directory you would like to locate the cloned repo in and click \texttt{Create Project}. 

\subsection{Using Git in RStudio projects}

When you open a project with a Git repository in RStudio you will see a new tab in the same pane as \emph{Workspace/History} (see Figure \ref{GitTab}).

\begin{figure}
    \caption{The RStudio Git Tab}
    \label{GitTab}
    \begin{center}

    \begin{subfigure}
        \caption{ExampleProject Git Tab}
            \includegraphics[scale=0.6]{Children/Chapter5/images5/GitTab.png}
    \end{subfigure}
    \vspace{0.25cm}

    \begin{subfigure}
        \caption{Adding Changes to the Repository}
            \includegraphics[scale=0.6]{Children/Chapter5/images5/GitAdd.png}
    \end{subfigure}
    \end{center}
\end{figure}

This tab allows you do to many of the things we covered in the previous section. To add and commit files to the repository click on the dialog boxes next to the file names. In the bottom panel of Figure \ref{GitTab} you can see that I've created a new R file called \emph{ExampleScript.R} and clicked the dialog box next to it, along with the other files. The yellow question marks in the top panel have now become green A's. Clicking \texttt{Commit} opens a new window called \textbf{Review Changes} where you can commit the changes. Simply write a commit message in the box called \emph{Commit Message} on the upper-right side of the \textbf{Review Changes} window and click \texttt{Commit}. If you add files names to the \emph{.gitignore} files, they will not show up in RStudio's \emph{Git} tab.

If you are using a GitHub repo that is associated with a remote repository on GitHub, for example, you can push and pull it with the \texttt{Pull Branches} and \texttt{Push Branches} buttons in the \texttt{More} drop down menu. You can also use the same icons in the \textbf{Review Changes} window.

The Git tab also allows you to change branches, revert to previous commits, add files to \verb|.gitignore| and view your commit history. You can also always use the \texttt{More \textrightarrow\:Shell \ldots} option to open a new Shell with the project set as the working directory to complete any Git task you might want.

