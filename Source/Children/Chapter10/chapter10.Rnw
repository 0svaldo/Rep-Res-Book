% Chapter Chapter 10 For Reproducible Research in R and RStudio
% Christopher Gandrud
% Created: 16/07/2012 05:45:03 pm CEST
% Updated: 8 January 2013

<<set-parent10, echo=FALSE, results='hide', cache=FALSE>>=
set_parent('/git_repositories/Rep-Res-Book/Source/Parent/Rep-Res-Parent.Rnw')
@

\chapter{Showing Results with Figures}\label{FiguresChapter}

One of the main reasons that many people use R is to take advantage of its very comprehensive and powerful set of data visualization tools. Visually displaying information with graphics is often a much more effective presenting both descriptive statistics and analysis results than the tables we covered in the last chapter.\footnote{There are of course a number of exceptions to this rule of thumb. \cite[][Ch. 9]{vanBelle2008} argues that a few numbers can be listed in a sentence, many numbers shown in tables and relationships between numbers are best shown with graphs. Similarly, \cite{Tufte2001} argues that tables tend to outperform graphics for displaying 20 or fewer numbers. Graphics often outperform tables for showing larger data sets and relationships within the data.} 

Nonetheless, dynamically incorporating figures with \emph{knitr} has many of the same benefits as dynamically including tables, especially the ability to have data set or analysis changes automatically cascade into your presentation documents. The basic process for including figures in knitted presentation documents is also very similar to including tables, though there are some important extra considerations we need to make to properly size the figures and be able to include interactive visualizations in our presentation documents.

In this chapter we will first briefly learn how to include non-knitted graphics in LaTeX and Markdown documents before turning to look at how to dynamically knit R graphics into presentation documents. In the remainder of the chapter we will look at how to actually create graphics with R including some of the fundamentals of R's default graphics package as well as the \emph{ggplot2} \citep{R-ggplot2},\index{ggplot2} \emph{googleVis} and \citep{R-googleVis},\index{googleVis} packages. In each case we will not be learning a complete introduction to tool, but instead focusing on how to include the figures created by these packages in knitted presentation documents. 

\section{Including graphics non-knitted graphics}

Understanding how \emph{knitr} dynamically includes figures is easier if you understand how figures are normally included in LaTeX and Markdown. Unlike a word processing program like Microsoft Word\index{Microsoft Word}, in LaTeX, Markdown, HTML and other markup languages you don't copy and paste figures into your document. Instead you link to an image file outside of your markup document. Typically these images files are in formats such as PDF,\footnote{Portable Document Format} EPS,\footnote{Encapsulated PostScript} PNG\footnote{Portable Network Graphic} and \emph{JPEG}.\footnote{Joint Photographic Experts Group}\index{PDF}\index{EPS}\index{PNG}\index{JPEG} 

There are three advantages to this method of including graphics over cut and paste. The first is that whenever the image files are changed the changes are updated in the final presentation document when it is compiled, no recopying and pasting. The second advantage is that the images' are sized and placed with the markup code rather than point and clicking. This is tedious at first, but saves considerable time and frustration when a document becomes larger. Finally, because the image is not actually loaded in the markup file, you won't notice any sluggishness while editing caused by many possibly large sized images.

If the image files are in the same directory as the markup document, we don't need to specify the image's file path only its name. If it is another directory, we need to include file path information. In this section we will learn how to include graphics files in documents created with LaTeX and Markdown.

\subsection{Including graphics in LaTeX}

The main way to include graphics (graphs, photos and so on) in LaTeX documents is to use the \texttt{includegraphics}\index{includegraphics} command to link to image files. To have the full range of features for \texttt{includegraphics} make sure to load the \emph{graphicx}\index{graphicx, LaTeX} package in your document's preamble. Imagine that we wanted to include an image of butterflies stored in a file called \emph{HeliconiusMimicry.png} in a LaTeX produced document.\footnote{The image used here is from \cite{Meyer2006}.} We type:

<<Ch10IncludeGraphics, eval=FALSE>>=
\includegraphics[scale=0.8]{HeliconiusMimicry.png}
@

\noindent In the square brackets you'll notice \verb|scale=0.8|. This formats the image to be included at 80 percent of its actual size. You can use other options such as \texttt{height} to specify the height, \texttt{width} to specify the width and \texttt{angle} to specify what angle to rotate the image. You can add include more than one of these if the are separated by commas. Rather than setting the exact centimeters wide you want a figure to be you can determine its width as a proportion of the text width using \verb|\\textwidth|.\footnote{Note there are a number of other ways to set the size of a figure relative to a page element. See: LaTeX Wiki Book for more details: \url{http://en.wikibooks.org/wiki/LaTeX/Page_Layout}.} For example to set our image at 80 percent of the text width we can type:

<<Ch10IncludeGraphicsTextWidth, eval=FALSE>>=
\includegraphics[width=0.8\\textwidth]{HeliconiusMimicry.png}
@

\noindent Notice that that there are two backslashes before \texttt{textwidth}. The LaTeX command only has one, however all knitr code chunk options must be written as they are in R. We need to escape the backslash with the backslash escape character, i.e. to backslashes.

\paragraph{{\tt{figure}} float environment}\index{figure, LaTeX environment}

Most often you will want to include figures in LaTeX in a \texttt{figure} float environment. The \emph{figure} environment works almost exactly the same way as the \texttt{table} environment. It allows you to separate the figure from the text, add a caption and label the figure. We begin the environment with \verb|\begin{figure}[POSITION_SPEC]|. \verb|POSITION_SPEC| can have the same values as we saw earlier (page \pageref{POSITIONSPEC}). We can then include a \texttt{caption}\index{caption, LaTeX} and \emph{label} command.\index{label, LaTeX} The environment is closed with \verb|\end{figure}|. For example, to create Figure \ref{ExampleLaTeXFigure} I used the following code:\footnote{For simplicity, this code does not include the full image's file path.}

<<Ch10FigFloat, eval=FALSE>>=
\begin{figure}[ht]
    \caption{An Example Figure in LaTeX}
    \label{ExampleLaTeXFigure}
        \begin{center}
            \includegraphics[scale=0.8]{HeliconiusMimicry.png}
        \end{center}
    \scriptsize{Source: \cite{Meyer2006}}
\end{figure}
@

\noindent Notice that after the call to end the \texttt{center} environment we include \verb|{\scriptsize{Source: \cite{Meyer2006}}}|. This simply includes a note in the figure environment (i.e. it moves with the figure and is separate from the text) giving the images source. The \texttt{scriptsize} command transforms the text to smaller than normal size font. See Chapter \ref{LatexChapter} (page \pageref{FontSize}) for more details on LaTeX font sizes. The command \verb|\cite{Meyer2006}| inserts a citation from the bibliography for \cite{Meyer2006}. Again, we will discuss bibliographies in more detail in the next chapter (see page \pageref{BibTeXBib}).

\begin{figure}[ht]
    \caption{An Example Figure in LaTeX}
    \label{ExampleLaTeXFigure}
        \begin{center}
            \includegraphics[scale=0.8]{/git_repositories/Rep-Res-Book/Source/Children/Chapter10/images10/HeliconiusMimicry.png}
        \end{center}
    {\scriptsize{Source: \cite{Meyer2006}}}
\end{figure}

\subsection{Including graphics in Markdown/HTML}

Markdown has a similar command to LaTeX's \texttt{includegraphics}. It goes like this: \verb|![ALT_TEXT](FILE_PATH)|.\index{![]()} This syntax may seem strange now, but it will hopefully make more sense when we cover hyperlinks in Chapter \ref{MarkdownChapter} (page \pageref{MarkdownLinks}) as this is what it is intended to imitate. \verb|ALT_TEXT| refers to HTML's \texttt{alt} (alternative text)\index{alt, HTML} attribute. This should be a very short description of the image if it fails to load. \verb|FILE_PATH| specifies the image's file path.\footnote{You can also include a title in quotation marks. This specifies the HTML \texttt{title} attribute. However, this attribute does not create a title for the image in the way that \texttt{caption} does for LaTeX float figures. Instead it creates a tooltip\index{tooltip}, a small box that appears when you place your cursor over the image.} Here is an example using the image we worked with before.

<<Ch9MarkdownImage, eval=FALSE>>=
![ButterflyImage](HeliconiusMimicry.png)
@

\noindent Note that the file path can be a URL. You may, for example store an image in the Dropbox Public folder or on GitHub and use its URL to link to it in the Markdown document.\footnote{For images stored on GitHub use the URL for the raw version of the file} A final tip: if you are using RStudio's \textbf{HTML Preview} window to preview your Markdown document images sourced from a URL will probably not show up. You should preview the document in your web browser instead. This is easy to do in RStudio by clicking on the \texttt{View the page with the system web browser} button (\includegraphics[scale=0.45]{/git_repositories/Rep-Res-Book/Source/Children/Chapter10/images10/ShowInBrowser.png}). It's located at the top of the \textbf{HTML Preview} window.

To keep things simple, Markdown does not include ways to size or reposition an image. To do this you will have to use HTML markup. Probably the simplest way to include images with HTML is by using the \texttt{img} (image) element tag. To create the equivalent of what we just did in Markdown with HTMl we type:

\begin{knitrout}
    \definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}
    \color{fgcolor}
    \begin{kframe}
        \begin{alltt}
<img src="HeliconiusMimicry.png" alt="ButterflyImage"></img>
            \end{alltt}
        \end{kframe}
\end{knitrout} 

\noindent The \texttt{src} (script)\index{src, HTML} attribute specifies the file path. To change the width and height of the image we can use the \texttt{width} and \texttt{height} attributes. For example:

\begin{knitrout}
    \definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}
    \color{fgcolor}
    \begin{kframe}
        \begin{alltt}
<img src="HeliconiusMimicry.png" alt="ButterflyImage"
     width="100px" height="100px"></img>
            \end{alltt}
        \end{kframe}
\end{knitrout} 

\noindent creates an image that is 100 pixels (\texttt{px}) wide by 100 pixels\index{pixel}\index{px} high.\footnote{A pixel is the smallest discrete part of images displayed on a screen. See pixel Wikipedia page for more details on what a pixel is: \url{http://en.wikipedia.org/wiki/Pixel}.} 

\section{Basic knitr figure options}

So far we have looked at how to included images that have already been created into our LaTeX and Markdown documents. \emph{knitr} allows us to combine a figure's creation by R with its inclusion in a presentation document. They are tied together and update together. We use \emph{knitr} chunk options to specify how the figure will look in the presentation document and where it will be saved. Let's learn some of the more important options for figures.

\subsection{Chunk options}

\paragraph{{\tt{fig.path}}}\index{fig.path, knitr option}

When you use \emph{knitr} to create and include figures in your presentation documents it (1) runs the code you give it to create the figure, (2) automatically saves it into a particular directory\footnote{If a code chunk creates more than one figure, \emph{knitr} automatically saves each into its own file in the same directory.} and (2) includes the necessary LaTeX or Markdown code to include the figure in the final presentation document. By default \emph{knitr} saves images in to a folder (it creates) called \emph{figure} located in the working directory.\footnote{File names are based on the code chunk label where they were created.} You can tell \emph{knitr} to where it saves the images with the \texttt{fig.path} option. Simply use the file path naming conventions suitable for your system and include the new path in quotation marks.

\paragraph{{\tt{out.height}}}\index{out.height, knitr option}

To set the height that a figure will be in the final presentation document use the \texttt{out.height} option. In R LaTeX documents you can set the width using centimeters, inches, or as a proportion of a page element. In R Markdown documents you use pixels to set the height. For example, to set a figure's height in an R Markdown document to 200 pixels use \verb|out.height='200px'|. 

\paragraph{{\tt{out.width}}}\index{out.width, knitr option}

Similarly, we can set the width of a \emph{knitr} created figure using the \texttt{out.width} option. The same rules apply as with \texttt{out.width}. For example, to have figure shown at 80 percent of the text width in an R LaTeX document use: \verb|out.width='0.8\\textwidth'|.

\paragraph{{\tt{fig.align}}}\index{fig.align, knitr option}

You can set a knitted figure's alignment using \texttt{fig.align}. The option can be set to \texttt{left}, \texttt{center} or \texttt{right}. To center a figure add \verb|fig.align='center'|. Note that this option only works with R LaTeX and R HTML. You probably noticed before that there was no way to change a figure's alignment in straight Markdown syntax. To specify the alignment of figures in Markdown you need to change the CSS style file.

\paragraph{Other figure chunk options}

The previous options are probably the most commonly used ways of adjusting figures with \emph{knitr}. However, \emph{knitr} has many other chunk options to help you adjust your figures so that they are incorporated into your presentation document the way that you would like them to be.  The option \texttt{fig.cap}\index{fig.lb, knitr option} allows you to set a figure's LaTeX caption and \texttt{fig.lb}\index{fig.lb, knitr option} allows you to set the label.\footnote{In this chapter we will set these options in the markup rather than the code chunk. I prefer doing this because \emph{knitr} options need to be on the same line and so long lists of options can become difficult to read.} Please see the official \emph{knitr} code chunk options webpage for more information: \url{http://yihui.name/knitr/options#chunk_options}.
 
\subsection{Global options}

If you want all of your figures share the same options-e.g. same hight and alignment--you can set global figure options at the beginning of the document with \verb|opts_chunk$set|.\index{knitr global chunk options} Imagine that we are making an R LaTeX Sweave-style document want all of our figures to be center aligned and 80 percent of the text width. We type:

\begin{knitrout}
    \definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}
    \color{fgcolor}
        \begin{kframe}
            \begin{alltt}
\textless{\textless}include=FALSE\textgreater{\textgreater}=
opts_chunk$\hlfunctioncall{set.}(fig.align = \hlstring{"center"}, out.width = \hlstring{"0.8\textbackslash{}textwidth"})
@
            \end{alltt}
        \end{kframe}
\end{knitrout}

\section{Knitting R's default graphics}

R's \emph{graphics} package\index{graphics, R package}--loaded by default--includes commands to create numerous plot types. These include \texttt{hist}\index{hist} for histograms, \texttt{pairs}\index{pairs, R command} for scatterplot matrices, \texttt{boxplot}\index{boxplot} for creating boxplots and the versatile \texttt{plot}\index{plot, R command} for creating x-y plots--including scatter plots and bar charts depending on the data's type. 

There are many useful resources for learning how to fully utilize R's default graphics capabilities. These include Paul Murrell's \citeyearpar{Murrell2011} very comprehensive \emph{R Graphics} book. The more basic Cookbook for R\footnote{http://wiki.stdout.org/rcookbook/Graphs/} and Quick-R\footnote{\url{http://www.statmethods.net/advgraphs/}} websites are also very helpful. Winston Chang, the maintainer of the CookBook for R also has a book devoted creating R graphics \citeyearpar{Chang2012}.

In this section we are going to see how include R's default graphs in our LaTeX and presentation documents. We will also see an example of how to source the creation of a graph from a segmented analysis file. In general R's default graphics capabilities create static graphics (i.e. they are not animations or interactive). The discussion in this section is exclusively about using static graphics with \emph{knitr}. Later in the chapter we will discuss how to knit interactive graphics.

Let's look at an example we first saw at the end of Chapter \ref{StatsModel} (page \pageref{SourceCarsGraph}). Remember that we accessed an R source code file stored on GitHub to create a simple scatterplot of a sample of cars' speed and stopping distances using R's \emph{cars} data set, which is loaded by default. We haven't yet seen the code in the R source file that created the plot. The variable \textbf{speed} contains the stopping speed and \textbf{dist} contains the stopping distances. Here is the code to create the plot:

<<Ch10CarsPlotCode, eval=FALSE, tidy=FALSE>>=
# Create simple scatterplot of cars' speed and stopping distance
plot(x = cars$speed, y = cars$dist,
     xlab = "Speed (mph)",
     ylab = "Stopping Distance (ft)",
     cex.lab = 1.5)
@

\noindent We select the variables from \emph{cars} to plot on the $x$ and $y$ axes with the component selector (\verb|$|). Then we use the \texttt{xlab} and \texttt{ylab} arguments to specify the $x$ and $y$ axis labels. We could have added a title for the plot using the \texttt{main} argument. We didn't do this because we will give the plot a title in the LaTeX \texttt{figure} environment. The \texttt{cex.lab}\index{cex.lab} argument increased the labels' font size. The argument specifically determines how to scale the labels relative to the default. 1.5 means 50 percent larger than the default. 

Now let's see how to create this plot with \emph{knitr} and include it in a LaTeX \texttt{figure} environment.

{\small
\begin{knitrout}
\definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}
\color{fgcolor}
    \begin{kframe}
        \begin{alltt}
\textbackslash{}begin\{figure\}[ht]
    \textbackslash{}caption\{Example Simple Scatter Plot Using \textbackslash{}texttt\{plot\}\}
    \textbackslash{}label\{BasicFigureExample\}
\textless{\textless}echo=FALSE, fig.align='center', out.width='8cm', out.height='8cm'\textgreater{\textgreater}=
\hlfunctioncall{plot}(x = cars$speed, y = cars$dist,
     xlab = \hlstring{"\hlfunctioncall{Speed} (mph)"},
     ylab = \hlstring{"Stopping \hlfunctioncall{Distance} (ft)"},
     cex.lab = 1.5)
@
\textbackslash{}end\{figure\}
        \end{alltt}
    \end{kframe}
\end{knitrout}
}

% Actually create simple scatterplot
\begin{figure}
    \caption{Example Simple Scatter Plot Using \texttt{plot}}
    \label{BasicFigureExample}
<<Ch10PlotBasic, echo=FALSE, fig.align='center', out.width='8cm', out.height='8cm'>>=
plot(x = cars$speed, y = cars$dist,
     xlab = "Speed (mph)",
     ylab = "Stopping Distance (ft)",
     cex.lab = 1.5)
@
\end{figure} 

\noindent This code produces the Figure \ref{BasicFigureExample}. If you are familiar with R graphics you will notice that we did not need to tell \emph{knitr} to save the file in a particular format. Instead, behind the scenes it automatically saves the plot as a PDF file in a folder called \emph{figure} that is a child of the current working directory.

We could of course simply linked to the original R source code file stored on GitHub\index{GitHub} with the \verb|source_url|\index{source\_url} command. Let's look at an example of this with a different source code file. Remember in Chapter \ref{DataGather} we used a makefile to gather data from three different sources on the internet. The makefile and the CSV file it creates called \emph{MainData.csv} are stored on GitHub: \url{http://bit.ly/V0ldsf}.\footnote{The full version of the URL is: \url{https://github.com/christophergandrud/Rep-Res-Examples/tree/master/DataGather_Merge}} I've created another R source code file that downloads this data into R and creates a scatterplot matrix. The code looks like this:

<<Ch10ScatterPlotMatrix, eval=FALSE, tidy=FALSE>>=
# Download data
# See Chapter 6 for details on loading source_GitHubData
MainData <- source_GitHubData("http://bit.ly/V0ldsf")

# Subset MainData so that it only includes 2003
SubData <- subset(MainData, year == 2003)

# Remove iso2c, country, year variables
# Keep reg_4state, disproportionality, FertilizerConsumption
SubData <- SubData[, c("reg_4state",
                       "disproportionality",
                       "FertilizerConsumption")]

# Create scatterplot matrix
pairs(x = SubData)
@

\noindent Ok, this is a lot of code, but you should be familiar with most of it. You will notice one new command: \texttt{paste}.\index{paste, R command} This command simply pastes together the different parts of \emph{MainData.csv}'s URL address. Setting \verb|sep = ""|, simply means that we don't want any space (or other character) to separate the different parts of the URL. We don't have to do this. It just makes the code easier to read in this instance, so that it won't run off the page. 

You will notice that after downloading the data we cleaned up the data by removing data from all years other than 2003 and all of the country-year type variables. Finally, we create the scatterplot matrix with \texttt{pairs}.

Luckily, to dynamically include the plot in our final document, we don't need to include all of this code in a code chunk in our markup document. The source code file is available on GitHub.\footnote{See: \url{https://raw.github.com/christophergandrud/Rep-Res-Examples/master/Graphs/ScatterPlotMatrix.R}.} So we only need to use \verb|source_url| to link to it. I've shortened the raw source code file's URL to: \url{http://bit.ly/TE0gTc}. Let's look at the syntax for knitting this into an R Markdown file:

{\scriptsize
<<Ch9ScatterplotMatrixMarkdown, eval=FALSE, tidy=FALSE>>=
### Scatterplot Matrix Created from MainData.csv
```{r, echo=FALSE, warning=FALSE, message=FALSE, out.width='500px', out.height='500px'}
# Create scatterplot matrix from MainData.csv
devtools::source_url("http://bit.ly/TE0gTc")
```
@
}

\noindent This code creates the plot that we see in Figure \ref{MarkdownScatterMatrix}. Because we have linked all the way back to the original data set \emph{MainData.csv} any time it is updated by the Makefile the update will automatically cascade all the way through to our final presentation document the next time we knit it.

\begin{figure}
    \caption{Example Markdown Scatterplot Matrix}
    \label{MarkdownScatterMatrix}
        \begin{center}
            \includegraphics[width=0.7\textwidth]{/git_repositories/Rep-Res-Book/Source/Children/Chapter10/images10/MarkdownScatterMatrix.png}
        \end{center}
\end{figure}

\section{Including ggplot2 graphs}

The \emph{ggplot2} package\footnote{``GG'' stands for grammar of graphics and ``2'' indicates that it is the second major version of the package.} \citep{R-ggplot2}\index{ggplot2} is probably one of the most popular recent developments in R graphics. It greatly expands the aesthetic and substantive tools R has for displaying quantitative information. Figures created with \emph{ggplot2} are (generally) static,\footnote{It is possible to combine a series of figures created with \emph{ggplot2} into an animation. We will touch on this briefly in the last section of this Chapter (see page \pageref{animations}). For a nice example of an animation using \emph{ggplot2} see Jerzy Wieczorek's animation of 2012 US presidential campaigning: \url{http://bit.ly/UUVKka}.} so they are included in knitted documents the same way as we saw with R's default graphics. 

There are a number of very good resources for learning how to use \emph{ggplot2}. These include Hadley Wickham's \emph{ggplot2} book \citeyearpar{Whickham2009book} and article \citeyearpar{Whickham2010journal}. The official \emph{ggplot2} website\footnote{\url{http://docs.ggplot2.org/current/}} has up-to-date information. I've also found the Cookbook for R website helpful.\footnote{\url{http://wiki.stdout.org/rcookbook/Graphs/}}

Given the that there is already extensive good documentation on \emph{ggplot2} we are not going to learn the full details of how to use the package here. Instead we will see examples of how to manipulate a data frame and a regression results object so that they can be graphed with \emph{ggplot2}. First we will create a multi-line time series plot. Then we will create a caterpillar plot of regression results. Along with giving you a general sense of how \emph{ggplot2} works, the examples illuminate how \emph{ggplot2} can be made part of a fully reproducible research workflow.\footnote{Note that everything we do here with \emph{ggplot2} can also be done with R's default graphics, though the appearance will be different.}

Sometimes we may want to show how multiple variables change overtime. For example, imagine we have data on inflation in the United States along with inflation forecasts made by the US Federal Reserve\index{US Federal Reserve} two quarters beforehand. The data is stored on GitHub at: \url{https://raw.github.com/christophergandrud/Rep-Res-Examples/master/Graphs/InflationData.csv}.\footnote{This data is from \cite{GandrudGrafstrom2012}. The example here partially recreates Figure 1 from that paper.} I've loaded the data and put it in an object called \emph{InflationData}. It looks like this:

% Load inflation data
<<Ch10LoadInflationData, include=FALSE>>=
# Load source_GitHubData
devtools::source_gist("4466237")

# Create URL object
InflationUrl <- "https://raw.github.com/christophergandrud/Rep-Res-Examples/master/Graphs/InflationData.csv"

# Load data
InflationData <- source_GitHubData(InflationUrl)
@

{\small
<<Ch10HeadInflationData>>=
names(InflationData)
@
}

We want to create a plot with \textbf{Quarter} as the $x$ axis, inflation as the $y$ axis and two lines. One line would represent \textbf{ActualInflation} and the other \textbf{EstimatedInflation}. To do this we need to reshape\index{reshape data} our data so that the inflation variables are long like this:

\begin{tabular}{l l l}
    \hline
    Quarter & Variable & Value \\[0.25cm]
    \hline\hline
    1969.1 & ActualInflation & \\
    1969.1 & EstimatedInflation & \\ 
    1969.2 & ActualInflation & \\
    1969.2 & EstimatedInflation & \\  
    \ldots & & \\
    \hline
\end{tabular}
\vspace{0.1cm}

\noindent To do this we will need to use the \texttt{melt} command from \emph{reshape2} that we first saw in Chapter \ref{DataClean} (page \pageref{MeltReshape}). The variable in this case identifying the observations is \texttt{Quarter}. The \textbf{ActualInflation} and \textbf{EstimatedInflation} variables are our ``measure'' variables in that they measure what we are interested in graphing: inflation. So let's melt the data:

<<Ch10MeltInflation, tidy=FALSE>>=
# Load reshape2
library(reshape2)

# Melt InflationData
MoltenInflation <- melt(InflationData, id.vars = "Quarter",
                        measure.vars = c("ActualInflation",
                                         "EstimatedInflation"))

# Show MoltenInflation variables
names(MoltenInflation)
@

\noindent Now we have a data set we can use to create our line graph with \emph{ggplot2}. 

Let's cover a few basic \emph{ggplot2} ideas that will help us understand the following code better. First, plots are composed of layers\index{layers, ggplot2} including the coordinate system, points, labels and so on. Each layer has aesthetics including the variables plotted on the $x$ and $y$ axes, label sizes, colors and shapes. Aesthetic elements are defined by the \texttt{aes}\index{aes}\index{aesthetics, ggplot2} argument. Finally, the main layer types are called geometrics,\index{geometrics, ggplot2} including lines, points, bars, text. Arguments that set geometrics usually begin with \texttt{geom}.\index{geom, ggplot2} For example, the geometric to create lines is \verb|geom_line|.\index{geom\_line}

{\footnotesize
<<Ch10ggplot2Lines, eval=FALSE, tidy=FALSE>>=
# Load ggplot2
library(ggplot2)

# Create plot
LinePlot <- ggplot(data = MoltenInflation, aes(x = Quarter,
                                               y = value,
                                               color = variable,
                                               linetype = variable)) +
                    geom_line() +
                    scale_color_discrete(name = "", labels = c("Actual", 
                                                               "Estimated")) +
                    scale_linetype(name = "", labels = c("Actual", 
                                                         "Estimated")) +
                    xlab("\n Quarter") + ylab("Inflation\n") +
                    theme_bw(base_size = 15)

# Print plot
print(LinePlot) 
@ 
}

\noindent You can see we set the $x$ and $y$ axes using the \textbf{Quarter} and \textbf{value} variables. We told \texttt{ggplot} that elements in the geometic layer should have lines with colors and line types (dashed, dotted, and so on) based on the value of \textbf{variable} that they represent. \verb|geom_line| specifies that we want to add a line geometric layer.\footnote{Remember from Chapter \ref{GettingStartedRKnitr} that commands must be followed by parentheses. These layers are commands so need to be followed by parentheses.} \verb|scale_color_discrete| and \verb|scale_linetype|\index{scale\_color\_discrete}\index{scale\_linetype} are used here to hide the plots legend title with \verb|name = ""| and customize the legend's labels with \verb|labels = . . .|. You can also use them to determine the specific colors and line types you would like to use. \texttt{xlab} and \texttt{ylab} set the axes labels. You can add a title with \texttt{ggtitle}.\index{ggtitle} Finally, I added \verb|theme_bw|\index{theme\_bw} so that the plot would use a simple black and white theme. We added the argument \verb|base_size = 15| to increase the plot's font size.

All of the code required to create this graph is on GitHub at \url{http://bit.ly/VEvGJG}.\footnote{The full URL is: \url{https://raw.github.com/christophergandrud/Rep-Res-Examples/master/Graphs/InflationLineGraph.R}.} So to knit the graph like Figure \ref{ggplot2Line} into an R Sweave-style LaTeX document we type:

{\scriptsize
\begin{knitrout}
\definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}
\color{fgcolor}
    \begin{kframe}
        \begin{alltt}
\textbackslash{}begin\{figure\}[ht]
    \textbackslash{}caption\{Example Multi-line Time Series Plot Created with \textbackslash{}emph\{ggplot2\}\}
    \textbackslash{}label\{ggplot2Line\}
        \textbackslash{}begin\{center\}
\textless{\textless}echo=FALSE, message=FALSE, warning=FALSE, out.width='10cm', out.height='8cm'\textgreater{\textgreater}=
# Create plot
devtools::source_url("http://bit.ly/VEvGJG")
@
        \textbackslash{}end\{center\}
\textbackslash{}end\{figure\}
        \end{alltt}
    \end{kframe}
\end{knitrout}
}

% Actually add graph
\begin{figure}
    \caption{Example Multi-line Time Series Plot Created with \emph{ggplot2}}
    \label{ggplot2Line}
        \begin{center}
<<Ch10MultiLines, echo=FALSE, message = FALSE, warning=FALSE, out.width='10cm', out.height='8cm'>>=
# Create plot
devtools::source_url("http://bit.ly/VEvGJG")
@
        \end{center}
\end{figure}

\noindent The syntax for including this and other \emph{ggplot2} figures in an R Markdown document is the same as we saw for default R graphics.

\subsection{Showing Regression Results with Caterpillar Plots}

Many packages that estimate statistical models from data in R have built in plotting capabilities. For example, the \emph{survival} package \citep{R-survival} has a \texttt{plot.survfit}\index{plot.survfit} command for plotting survival curves created using event history analysis.\index{event history analysis} These plots can of course be knitted into presentation documents like the plots we have seen already.

However, sometimes either a package doesn't have built in commands for plotting the model results that you want or you want to use \emph{ggplot2} to improve the aesthetic quality of the plots they do create by default. In either case you can almost always create the plot that you want by first breaking into the model results object, extracting what you want, then plotting it with \emph{ggplot2}. The process is very similar to what we did in Chapter \ref{TablesChapter} (page \pageref{NonSupportedClasses}).

To illustrate how this can work, let's create a caterpillar plot\index{caterpillar plot} showing the the mean coefficient estimates and the uncertainty surrounding them from a Bayesian normal regression model using the \emph{swiss} data frame. Here is our model:

<<Ch10SwissModel, message=FALSE, error=FALSE, warning=FALSE,tidy=FALSE>>=
# Load Zelig package
library(Zelig)

# Estimate model
NBModel2 <- zelig(Examination ~ Education + Agriculture + 
                    Catholic + Infant.Mortality, 
                    model = "normal.bayes",
                    data = swiss, cite = FALSE)
@

\noindent Remember from Chapter \ref{TablesChapter} that we can create an object summarizing our estimation results like this:

<<Ch10ModelSummaryResults, tidy=FALSE>>=
# Create summary object
NBModel2Sum <- summary(NBModel2)

# Create summary data frame
NBSum2DF <- data.frame(NBModel2Sum$summary)

# Show data frame
NBSum2DF
@

\noindent We want to use \emph{ggplot2} to create credibility intervals for each variable with \textbf{X2.5.} as the minimum value and \textbf{X97.5.} as the maximum value. These are the lower and upper bounds of middle 95 percent of the estimates' marginal posterior distributions, i.e. the 95 percent credibility intervals.\footnote{The procedures used here are also generally applicable for graphing frequentist confidence intervals once you have calculated the confidence intervals. One useful command for doing this is \texttt{confint}.\index{confint}} We will also create a point at the \textbf{mean} of each estimate. To do this we will use \emph{ggplot2}'s \texttt{geom\_pointrange}. 

First we need to do a little tidying up.\label{RowNamesTidy}

<<Ch10MeltBayes, tidy=FALSE>>=
# Convert row.names to normal variable
NBSum2DF$Variable <- row.names(NBSum2DF)

# Keep only coefficienent estimates
## This allows for a more interpretable scale
NBSum2DF <- subset(NBSum2DF, Variable != "(Intercept)")
NBSum2DF <- subset(NBSum2DF, Variable != "sigma2")
@

\noindent The first line of executable code creates a proper variable out of the data frame's row.names\index{row.names} attribute. In this case row.names contains the variable names. The second and third executable lines remove the estimates \emph{(Intercept)} and \emph{sigma2}. This allows the estimates for the variables to be plotted on a scale that more easily enables interpretation.

Now we can create our caterpillar plot.

<<Ch10CatPlot, eval=FALSE, tidy=FALSE>>=
# Load ggplot2
library(ggplot2)

# Make caterpillar plot
ggplot(data = NBSum2DF, aes(x = reorder(Variable, X2.5.),
                            y = Mean,
                            ymin = X2.5., ymax = X97.5.)) +
        geom_pointrange(size = 1.4) +
        geom_hline(aes(intercept= 0), linetype = "dotted") +
        xlab("Variable\n") + ylab("\n Coefficient Estimate") +
        coord_flip() +
        theme_bw(base_size = 20)
@

\noindent There are some new pieces of code in here, so let's take a look. First the data frame is reordered by the from highest to lowest value of \textbf{X2.5.} using the \texttt{reorder} command.\index{reorder, R command} This makes the plot easier to read. The middle point of the point range is set with \texttt{y} and the lower and upper bounds with \texttt{ymin}\index{ymin, ggplot2} and \texttt{ymax}.\index{ymax, ggplot2} The \verb|geom_hline|\index{geom\_hline, ggplot2} command used here creates a dotted horizontal line at 0. i.e. no effect. \verb|coord_flip|\index{coord\_flip} flips the plot's coordinates so that the variable names are on the $y$ axis.

\noindent We can include this plot in a knitted document the same way as before. 

\begin{figure}
    \caption{An Example Caterpillar Plot Created with \emph{ggplot2}}
    \label{CatPlot}
        \begin{center}
% Actually include plot
<<Ch10PlotCatPlot, echo=FALSE, message=FALSE, out.width='0.6\\textwidth', out.height='0.3\\textheight'>>=
# Create plot
devtools::source_url("https://raw.github.com/christophergandrud/Rep-Res-Examples/master/Graphs/CaterpillarPlot.R")
@
        \end{center}
 \end{figure}   

%%%%%%%%%%%%% googleVis
\section{JavaScript graphs with \emph{googleVis}}\index{googleVis}

Markus Gesmann\index{Markus Gesmann} and Diego de Castillo's \emph{googleVis}\index{googleVis} packages allows us to use Google's Visualization API\index{API}\footnote{For full details see: \url{https://developers.google.com/chart/interactive/docs/reference}.} from R to create interactive tables, plots and maps with Google Chart Tools.\index{Google Chart Tools} Because the visualizations are written in JavaScript\index{JavaScript} they can be included in HTML presentation documents created by R Markdown. Unfortunately, they cannot be directly\footnote{The example in this Chapter is a from a screenshot.} included in LaTeX produced PDFs. The \emph{animation} package \cite{R-animation} does have some limited features for including interactive visualizations in PDFs (as well as HTML documents) and is worth investigating if you want to do this. 

\paragraph{Basic googleVis figures}

Let's briefly look at how to make one type of figure with \emph{googleVis}: a Geo Map. This is created with the \texttt{gvisGeoMap} command.\index{gvisGeoMap} We will use this example to illustrate how to incorporate \emph{googleVis} figures into R Markdown. For demonstrations of the the full range of plotting functions available visit the \emph{googleVis} website: \url{http://code.google.com/p/google-motion-charts-with-r/wiki/GadgetExamples#googleVis_Examples}. 

Imagine that we want to map global fertilizer consumption in 2003 using the World Bank data we gathered in Chapters \ref{DataGather} and \ref{DataClean}. Remember that the data was highly right skewed, so we will actually map the natural logarithm of the \textbf{FertilizerConsumption} variable. Assuming that we have already loaded the \emph{MainData.csv} data set, here is the code:

<<Ch10GeoMap, eval=FALSE, tidy=FALSE>>=
# Load googleVis
library(googleVis)

# Subset MainData so that it only includes 2003
SubData <- subset(MainData, year == 2003)

# Find the natural logarithm of FertilizerConsumption.
## Round the results to one decimal digit.
SubData$LogConsumption <- round(log(SubData$FertilizerConsumption),
                                digits = 1)

# Make a map of Fertilizer Consumption
FCMap <- gvisGeoMap(data = SubData,
                    locationvar = "iso2c",
                    numvar = "LogConsumption",
                    options = list(
                      colors = "[0xECE7F2, 0xA6BDDB, 0x2B8CBE]",
                      width = "780px",
                      height = "500px"))
@

\noindent The \texttt{locationvar} argument specifies the variable with information on each observation's location. Google Chart Tools can use ISO two country codes to determine each country's location. \texttt{numvar} specifies the continuous variable with the values to map for each country. We can determine other features of by creating a list\index{list} type object with things such as the map's width, height and colors. The colors here are written using hexadecimal values.\index{hexadecimal} This is a commonly used format for specifying colors on websites.\footnote{You can also use hexadecimal values in \emph{ggplot2}. The only difference is that instead of prefixing the values with \texttt{0x}, use a hash. The Color Brewer 2 website (\url{http://colorbrewer2.org/}) is very helpful for picking hexadecimal color palettes, among others.} 

To view the figure on your computer simply use \emph{googleVis}'s' \texttt{plot} command. For example to view our map we type:

<<Ch10ViewGoogleVisMapPlot, eval=FALSE>>=
plot(FCMap)
@

\noindent This will create open your default web browser and show you an image like that in Figure \ref{GeoMapImage}. Note that you need to be connected to the internet to view figures created by \emph{googleVis} otherwise your image will not be able to access the required JavaScript files from the Google Visualization API.

\begin{figure}
    \caption{Screenshot of a \emph{googleVis} Geo Map}
    \label{GeoMapImage}
        \begin{center}
            \includegraphics[width=\textwidth]{/git_repositories/Rep-Res-Book/Source/Children/Chapter10/images10/GeoMapScreenShot.png}
        \end{center}
\end{figure}

\paragraph{Including googleVis in knitted documents}

Typing \verb|print(FCMap, tag = "chart")| would print the entire JavaScript code needed to create the map. Much like we saw with tables produced with \emph{xtable} and \emph{apsrtable} in Chapter \ref{TablesChapter}, we need to change the code chunk \texttt{results} option to include the map as a map rather than as JavaScript markup. To have the visualization show up in your HTML output, rather than the code block, simply set the code chunk option to \verb|results='asis'|. For example, the full code needed to create and print \emph{FCMap} is available on at: \url{http://bit.ly/VNnZxS}.\footnote{The full URL is: \url{https://raw.github.com/christophergandrud/Rep-Res-Examples/master/Graphs/GoogleVisMap.R}.} To knit the map into an R Markdown document we type:

<<Ch10MapKnit, eval=FALSE>>=
```{r, echo=FALSE, message=FALSE, results='asis'}
# Create and print geo map
devtools::source_url("http://bit.ly/VNnZxS")
@

If you are using RStudio you will likely notice that \emph{googleVis} charts do not show up in the \textbf{HTML Preview} window. To see the full HTML document with charts in your web browser just click the \texttt{View the page with the system web browser} button (\includegraphics[scale=0.45]{/git_repositories/Rep-Res-Book/Source/Children/Chapter10/images10/ShowInBrowser.png}).

\paragraph{Important Note for Motion Charts}

You may notice that Google motion charts do not show up in the RStudio Preview window or even in your web browser when you open the knitted HTML version of the file. You just see a big blank space where you had hoped the chart would be It will show up, however, if you use the \verb|plot| command on a \verb|gvis| motion chart object in the console. Motion charts can only be displayed when they are hosted on a web server or located in a directory `trusted' by Flash Player.\footnote{Motion charts and annotated time line charts rely on Flash, unlike the other Google visualizations. For more information see Markus Gesmann's blog post at: \url{http://lamages.blogspot.com/2012/05/interactive-reports-in-r-with-knitr-and.html}.}\index{Flash Player}

The \verb|plot| command opens a local server, but simply opening the HTML file and the RStudio Preview window do not. An easy way to solve this problem is to simply save the HTML file in your Dropbox\index{Dropbox} \emph{Public} folder and access it through the associated public URL link (see Chapter \ref{Storing}). Publishing a motion chart on GitHub Pages\index{GitHub Pages} also works well (see Chapter \ref{MarkdownChapter}). For information on how to set a directory as `trusted' by Flash Player see: \url{http://www.macromedia.com/support/documentation/en/flashplayer/help/settings_manager04.html}.
