% Chapter Chapter 8 For Reproducible Research in R and RStudio
% Christopher Gandrud
% Created: 16/07/2012 05:45:03 pm CEST
% Updated: 

\chapter{Chapter 8: Statistical Modelling and `knitr`}

\section{Incorporating analyses into the markup}

\subsection{Full code in the main document}

\subsubsection{\LaTeX  }

\subsubsection{~Markdown}

\subsection{Showing code \& results inline}

Sometimes we want to have some \textbf{R} code or output to show up in
the text of our documents. We may want to include stylized code in our
text when we discuss how we did an analysis. We may want to report the
mean of some variable in our text.

\subsubsection{\LaTeX  }

\paragraph{Static code}

If we just want to include a code snippet in out text we can simply use
the \LaTeX command \texttt{\textbackslash{}tt}. This sets our text to
`typewriter' font, the standard font for inline code in \LaTeX (I use it
in this book, as you've probably noticed).

\paragraph{Dynamic code}

If we want to dynamically show the results of some \textbf{R} code in
our text we can use the \texttt{\textbackslash{}Sexpr} command. This is
a pseudo-\LaTeX command. Its structure is more like a \LaTeX command's
structure than \texttt{knitr} in that we enclose our \textbf{R} code in
curly brackets (\texttt{\{\}}) rather than the usual
`\texttt{\textless{}\textless{}\textgreater{}\textgreater{}= . . . @}
syntax for code chunks.

For example

\subsubsection{~Markdown}

\paragraph{Static code}

To include static code inline in an \textbf{R Markdown} document we
enclose the code in single backticks (``).

\paragraph{Dynamic code}

To include dynamic code in an \textbf{R Markdown} document we use the
backticks as be fore but include a the letter \texttt{r} after the first
one.

\subsection{Sourcing R code from another file}

There are a number of reasons that you might want to have your
\textbf{R} source code located in a separate file from your markup even
if you plan to compile them together with \texttt{knitr}.

First, it can be unwieldy to edit both your markup and long \textbf{R}
source code chunks in the same document, even with \textbf{RStudio}'s
handy \texttt{knitr} code collapsing and chunk management options. There
are just too many things going on in one document.

Second, you may want to use the same code in multiple documents--an
article and presentation for example. It is nice to not have to copy and
paste the same code into multiple places, but have multiple documents
link to the same source code. Plus if you make changes to the source
code, these changes will automatically be made across all of your
presentation documents. You don't need to make the same changes multiple
times.

Third, other researchers trying to replicate your work might only be
interested in specific parts of your analysis. If you have the analysis
broken into separate and clearly labeled files it is easier for these
researchers to find the specific bits of code that they are interested
compared to digging through long markup files.

\subsubsection{Source from a local file}

Usually in the early stages of research you may want to source analysis
files located on your computer. Doing this is simple. The \texttt{knitr}
syntax is the same as above. The only change is that instead of writing
all of our code in the chunk we save it to its own file and use the
\texttt{source} command in \emph{base} \textbf{R} to access it. For
example:

\subsubsection{Source from a non-secure URL (\texttt{http})}

Sourcing from your local computer is fine if you are working alone and
do not want others to access your code. Once you start collaborating and
generally wanting people to be able to replicate your code, you need to
use another method.\footnote{Sure you can make the replication code
  accessible for download and either instruct others to change the
  working directory to the replication file or have them change the
  directory information as necessary. However, this usually just adds an
  extra complicating step that makes replication harder. It is also a
  pain if you are collaborating and each author has to constantly change
  the directories.}

The simplest solution to these issues is to host the replication code in
your \textbf{Dropbox} public folder. You can find the file's public URL
the same way we did in Chapter 6. Now use the \texttt{source} command
the same way as before. For example:

\subsubsection{Source from a secure URL (\texttt{https})}

If you are using \textbf{GitHub} or another service that uses secure
URLs the steps are generally the same, but you need to use the
\texttt{source\_url} command in the \emph{devtools} package. For
\textbf{GitHub} based source code we find the file's URL the same way we
did in Chapter 6. Remember to get the URL for the \emph{raw} version of
the file.

\section{Saving output objects for future use}

\section{Including highlighted syntax in the output}

\subsection{\LaTeX}

\subsection{Markdown/HTML}

\section{Debugging}

