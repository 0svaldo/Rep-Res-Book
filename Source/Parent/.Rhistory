library(msm)
?statetable.msm
names(AMCLag)
StateTable <- statetable.msm(state = AMCStatus, subject = ISOCode, data = AMCLag)
StateTable
39/15
15/39
5/15
StateTable <- unname(StateTable)
rownames(StateTable) <- c("No AMC", "Centralised", "Decentralised")
colnames(StateTable) <- c("No AMC", "Centralised", "Decentralised")
fix(StateTable)
StateTable <- data.frame(StateTable)
rstudio::viewData(StateTable)
StateTableDF <- data.frame(StateTable)
fin.heatmap <- ggplot(StateTableDF, aes(Var2, Var1)) +
geom_tile(aes(fill = Freq)) +
geom_text(aes(label = Freq)) +
scale_fill_gradient2(low = "white", high = "red", name = "") +
xlab("\nAfter") + ylab("Before\n") +
theme_bw()
fin.heatmap
StateTableDF <- subset(StateTableDF, Var1 != Var2)
Create heatmap
StateTablePlot <- ggplot(StateTableDF, aes(Var2, Var1)) +
geom_tile(aes(fill = Freq)) +
geom_text(aes(label = Freq)) +
scale_fill_gradient2(low = "white", high = "red", name = "") +
xlab("\nAfter") + ylab("Before\n") +
theme_bw()
StateTableDF <- subset(StateTableDF, Var1 != Var2)
rstudio::viewData(StateTableDF)
Create heatmap
StateTablePlot <- ggplot(StateTableDF, aes(Var2, Var1)) +
geom_tile(aes(fill = Freq)) +
geom_text(aes(label = Freq)) +
scale_fill_gradient2(low = "white", high = "red", name = "") +
xlab("\nAfter") + ylab("Before\n") +
theme_bw()
print(StateTablePlot)
rstudio::viewData(AMCLag)
M1 <- crrc(ftime = AMCLag$year,
fstatus = AMCLag$AMCStatus,
cov1 = AMCLag$UDS,
cluster = AMCLag$country)
summary(M1)
print(M1)
M1$coef
M1 <- crrc(ftime = AMCLag$year,
fstatus = AMCLag$AMCStatus,
cov1 = AMCLag$UDS,
failcode = 2
cluster = AMCLag$country)
M1 <- crrc(ftime = AMCLag$year,
fstatus = AMCLag$AMCStatus,
cov1 = AMCLag$UDS,
failcode = 2,
cluster = AMCLag$country)
M1$coef
M1 <- crrc(ftime = AMCLag$year,
fstatus = AMCLag$AMCStatus,
cov1 = AMCLag$UDS,
failcode = 3,
cluster = AMCLag$country)
M1$coef
plot(M1)
?with
with(AMCLag, {
M1 <- crrc(ftime = AMCLag$year,
fstatus = AMCLag$AMCStatus,
cov1 = AMCLag$UDS,
failcode = 3,
cluster = AMCLag$country)
})
M1$coef
with(AMCLag, {
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = UDS,
failcode = 3,
cluster = country)
})
M1$coef
fix(`M1`)
with(AMCLag, {
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = UDS,
failcode = 3,
strata = country)
})
M1$coef
rm(M1)
with(AMCLag, {
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = UDS,
failcode = 3,
strata = country)
})
M1$coef
attach(AMCLag)
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = UDS,
failcode = 3,
strata = country)
detach(AMCLag)
M1$coef
plot.cuminc(M1)
library(cmprsk)
install.packages(cmprsk)
install.packages("cmprsk")
library(cmprsk)
plot.cuminc(M1)
M1Predict <- predict(M1, c(-5, 0, 5, 10))
rstudio::viewData(AMCLag)
attach(AMCLag)
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = c(UDS, SystemicCrisisLag3),
failcode = 3,
strata = country)
detach(AMCLag)
?crrs
attach(AMCLag)
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(UDS, SystemicCrisisLag3),
failcode = 3,
strata = country)
detach(AMCLag)
M1$coef
M1Predict <- predict(M1, c(-5, 0, 5, 10))
attach(AMCLag)
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(UDS, SystemicCrisisLag3),
failcode = 3,
cluster = country)
detach(AMCLag)
M1$coef
M1Predict <- predict(M1, c(-5, 0, 5, 10))
attach(AMCLag)
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(UDS, SystemicCrisisLag3),
failcode = 2,
cluster = country)
detach(AMCLag)
M1$coef
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
attach(AMCLag)
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, SystemicCrisisLag3),
attach(AMCLag)
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, SystemicCrisisLag3),
failcode = 2,
cluster = country)
detach(AMCLag)
M1$coef
attach(AMCLag)
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, SystemicCrisisLag3),
failcode = 3,
cluster = country)
detach(AMCLag)
M1$coef
fix(`M1`)
summary(M1)
attach(AMCLag)
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, SystemicCrisisLag3),
failcode = 2,
cluster = country)
detach(AMCLag)
summary(M1)
attach(AMCLag)
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, SystemicCrisisLag3),
failcode = 2,
cencode = 1,
cluster = country)
detach(AMCLag)
summary(M1)
attach(AMCLag)
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(UDS, SystemicCrisisLag3),
failcode = 2,
cluster = country)
detach(AMCLag)
summary(M1)
attach(AMCLag)
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(UDS, SystemicCrisisLag3),
failcode = 2,
cluster = country)
detach(AMCLag)
summary(M1)
rm(M1)
attach(AMCLag)
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(UDS, SystemicCrisisLag3),
failcode = 2,
cluster = country)
detach(AMCLag)
summary(M1)
attach(AMCLag)
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(UDS, SystemicCrisisLag3),
failcode = 3,
cluster = country)
detach(AMCLag)
summary(M1)
rm(M1)
attach(AMCLag)
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(UDS, SystemicCrisisLag3),
failcode = 3,
ctype = 2
cluster = country)
attach(AMCLag)
detach(AMCLag)
attach(AMCLag)
detach(AMCLag)
attach(AMCLag)
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(UDS, SystemicCrisisLag3),
failcode = 3,
ctype = 2,
strata = country)
detach(AMCLag)
M1$coef
source_url("https://raw.github.com/christophergandrud/amcData/master/SourceCode/Paper1Source/LoadRPackages.R")
source_url("https://raw.github.com/christophergandrud/amcData/master/SourceCode/Paper1Source/PaperDataLoadClean.R")
exit
q()
library(plyr)
?ddply
100 -2.5
GS <- read.table("~/GolubEUPdata.tab", header = TRUE)
GS <- read.table("~/Desktop/GolubEUPdata.tab", header = TRUE)
# Load required libraries
library(survival)
library(MSBVAR)
library(reshape)
library(reshape2)
library(ggplot2)
# Load required libraries
library(survival)
library(MSBVAR)
library(reshape)
library(reshape2)
library(ggplot2)
# Load Golub & Steunenberg (2007) Data
## Originally downloaded from http://hdl.handle.net/1902.1/15633
GS <- read.table("~/Desktop/GolubEUPdata.tab", header = TRUE)
# Create log time variable
GS$LT <- log(GS$end)
# Create natural log time interactions
attach(GS)
GS$Lqmv <- LT * qmv
GS$Lqmvpostsea <- LT * qmvpostsea
GS$Lcoop <- LT * coop
GS$Lcodec <- LT * codec
GS$Lthatcher <- LT * thatcher
GS$Lbacklog <- LT * backlog
detach(GS)
#### Run Cox PH Model ####
# Note, this model does not exactly match Licht (2011), but is pretty close
M1 <- coxph(Surv(begin, end, event) ~
qmv + qmvpostsea + qmvpostteu +
coop + codec + eu9 + eu10 + eu12 +
eu15 + thatcher + agenda + backlog +
Lqmv + Lqmvpostsea + Lcoop + Lcodec +
Lthatcher + Lbacklog,
data = GS,
ties = "efron")
#### Simulate Relative Hazards ####
# Create coefficient matrix
Coef <- matrix(M1$coefficients)
# Create variance-covariance matrix
VC <- vcov(M1)
# Simulate Using MSBVAR
Drawn <- rmultnorm(n = 1000, mu = Coef, vmat = VC)
#### Create Combined Coefficient ####
# Keep qmv and Lqmv
Drawn <- data.frame(Drawn[, c(1, 13)])
# Create Merge Variable (Simulation Number)
Drawn$ID <- 1:1000
# Create range of years over which the combined coefficient will be created
Range <- log(seq(from = 80, to = 2000, by = 15))
# Create Combined time interactionsCoefficient
TVSim <- outer(Drawn[,2], Range)
TVSim <- data.frame(melt(TVSim))
TVSim <- rename(TVSim, c(X1 = "ID", X2 = "Time", value = "TVR"))
# Merge in the non-time interacted coefficient and combine
TVSim <- merge(Drawn, TVSim, by = "ID")
TVSim$CCqmv <- TVSim$qmv + TVSim$TVR
#### Create Combined Relative Hazard ####
TVSim$HRqmv <- exp(TVSim$CCqmv)
# Order Variables by time
TVSim <- TVSim[order(TVSim$Time),]
# Drop bottom 2.5% of observations
TVSim <- ddply(TVSim, .(Time), transform, Lower = HRCC < quantile(HRCC, c(0.025)))
# Drop top 2.5% of observations
TVSim <- ddply(TVSimPerc, .(Time), transform, Upper = HRCC > quantile(HRCC, c(0.975)))
TVSim <- ddply(TVSim, .(Time), transform, Lower = HRCC < quantile(HRqmv, c(0.025)))
TVSim <- ddply(TVSim, .(Time), transform, Lower = HRCC < quantile(HRqmv, c(0.025)))
TVSim <- ddply(TVSim, .(Time), transform, Lower = HRqmv < quantile(HRqmv, c(0.025)))
TVSim <- ddply(TVSimPerc, .(Time), transform, Upper = HRqmv > quantile(HRqmv, c(0.975)))
TVSimPerc <- ddply(TVSimPerc, .(Time), transform, Upper = HRqmv > quantile(HRqmv, c(0.975)))
TVSimPerc <- ddply(TVSim, .(Time), transform, Lower = HRqmv < quantile(HRqmv, c(0.025)))
# Load Golub & Steunenberg (2007) Data
## Originally downloaded from http://hdl.handle.net/1902.1/15633
GS <- read.table("~/Desktop/GolubEUPdata.tab", header = TRUE)
# Create log time variable
GS$LT <- log(GS$end)
# Create natural log time interactions
attach(GS)
GS$Lqmv <- LT * qmv
GS$Lqmvpostsea <- LT * qmvpostsea
GS$Lcoop <- LT * coop
GS$Lcodec <- LT * codec
GS$Lthatcher <- LT * thatcher
GS$Lbacklog <- LT * backlog
detach(GS)
#### Run Cox PH Model ####
# Note, this model does not exactly match Licht (2011), but is pretty close
M1 <- coxph(Surv(begin, end, event) ~
qmv + qmvpostsea + qmvpostteu +
coop + codec + eu9 + eu10 + eu12 +
eu15 + thatcher + agenda + backlog +
Lqmv + Lqmvpostsea + Lcoop + Lcodec +
Lthatcher + Lbacklog,
data = GS,
ties = "efron")
#### Simulate Relative Hazards ####
# Create coefficient matrix
Coef <- matrix(M1$coefficients)
# Create variance-covariance matrix
VC <- vcov(M1)
# Simulate Using MSBVAR
Drawn <- rmultnorm(n = 1000, mu = Coef, vmat = VC)
#### Create Combined Coefficient ####
# Keep qmv and Lqmv
Drawn <- data.frame(Drawn[, c(1, 13)])
# Create Merge Variable (Simulation Number)
Drawn$ID <- 1:1000
# Create range of years over which the combined coefficient will be created
Range <- log(seq(from = 80, to = 2000, by = 15))
# Create Combined time interactionsCoefficient
TVSim <- outer(Drawn[,2], Range)
TVSim <- data.frame(melt(TVSim))
TVSim <- rename(TVSim, c(X1 = "ID", X2 = "Time", value = "TVR"))
# Merge in the non-time interacted coefficient and combine
TVSim <- merge(Drawn, TVSim, by = "ID")
TVSim$CCqmv <- TVSim$qmv + TVSim$TVR
#### Create Combined Relative Hazard ####
TVSim$HRqmv <- exp(TVSim$CCqmv)
# Order Variables by time
TVSim <- TVSim[order(TVSim$Time),]
# Drop bottom 2.5% of observations
TVSimPerc <- ddply(TVSim, .(Time), transform, Lower = HRqmv < quantile(HRqmv, c(0.025)))
# Drop top 2.5% of observations
TVSimPerc <- ddply(TVSimPerc, .(Time), transform, Upper = HRqmv > quantile(HRqmv, c(0.975)))
TVSimPerc <- subset(TVSimPerc, Lower == FALSE & Upper == FALSE)
ggplot(TVSim, aes(Time, HRqmv)) +
geom_point(shape = 21, alpha = I(0.01), colour = "#FA9FB5", size = 5) +
geom_smooth() +
geom_hline(aes(yintercept = 1), linetype = "dotted") +
scale_y_continuous(breaks = c(-1, 0, 1, 3, 6)) +
scale_x_continuous(breaks = c(0, 129), labels = c(80, 2000)) +
xlab("Time in Days") + ylab("Simulated QMV Relative Hazard\n") +
ggtitle("Simulated Relative Hazard for QMV from times 80-2000\n
Based on Licht (2011) Fig. 2\n") +
theme_bw(base_size = 15)
#### Graph Simulated Combined Hazard Ratios ####
ggplot(TVSimPerc, aes(Time, HRqmv)) +
geom_point(shape = 21, alpha = I(0.01), colour = "#FA9FB5", size = 5) +
geom_smooth() +
geom_hline(aes(yintercept = 1), linetype = "dotted") +
scale_y_continuous(breaks = c(-1, 0, 1, 3, 6)) +
scale_x_continuous(breaks = c(0, 129), labels = c(80, 2000)) +
xlab("Time in Days") + ylab("Simulated QMV Relative Hazard\n") +
ggtitle("Simulated Relative Hazard for QMV from times 80-2000\n
Based on Licht (2011) Fig. 2\n") +
theme_bw(base_size = 15)
#### Graph Simulated Combined Hazard Ratios ####
ggplot(TVSimPerc, aes(Time, HRqmv)) +
geom_point(shape = 21, alpha = I(0.01), colour = "#FA9FB5", size = 5) +
geom_smooth() +
geom_hline(aes(yintercept = 1), linetype = "dotted") +
scale_y_continuous(breaks = c(-1, 0, 1, 3, 6)) +
scale_x_continuous(breaks = c(0, 129), labels = c(80, 2000)) +
xlab("Time in Days") + ylab("Simulated QMV Relative Hazard\n") +
ggtitle("Simulated Relative Hazard for QMV from times 80-2000, middle 95%\n
Based on Licht (2011) Fig. 2\n") +
theme_bw(base_size = 15)
# Load Libraries
library(foreign)
library(survival)
library(MSBVAR)
# Download data
mydata <- read.dta("~/Desktop/Data2.dta")
group2 <- subset(mydata, group2 == 1)
# Run Cox PH Model with Splines
M2 <-  coxph(Surv(begin, end, Partisan_Spell) ~
pspline(POLCONIII) + PC3_BC + BEGINbc +
pspline(cumulative_crisis) + pspline(polity2) + pspline(Growth) +
strata(new_count_ps) + cluster(imfcode),
robust = TRUE, na.action=na.exclude,
data=group2, control=coxph.control(eps=1e-09,
iter.max=100, o
uter.max=100))
summary(M2)
M2 <-  coxph(Surv(begin, end, Partisan_Spell) ~
pspline(POLCONIII) + PC3_BC + BEGINbc +
pspline(cumulative_crisis) + pspline(polity2) + pspline(Growth) +
strata(new_count_ps) + cluster(imfcode),
robust = TRUE, na.action=na.exclude,
data=group2, control=coxph.control(eps=1e-09,
iter.max=100,
outer.max=100))
summary(M2)
# Create coefficient matrix
Coef <- matrix(M2$coefficients)
rstudio::viewData(Coef)
# Create variance-covariance matrix
VC <- vcov(M2)
rstudio::viewData(VC)
#### Simulate Using MSBVAR ####
Drawn <- rmultnorm(n = 1000, mu = Coef, vmat = VC)
rstudio::viewData(Drawn)
rstudio::viewData(Drawn)
names(drawn)
names(Drawn)
rstudio::viewData(Drawn)
Drawn <- data.frame(Drawn[, c(12, 13)])
rstudio::viewData(Drawn)
Drawn <- rmultnorm(n = 1000, mu = Coef, vmat = VC)
# Keep Crisis, X, and Interaction
Drawn <- data.frame(Drawn[, c(13, 14)])
rstudio::viewData(Drawn)
# Create Merge Variable (Simulation Number)
Drawn$ID <- 1:1000
Drawn <- rmultnorm(n = 1000, mu = Coef, vmat = VC)
rstudio::viewData(Drawn)
?pspline
?termplot
termplot(M2, term = 1, se =FALSE)
termplot(M2, term = 1, se = TRUE)
termplot(M2, term = 1, se = TRUE, rug = FALSE)
termplot(M2, term = 1, se = TRUE, ylab = "Log Hazard", rug=FALSE, bty="l")
termplot(M2, term = 2, se = TRUE, ylab = "Log Hazard")
termplot(M2, term = 3, se = TRUE, ylab = "Log Hazard")
termplot(M2, term = 4, se = TRUE, ylab = "Log Hazard")
termplot(M2, term = 5, se = TRUE, ylab = "Log Hazard")
termplot(M2, term = 6, se = TRUE, ylab = "Log Hazard")
termplot(M2, term = 7, se = TRUE, ylab = "Log Hazard")
rstudio::viewData(Coef)
rstudio::viewData(Drawn)
library(knitr)
# Change working directory to /Rep-Res-Book/Source/Parent
ParentDirectory <- "/git_repositories/Rep-Res-Book/Source/Parent/"
setwd(ParentDirectory)
# Compile the book's parent document
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
