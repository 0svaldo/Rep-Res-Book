PB1.lower.molten <- PB1.lower.molten[, -2]
PB1.upper.molten <- melt(PB1.cat.sum, id = c("var"), measure.vars = c("97.5%"))
PB1.upper.molten <- rename(PB1.upper.molten, c(value = "upper"))
PB1.upper.molten <- PB1.upper.molten[, -2]
PB1.molten <- merge(PB1.lower.molten, PB1.upper.molten)
PB1.molten$match <- "Matched"
estimates.b <- rbind(NB1.molten, PB1.molten)
estimates.b$method <- "Normal Bayes"
estimates <- rbind(estimates.ls, estimates.b)
# Remove Intercept
estimates <- subset(estimates, var != c("(Intercept)"))
estimates <- subset(estimates, var != c("sigma2"))
##### Create comparison plot
cols <- c("#B35B40", "#696969")
breaks <- c("pres_party", "house_dem_rep", "ExpenditureGDP", "recession", "DebtGDP", "time_to_election", "PotentialGDP", "DiscountRate2qChange", "UNRATE", "GlobalModelAfter 1996", "senate_dem_rep")
break.labels <- c("Dem. President", "Prop. House Dem.", "Gov. Expenditure (% GDP)", "Recession", "Gov. Debt (% GDP)", "Quarters Until Election", "Output Gap", "Discount Rate Change", "Unemployment Rate", "Global Model", "Prop. Senate Dem.")
est.plot <- ggplot(data = estimates, aes(x = reorder(var, lower), ymin = lower, ymax = upper, colour = match)) +
facet_grid(~ method) +
geom_linerange(size = 3, alpha = 0.6) +
scale_x_discrete(breaks = breaks, labels = break.labels) +
#scale_y_continuous(breaks = c(-1, 0.0, 0.5), labels = c("-1", "0", "0.5")) +
scale_color_manual(values = cols, name = "") +
geom_hline(aes(intercept= 0), linetype = "dotted") +
ylab("\nCoefficient Estimate") + xlab("") +
coord_flip() +
theme_bw(base_size = 11)
print(est.plot)
NB1 <- zelig(error.prop.deflator.q2 ~ pres_party + recession + time_to_election + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + UNRATE + GlobalModel, model = "normal.bayes", data = cpi.data, cite = FALSE)
#### Normal Bayes, Matched (MP) ####
PB1 <- zelig(error.prop.deflator.q2 ~ pres_party + recession + time_to_election + + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + UNRATE + GlobalModel, model = "normal.bayes", data = cpi.Mdf.party, cite = FALSE)
####################
# Greenbook MatchIt Analyses Coef Plots Compare
# Christopher Gandrud
# 3 August 2012
####################
#### Figures for ls Results Catapilar Plot ####
# .cat for catapilar graph
# .sum for summary
library(reshape)
### LS
# Extract and melt quantiles for marginal posterior distributions (not matched data set)
NL5.cat <- confint(NL5)
NL5.cat.sum <- as.data.frame(NL5.cat)
NL5.cat.sum$var <- rownames(NL5.cat.sum)
NL5.lower.molten <- melt(NL5.cat.sum, id = c("var"), measure.vars = c("2.5 %"))
NL5.lower.molten <- rename(NL5.lower.molten, c(value = "lower"))
NL5.lower.molten <- NL5.lower.molten[, -2]
NL5.upper.molten <- melt(NL5.cat.sum, id = c("var"), measure.vars = c("97.5 %"))
NL5.upper.molten <- rename(NL5.upper.molten, c(value = "upper"))
NL5.upper.molten <- NL5.upper.molten[, -2]
NL5.molten <- merge(NL5.lower.molten, NL5.upper.molten)
NL5.molten$match <- "Not Matched"
# Extract and melt quantiles for marginal posterior distributions (matched data set)
PL5.cat <- confint(PL5)
PL5.cat.sum <- as.data.frame(PL5.cat)
PL5.cat.sum$var <- rownames(PL5.cat.sum)
PL5.lower.molten <- melt(PL5.cat.sum, id = c("var"), measure.vars = c("2.5 %"))
PL5.lower.molten <- rename(PL5.lower.molten, c(value = "lower"))
PL5.lower.molten <- PL5.lower.molten[, -2]
PL5.upper.molten <- melt(PL5.cat.sum, id = c("var"), measure.vars = c("97.5 %"))
PL5.upper.molten <- rename(PL5.upper.molten, c(value = "upper"))
PL5.upper.molten <- PL5.upper.molten[, -2]
PL5.molten <- merge(PL5.lower.molten, PL5.upper.molten)
PL5.molten$match <- "Matched"
estimates.ls <- rbind(NL5.molten, PL5.molten)
estimates.ls$method <- "OLS"
#### Figures for normal.bayes Results Catapilar Plot ####
# .cat for catapilar graph
# .sum for summary
### Normal Bayes Models
# Extract and melt quantiles for marginal posterior distributions (not matched data set)
NB1.cat <- summary(NB1)
NB1.cat.sum <- as.data.frame(NB1.cat$summary)
NB1.cat.sum$var <- rownames(NB1.cat.sum)
NB1.lower.molten <- melt(NB1.cat.sum, id = c("var"), measure.vars = c("2.5%"))
NB1.lower.molten <- rename(NB1.lower.molten, c(value = "lower"))
NB1.lower.molten <- NB1.lower.molten[, -2]
NB1.upper.molten <- melt(NB1.cat.sum, id = c("var"), measure.vars = c("97.5%"))
NB1.upper.molten <- rename(NB1.upper.molten, c(value = "upper"))
NB1.upper.molten <- NB1.upper.molten[, -2]
NB1.molten <- merge(NB1.lower.molten, NB1.upper.molten)
NB1.molten$match <- "Not Matched"
# Extract and melt quantiles for marginal posterior distributions (matched data set)
PB1.cat <- summary(PB1)
PB1.cat.sum <- as.data.frame(PB1.cat$summary)
PB1.cat.sum$var <- rownames(PB1.cat.sum)
PB1.lower.molten <- melt(PB1.cat.sum, id = c("var"), measure.vars = c("2.5%"))
PB1.lower.molten <- rename(PB1.lower.molten, c(value = "lower"))
PB1.lower.molten <- PB1.lower.molten[, -2]
PB1.upper.molten <- melt(PB1.cat.sum, id = c("var"), measure.vars = c("97.5%"))
PB1.upper.molten <- rename(PB1.upper.molten, c(value = "upper"))
PB1.upper.molten <- PB1.upper.molten[, -2]
PB1.molten <- merge(PB1.lower.molten, PB1.upper.molten)
PB1.molten$match <- "Matched"
estimates.b <- rbind(NB1.molten, PB1.molten)
estimates.b$method <- "Normal Bayes"
estimates <- rbind(estimates.ls, estimates.b)
# Remove Intercept
estimates <- subset(estimates, var != c("(Intercept)"))
estimates <- subset(estimates, var != c("sigma2"))
##### Create comparison plot
cols <- c("#B35B40", "#696969")
breaks <- c("pres_party", "house_dem_rep", "ExpenditureGDP", "recession", "DebtGDP", "time_to_election", "PotentialGDP", "DiscountRate2qChange", "UNRATE", "GlobalModelAfter 1996", "senate_dem_rep")
break.labels <- c("Dem. President", "Prop. House Dem.", "Gov. Expenditure (% GDP)", "Recession", "Gov. Debt (% GDP)", "Quarters Until Election", "Output Gap", "Discount Rate Change", "Unemployment Rate", "Global Model", "Prop. Senate Dem.")
est.plot <- ggplot(data = estimates, aes(x = reorder(var, lower), ymin = lower, ymax = upper, colour = match)) +
facet_grid(~ method) +
geom_linerange(size = 3, alpha = 0.6) +
scale_x_discrete(breaks = breaks, labels = break.labels) +
#scale_y_continuous(breaks = c(-1, 0.0, 0.5), labels = c("-1", "0", "0.5")) +
scale_color_manual(values = cols, name = "") +
geom_hline(aes(intercept= 0), linetype = "dotted") +
ylab("\nCoefficient Estimate") + xlab("") +
coord_flip() +
theme_bw(base_size = 11)
print(est.plot)
####################
# Greenbook MatchIt Analyses Coef Plots Compare
# Christopher Gandrud
# 3 August 2012
####################
#### Figures for ls Results Catapilar Plot ####
# .cat for catapilar graph
# .sum for summary
library(reshape)
### LS
# Extract and melt quantiles for marginal posterior distributions (not matched data set)
NL5.cat <- confint(NL5)
NL5.cat.sum <- as.data.frame(NL5.cat)
NL5.cat.sum$var <- rownames(NL5.cat.sum)
NL5.lower.molten <- melt(NL5.cat.sum, id = c("var"), measure.vars = c("2.5 %"))
NL5.lower.molten <- rename(NL5.lower.molten, c(value = "lower"))
NL5.lower.molten <- NL5.lower.molten[, -2]
NL5.upper.molten <- melt(NL5.cat.sum, id = c("var"), measure.vars = c("97.5 %"))
NL5.upper.molten <- rename(NL5.upper.molten, c(value = "upper"))
NL5.upper.molten <- NL5.upper.molten[, -2]
NL5.molten <- merge(NL5.lower.molten, NL5.upper.molten)
NL5.molten$match <- "Not Matched"
# Extract and melt quantiles for marginal posterior distributions (matched data set)
PL5.cat <- confint(PL5)
PL5.cat.sum <- as.data.frame(PL5.cat)
PL5.cat.sum$var <- rownames(PL5.cat.sum)
PL5.lower.molten <- melt(PL5.cat.sum, id = c("var"), measure.vars = c("2.5 %"))
PL5.lower.molten <- rename(PL5.lower.molten, c(value = "lower"))
PL5.lower.molten <- PL5.lower.molten[, -2]
PL5.upper.molten <- melt(PL5.cat.sum, id = c("var"), measure.vars = c("97.5 %"))
PL5.upper.molten <- rename(PL5.upper.molten, c(value = "upper"))
PL5.upper.molten <- PL5.upper.molten[, -2]
PL5.molten <- merge(PL5.lower.molten, PL5.upper.molten)
PL5.molten$match <- "Matched"
estimates.ls <- rbind(NL5.molten, PL5.molten)
estimates.ls$method <- "OLS"
#### Figures for normal.bayes Results Catapilar Plot ####
# .cat for catapilar graph
# .sum for summary
### Normal Bayes Models
# Extract and melt quantiles for marginal posterior distributions (not matched data set)
NB1.cat <- summary(NB1)
NB1.cat.sum <- as.data.frame(NB1.cat$summary)
NB1.cat.sum$var <- rownames(NB1.cat.sum)
NB1.lower.molten <- melt(NB1.cat.sum, id = c("var"), measure.vars = c("2.5%"))
NB1.lower.molten <- rename(NB1.lower.molten, c(value = "lower"))
NB1.lower.molten <- NB1.lower.molten[, -2]
NB1.upper.molten <- melt(NB1.cat.sum, id = c("var"), measure.vars = c("97.5%"))
NB1.upper.molten <- rename(NB1.upper.molten, c(value = "upper"))
NB1.upper.molten <- NB1.upper.molten[, -2]
NB1.molten <- merge(NB1.lower.molten, NB1.upper.molten)
NB1.molten$match <- "Not Matched"
# Extract and melt quantiles for marginal posterior distributions (matched data set)
PB1.cat <- summary(PB1)
PB1.cat.sum <- as.data.frame(PB1.cat$summary)
PB1.cat.sum$var <- rownames(PB1.cat.sum)
PB1.lower.molten <- melt(PB1.cat.sum, id = c("var"), measure.vars = c("2.5%"))
PB1.lower.molten <- rename(PB1.lower.molten, c(value = "lower"))
PB1.lower.molten <- PB1.lower.molten[, -2]
PB1.upper.molten <- melt(PB1.cat.sum, id = c("var"), measure.vars = c("97.5%"))
PB1.upper.molten <- rename(PB1.upper.molten, c(value = "upper"))
PB1.upper.molten <- PB1.upper.molten[, -2]
PB1.molten <- merge(PB1.lower.molten, PB1.upper.molten)
PB1.molten$match <- "Matched"
estimates.b <- rbind(NB1.molten, PB1.molten)
estimates.b$method <- "Normal Bayes"
estimates <- rbind(estimates.ls, estimates.b)
# Remove Intercept
estimates <- subset(estimates, var != c("(Intercept)"))
estimates <- subset(estimates, var != c("sigma2"))
##### Create comparison plot
cols <- c("#B35B40", "#696969")
breaks <- c("pres_party", "house_dem_rep", "ExpenditureGDP", "recession", "DebtGDP", "time_to_election", "PotentialGDP", "DiscountRate2qChange", "UNRATE", "GlobalModelAfter 1996")
break.labels <- c("Dem. President", "Gov. Expenditure (% GDP)", "Recession", "Gov. Debt (% GDP)", "Quarters Until Election", "Output Gap", "Discount Rate Change", "Unemployment Rate", "Global Model")
est.plot <- ggplot(data = estimates, aes(x = reorder(var, lower), ymin = lower, ymax = upper, colour = match)) +
facet_grid(~ method) +
geom_linerange(size = 3, alpha = 0.6) +
scale_x_discrete(breaks = breaks, labels = break.labels) +
#scale_y_continuous(breaks = c(-1, 0.0, 0.5), labels = c("-1", "0", "0.5")) +
scale_color_manual(values = cols, name = "") +
geom_hline(aes(intercept= 0), linetype = "dotted") +
ylab("\nCoefficient Estimate") + xlab("") +
coord_flip() +
theme_bw(base_size = 11)
print(est.plot)
###############
# Graph of simulated errors across all quarter estimates for model NL7 (A7 in the manuscript table).
# Uses non-matched data.
# Christopher Gandrud
# 19 November 2012
###############
## Load libraries
# library(devtools)
library(Zelig)
library(plyr)
# To run as a stand alone file. First, run the following files from the paper:
## source_url("http://bit.ly/NXdCpk")
#### Run two matching models ####
# One model is for estimates made 0 through 2 quarters before a given quarter. There is full data for these estimates.
# Another model is for estimates made 3 to 5 quarters before a given quarter. There is missing data for these estimates early in the observation period.
## Subset for complete (nonmissing) values ##
## Quarter 0 through 2
# matchit requires data sets to have no missing values
vars <- c("Quarter", "ElectionPeriod", "pres_party", "error.prop.deflator.q0",
"error.prop.deflator.q1", "error.prop.deflator.q2", "time_to_election",
"recession", "senate_dem_rep", "house_dem_rep", "DebtGDP", "ExpenditureGDP",
"PotentialGDP", "UNRATE", "GlobalModel", "FedFunds", "FedFunds2qChange",
"DiscountRate1qChange", "DiscountRate2qChange", "Chair"
)
CPIEstimates02 <- cpi.data[complete.cases(cpi.data[vars]),]
CPIEstimates02 <- CPIEstimates02[vars]
## Quarter 3 through 5
vars <- c("Quarter", "ElectionPeriod", "pres_party", "error.prop.deflator.q3",
"error.prop.deflator.q4", "error.prop.deflator.q5", "time_to_election",
"recession", "senate_dem_rep", "house_dem_rep", "DebtGDP", "ExpenditureGDP",
"PotentialGDP", "GlobalModel", "UNRATE", "FedFunds", "FedFunds2qChange",
"DiscountRate3qChange", "DiscountRate4qChange", "DiscountRate5qChange", "Chair"
)
CPIEstimates35 <- cpi.data[complete.cases(cpi.data[vars]),]
CPIEstimates35 <- CPIEstimates35[vars]
#### Run Parametric OLS Models ####
NL.02.0 <- zelig(error.prop.deflator.q0 ~ pres_party + time_to_election + recession + DebtGDP + ExpenditureGDP + PotentialGDP  + UNRATE + GlobalModel, model = "ls", data = CPIEstimates02, cite = FALSE)
NL.02.1 <- zelig(error.prop.deflator.q1 ~ pres_party + time_to_election + recession + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate1qChange + UNRATE + GlobalModel, model = "ls", data = subset(CPIEstimates02, time_to_election != 15), cite = FALSE)
NL.02.2 <- zelig(error.prop.deflator.q2 ~ pres_party + time_to_election + recession + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate2qChange + UNRATE + GlobalModel, model = "ls", data = subset(CPIEstimates02, !(time_to_election %in% c(15, 14))), cite = FALSE)
NL.35.3 <- zelig(error.prop.deflator.q3 ~ pres_party + time_to_election + recession + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate3qChange + UNRATE + GlobalModel, model = "ls", data = CPIEstimates35, cite = FALSE)
NL.35.4 <- zelig(error.prop.deflator.q4 ~ pres_party + time_to_election + recession + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate4qChange + UNRATE + GlobalModel, model = "ls", data = subset(CPIEstimates35 , !(time_to_election %in% c(15, 14, 13, 12))), cite = FALSE)
NL.35.5 <- zelig(error.prop.deflator.q5 ~ pres_party + time_to_election + recession + DebtGDP + ExpenditureGDP + PotentialGDP + DiscountRate5qChange + UNRATE + GlobalModel, model = "ls", data = subset(CPIEstimates35 , !(time_to_election %in% c(15, 14, 13, 12, 11))), cite = FALSE)
#### Simulate Expected Values & Melt ####
# Ranges of fitted values
pres_party.r <- c(0, 1)
## Quarter 0 ##
# Set fitted values, all variables other than pres_party set to their means
ModelParty0 <- setx(NL.02.0, pres_party = pres_party.r)
# Simulate quantities of interest
ModelParty.sim0 <- sim(NL.02.0, x = ModelParty0)
# Extract expected values from simulations
ModelParty.ev0 <- ModelParty.sim0$qi
ModelParty.ev0 <-data.frame(ModelParty.ev0$ev)
names(ModelParty.ev0) <- c("Rep", "Dem")
ModelParty.ev0 <- melt(ModelParty.ev0, measure = 1:2)
ModelParty.ev0$variable <- factor(ModelParty.ev0$variable)
ModelParty.ev0$QrtEstimate <- 0
# Remove values outside of the 2.5% and 97.5% quantiles
# Find 2.5% and 97.5% quantiles for HRCC
ModelParty.evPer0 <- ddply(ModelParty.ev0, .(variable), transform, Lower = value < quantile(value, c(0.025)))
ModelParty.evPer0 <- ddply(ModelParty.evPer0, .(variable), transform, Upper = value > quantile(value, c(0.975)))
# Remove variables outside of the middle 95%
ModelParty.evPer0 <- subset(ModelParty.evPer0, Lower == FALSE & Upper == FALSE)
## Quarter 1 ##
# Set fitted values, all variables other than pres_party set to their means
ModelParty1 <- setx(NL.02.1, pres_party = pres_party.r)
# Simulate quantities of interest
ModelParty.sim1 <- sim(NL.02.1, x = ModelParty1)
# Extract expected values from simulations
ModelParty.ev1 <- ModelParty.sim1$qi
ModelParty.ev1 <-data.frame(ModelParty.ev1$ev)
names(ModelParty.ev1) <- c("Rep", "Dem")
ModelParty.ev1 <- melt(ModelParty.ev1, measure = 1:2)
ModelParty.ev1$variable <- factor(ModelParty.ev1$variable)
ModelParty.ev1$QrtEstimate <- 1
# Remove values outside of the 2.5% and 97.5% quantiles
# Find 2.5% and 97.5% quantiles for HRCC
ModelParty.evPer1 <- ddply(ModelParty.ev1, .(variable), transform, Lower = value < quantile(value, c(0.025)))
ModelParty.evPer1 <- ddply(ModelParty.evPer1, .(variable), transform, Upper = value > quantile(value, c(0.975)))
# Remove variables outside of the middle 95%
ModelParty.evPer1 <- subset(ModelParty.evPer1, Lower == FALSE & Upper == FALSE)
## Quarter 2 ##
# Set fitted values, all variables other than pres_party set to their means
ModelParty2 <- setx(NL.02.2, pres_party = pres_party.r)
# Simulate quantities of interest
ModelParty.sim2 <- sim(NL.02.2, x = ModelParty2)
# Extract expected values from simulations
ModelParty.ev2 <- ModelParty.sim2$qi
ModelParty.ev2 <-data.frame(ModelParty.ev2$ev)
names(ModelParty.ev2) <- c("Rep", "Dem")
ModelParty.ev2 <- melt(ModelParty.ev2, measure = 1:2)
ModelParty.ev2$variable <- factor(ModelParty.ev2$variable)
ModelParty.ev2$QrtEstimate <- 2
# Remove values outside of the 2.5% and 97.5% quantiles
# Find 2.5% and 97.5% quantiles for HRCC
ModelParty.evPer2 <- ddply(ModelParty.ev2, .(variable), transform, Lower = value < quantile(value, c(0.025)))
ModelParty.evPer2 <- ddply(ModelParty.evPer2, .(variable), transform, Upper = value > quantile(value, c(0.975)))
# Remove variables outside of the middle 95%
ModelParty.evPer2 <- subset(ModelParty.evPer2, Lower == FALSE & Upper == FALSE)
## Save estimates to be used in the in-text equations
write.csv(ModelParty.evPer2, "cache/SimQrt2.csv")
## Quarter 3 ##
# Set fitted values, all variables other than pres_party set to their means
ModelParty3 <- setx(NL.35.3, pres_party = pres_party.r)
# Simulate quantities of interest
ModelParty.sim3 <- sim(NL.35.3, x = ModelParty3)
# Extract expected values from simulations
ModelParty.ev3 <- ModelParty.sim3$qi
ModelParty.ev3 <-data.frame(ModelParty.ev3$ev)
names(ModelParty.ev3) <- c("Rep", "Dem")
ModelParty.ev3 <- melt(ModelParty.ev3, measure = 1:2)
ModelParty.ev3$variable <- factor(ModelParty.ev3$variable)
ModelParty.ev3$QrtEstimate <- 3
# Remove values outside of the 2.5% and 97.5% quantiles
# Find 2.5% and 97.5% quantiles for HRCC
ModelParty.evPer3 <- ddply(ModelParty.ev3, .(variable), transform, Lower = value < quantile(value, c(0.025)))
ModelParty.evPer3 <- ddply(ModelParty.evPer3, .(variable), transform, Upper = value > quantile(value, c(0.975)))
# Remove variables outside of the middle 95%
ModelParty.evPer3 <- subset(ModelParty.evPer3, Lower == FALSE & Upper == FALSE)
## Quarter 4 ##
# Set fitted values, all variables other than pres_party set to their means
ModelParty4 <- setx(NL.35.4, pres_party = pres_party.r)
# Simulate quantities of interest
ModelParty.sim4 <- sim(NL.35.4, x = ModelParty4)
# Extract expected values from simulations
ModelParty.ev4 <- ModelParty.sim4$qi
ModelParty.ev4 <-data.frame(ModelParty.ev4$ev)
names(ModelParty.ev4) <- c("Rep", "Dem")
ModelParty.ev4 <- melt(ModelParty.ev4, measure = 1:2)
ModelParty.ev4$variable <- factor(ModelParty.ev4$variable)
ModelParty.ev4$QrtEstimate <- 4
# Remove values outside of the 2.5% and 97.5% quantiles
# Find 2.5% and 97.5% quantiles for HRCC
ModelParty.evPer4 <- ddply(ModelParty.ev4, .(variable), transform, Lower = value < quantile(value, c(0.025)))
ModelParty.evPer4 <- ddply(ModelParty.evPer4, .(variable), transform, Upper = value > quantile(value, c(0.975)))
# Remove variables outside of the middle 95%
ModelParty.evPer4 <- subset(ModelParty.evPer4, Lower == FALSE & Upper == FALSE)
## Quarter 5 ##
# Set fitted values, all variables other than pres_party set to their means
ModelParty5 <- setx(NL.35.5, pres_party = pres_party.r)
# Simulate quantities of interest
ModelParty.sim5 <- sim(NL.35.5, x = ModelParty5)
# Extract expected values from simulations
ModelParty.ev5 <- ModelParty.sim5$qi
ModelParty.ev5 <-data.frame(ModelParty.ev5$ev)
names(ModelParty.ev5) <- c("Rep", "Dem")
ModelParty.ev5 <- melt(ModelParty.ev5, measure = 1:2)
ModelParty.ev5$variable <- factor(ModelParty.ev5$variable)
ModelParty.ev5$QrtEstimate <- 5
# Remove values outside of the 2.5% and 97.5% quantiles
# Find 2.5% and 97.5% quantiles for HRCC
ModelParty.evPer5 <- ddply(ModelParty.ev5, .(variable), transform, Lower = value < quantile(value, c(0.025)))
ModelParty.evPer5 <- ddply(ModelParty.evPer5, .(variable), transform, Upper = value > quantile(value, c(0.975)))
# Remove variables outside of the middle 95%
ModelParty.evPer5 <- subset(ModelParty.evPer5, Lower == FALSE & Upper == FALSE)
ModelPartyAll <- rbind(ModelParty.evPer0, ModelParty.evPer1,
ModelParty.evPer2, ModelParty.evPer3, ModelParty.evPer4, ModelParty.evPer5)
# Create objects recording the number of observations used in each model.
O0 <- nrow(CPIEstimates02)
O1 <- nrow(subset(CPIEstimates02, time_to_election != 15))
O2 <- nrow(subset(CPIEstimates02, !(time_to_election %in% c(15, 14))))
O3 <- nrow(CPIEstimates35)
O4 <- nrow(subset(CPIEstimates35 , !(time_to_election %in% c(15, 14, 13, 12))))
O5 <- nrow(subset(CPIEstimates35 , !(time_to_election %in% c(15, 14, 13, 12, 11))))
#### Plot expected values ####
# Partisan colours, initially run in ErrorPresPartyGraph.R
partisan.colors = c("Rep" = "#C42B00", "Dem" = "#2259B3")
# Create plot
ModelPartyPlotAll <- ggplot(data = ModelPartyAll, aes(QrtEstimate, value)) +
geom_hline(aes(intercept= 0), linetype = "dotted") +
stat_summary(fun.y = mean, geom = "line", aes(group = variable), colour = "grey70") +
geom_point(aes(colour = variable), alpha = I(0.05), size = 3) +
scale_color_manual(values = partisan.colors,
name = "") +
scale_x_reverse() +
scale_y_continuous(breaks = c(-0.5, -0.25, 0, 0.25, 0.34),
labels = c(-0.5, -0.25, 0, 0.25, "N =")) +
xlab("\n Age of Forecast in Quarters") +
ylab("Expected Standardized Forecast Error \n") +
annotate(geom = "text", x = 5, y = 0.37,
label = O5, size = 4) +
annotate(geom = "text", x = 4, y = 0.37,
label = O4, size = 4) +
annotate(geom = "text", x = 3, y = 0.37,
label = O3, size = 4) +
annotate(geom = "text", x = 2, y = 0.37,
label = O2, size = 4) +
annotate(geom = "text", x = 1, y = 0.37,
label = O1, size = 4) +
annotate(geom = "text", x = 0, y = 0.37,
label = O0, size = 4) +
guides(colour = guide_legend(override.aes = list(alpha = 1), reverse = TRUE)) +
theme_bw(base_size = 12)
print(ModelPartyPlotAll)
break.labels <- c("Dem. President", "Gov. Expenditure (% GDP)", "Recession", "Gov. Debt (% GDP)", "Quarters Until Election", "Output Gap", "Discount Rate Change", "Unemployment Rate", "Global Model")
breaks <- c("pres_party", "ExpenditureGDP", "recession", "DebtGDP", "time_to_election", "PotentialGDP", "DiscountRate2qChange", "UNRATE", "GlobalModelAfter 1996")
break.labels <- c("Dem. President", "Gov. Expenditure (% GDP)", "Recession", "Gov. Debt (% GDP)", "Quarters Until Election", "Output Gap", "Discount Rate Change", "Unemployment Rate", "Global Model")
cols <- c("#B35B40", "#696969")
breaks <- c("pres_party", "ExpenditureGDP", "recession", "DebtGDP", "time_to_election", "PotentialGDP", "DiscountRate2qChange", "UNRATE", "GlobalModelAfter 1996")
break.labels <- c("Dem. President", "Gov. Expenditure (% GDP)", "Recession", "Gov. Debt (% GDP)", "Quarters Until Election", "Output Gap", "Discount Rate Change", "Unemployment Rate", "Global Model")
est.plot <- ggplot(data = estimates, aes(x = reorder(var, lower), ymin = lower, ymax = upper, colour = match)) +
facet_grid(~ method) +
geom_linerange(size = 3, alpha = 0.6) +
scale_x_discrete(breaks = breaks, labels = break.labels) +
#scale_y_continuous(breaks = c(-1, 0.0, 0.5), labels = c("-1", "0", "0.5")) +
scale_color_manual(values = cols, name = "") +
geom_hline(aes(intercept= 0), linetype = "dotted") +
ylab("\nCoefficient Estimate") + xlab("") +
coord_flip() +
theme_bw(base_size = 11)
print(est.plot)
library(reshape)
library(xtable)
# Get the model summary
NB1Summary <- summary(NB1)
NB1Summary <- data.frame(NB1Summary$summary)
# Clean up variable names
library(reshape)
NB1Summary <- rename(NB1Summary, c(X2.5. = "2.5%"))
NB1Summary <- rename(NB1Summary, c(X50. = "50%"))
NB1Summary <- rename(NB1Summary, c(X97.5. = "97.5%"))
# Clean up Covariate Labels
Variables <- c("Intercept", "Pres. Party ID", "Recession", "Qtr. to Election", "Debt/GDP",  "Expenditure/GDP", "Output Gap", "Discount Rate Change", "Unemployment Rate", "Global Model", "sigma2")
NB1Summary <- cbind(Variables, NB1Summary)
print.xtable(xtable(NB1Summary, caption = "Bayesian Normal Linear Regression Estimation of Covariate Effects on 2 Qtr. Inflation Forecast Error (non-matched data set)", label = "OutputNB", align = c("l", "l", "c", "c", "c", "c", "c")), caption.placement = getOption("xtable.caption.placement", "top"), size = getOption("xtable.size", "small"), include.rownames = FALSE)
PB1Summary <- summary(PB1)
PB1Summary <- data.frame(PB1Summary$summary)
# Clean up variable names
# Clean up variable names
PB1Summary <- rename(PB1Summary, c(X2.5. = "2.5%"))
PB1Summary <- rename(PB1Summary, c(X50. = "50%"))
PB1Summary <- rename(PB1Summary, c(X97.5. = "97.5%"))
PB1Summary <- cbind(Variables, PB1Summary)
print.xtable(xtable(PB1Summary, caption = "Bayesian Normal Linear Regression Estimation of Covariate Effects on 2 Qtr. Inflation Forecast Error (Matched by President's Party ID variable)", label = "OutputPB", align = c("l", "l", "c", "c", "c", "c", "c")), caption.placement = getOption("xtable.caption.placement", "top"), size = getOption("xtable.size", "small"), include.rownames = FALSE)
grid.arrange(errors.employ.time, ErrorOrthogScatter, ncol = 2)
# Load required packages
library(gridExtra)
# Pres*Election Interaction
ElectInterURL <- "https://raw.github.com/christophergandrud/GreenBook/master/Analysis/PresElectionInteract.R"
source_url(ElectInterURL)
# Pres*Congress Interaction
CongInterURL <- "https://raw.github.com/christophergandrud/GreenBook/master/Analysis/PresCongressInteractions.R"
source_url(CongInterURL)
# Combine graphs
InterCombine <- grid.arrange(ElectionInteractionPlot, PartyInteractionPlot, ncol = 2)
print(InterCombine)
# Create unempoyment error variable and graph
PartisanErrorUnemployURL <- "https://raw.github.com/christophergandrud/GreenBook/master/Analysis/DiagnosticTests/OrthogonalUnemploymentError.R"
source_url(PartisanErrorUnemployURL)
# Create unempoyment error variable and graph
PartisanErrorUnemployURL <- "https://raw.github.com/christophergandrud/GreenBook/master/Analysis/DiagnosticTests/OrthogonalUnemploymentError.R"
source_url(PartisanErrorUnemployURL)
library(apsrtable)
# Model names & Coefficient Names -- Use A for all non-mathced models
ModelNamesA <- c("A1", "A2", "A3", "A4", "A5", "A6", "A7", "A8", "A9", "A10", "A11", "A12", "A13")
CoefNamesA <- c("Intercept", "Recession", "Debt/GDP", "Expenditure/GDP", "Output Gap", "Discount Rate Change", "Unemployment Rate", "Qtr. to Election", "Election Period", "Pres. Party ID", "Senate Dem/Rep", "House Dem/Rep", "FRB/GlobalModel", "Qrt. Election2", "Pres*Qrt. Election2", "Burns", "Greenspan", "Martin", "Miller", "Volcker", "Pres*House", "Pres*Senate", "House*Senate", "Pres*House*Senate")
# Table of non-matched models with ls
apsrtable(NL1, NL2, NL3, NL4, NL5, NL6, NL7, NL8, NL9, NL10, NL11, NL12, NL13,
digits = 1, order = ,
Sweave = TRUE,
stars = "default",
model.names = ModelNamesA,
coef.names = CoefNamesA
)
# Model names & Coefficient Names -- Use C for all ElectionPeriod mathced models
ModelNamesC <- c("C1", "C2", "C3", "C4", "C5", "C6", "C7", "C8", "C9", "C10", "C11", "C12")
CoefNamesC <- c("Intercept", "Recession", "Debt/GDP", "Expenditure/GDP", "Output Gap", "Discount Rate Change", "Unemployment Rate", "Qtr. to Election", "Election Period", "Pres. Party ID", "Senate Dem/Rep", "House Dem/Rep", "FRB/GlobalModel", "Qrt. Election2", "Pres*Qrt. Election2", "Pres*House", "Pres*Senate", "House*Senate", "Pres*House*Senate")
# Table of non-matched models with ls
apsrtable(PL1, PL2, PL3, PL4, PL5, PL6, PL7, PL8, PL9, PL10, PL11, PL12,
digits = 1,
Sweave = TRUE,
stars = "default",
model.names = ModelNamesC,
coef.names = CoefNamesC
)
# Model names & Coefficient Names -- Use C for all ElectionPeriod mathced models
ModelNamesC <- c("C1", "C2", "C3", "C4", "C5", "C6", "C7", "C8", "C9", "C10", "C11", "C12")
CoefNamesC <- c("Intercept", "Recession", "Debt/GDP", "Expenditure/GDP", "Output Gap", "Discount Rate Change", "Unemployment Rate", "Qtr. to Election", "Election Period", "Pres. Party ID", "Senate Dem/Rep", "House Dem/Rep", "FRB/GlobalModel", "Qrt. Election2", "Pres*Qrt. Election2", "Pres*House", "Pres*Senate", "House*Senate", "Pres*House*Senate")
# Table of non-matched models with ls
apsrtable(PL1, PL2, PL3, PL4, PL5, PL6, PL7, PL8, PL9, PL10, PL11, PL12,
digits = 1,
Sweave = TRUE,
stars = "default",
model.names = ModelNamesC,
coef.names = CoefNamesC
)
# Load packages
library(reshape)
library(xtable)
# Get the model summary
NB1Summary <- summary(NB1)
NB1Summary <- data.frame(NB1Summary$summary)
# Clean up variable names
NB1Summary <- rename(NB1Summary, c(X2.5. = "2.5%"))
NB1Summary <- rename(NB1Summary, c(X50. = "50%"))
NB1Summary <- rename(NB1Summary, c(X97.5. = "97.5%"))
# Clean up Covariate Labels
Variables <- c("Intercept", "Pres. Party ID", "Recession", "Qtr. to Election", "Debt/GDP",  "Expenditure/GDP", "Output Gap", "Discount Rate Change", "Unemployment Rate", "Global Model", "sigma2")
NB1Summary <- cbind(Variables, NB1Summary)
print.xtable(xtable(NB1Summary, caption = "Bayesian Normal Linear Regression Estimation of Covariate Effects on 2 Qtr. Inflation Forecast Error (non-matched data set)", label = "OutputNB", align = c("l", "l", "c", "c", "c", "c", "c")), caption.placement = getOption("xtable.caption.placement", "top"), size = getOption("xtable.size", "small"), include.rownames = FALSE)
# Get the model summary
PB1Summary <- summary(PB1)
PB1Summary <- data.frame(PB1Summary$summary)
# Clean up variable names
PB1Summary <- rename(PB1Summary, c(X2.5. = "2.5%"))
PB1Summary <- rename(PB1Summary, c(X50. = "50%"))
PB1Summary <- rename(PB1Summary, c(X97.5. = "97.5%"))
PB1Summary <- cbind(Variables, PB1Summary)
print.xtable(xtable(PB1Summary, caption = "Bayesian Normal Linear Regression Estimation of Covariate Effects on 2 Qtr. Inflation Forecast Error (Matched by President's Party ID variable)", label = "OutputPB", align = c("l", "l", "c", "c", "c", "c", "c")), caption.placement = getOption("xtable.caption.placement", "top"), size = getOption("xtable.size", "small"), include.rownames = FALSE)
plot(cpi.matched.party, type = "jitter", interactive = FALSE)
# Print unemployment error orthogonal graphs
grid.arrange(errors.employ.time, ErrorOrthogScatter, ncol = 2)
