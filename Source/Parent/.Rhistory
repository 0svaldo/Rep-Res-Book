geom_text(aes(label = Freq)) +
scale_fill_gradient2(low = "white", high = "red", name = "") +
xlab("\nAfter") + ylab("Before\n") +
theme_bw()
print(StateTablePlot)
rstudio::viewData(AMCLag)
M1 <- crrc(ftime = AMCLag$year,
fstatus = AMCLag$AMCStatus,
cov1 = AMCLag$UDS,
cluster = AMCLag$country)
summary(M1)
print(M1)
M1$coef
M1 <- crrc(ftime = AMCLag$year,
fstatus = AMCLag$AMCStatus,
cov1 = AMCLag$UDS,
failcode = 2
cluster = AMCLag$country)
M1 <- crrc(ftime = AMCLag$year,
fstatus = AMCLag$AMCStatus,
cov1 = AMCLag$UDS,
failcode = 2,
cluster = AMCLag$country)
M1$coef
M1 <- crrc(ftime = AMCLag$year,
fstatus = AMCLag$AMCStatus,
cov1 = AMCLag$UDS,
failcode = 3,
cluster = AMCLag$country)
M1$coef
plot(M1)
?with
with(AMCLag, {
M1 <- crrc(ftime = AMCLag$year,
fstatus = AMCLag$AMCStatus,
cov1 = AMCLag$UDS,
failcode = 3,
cluster = AMCLag$country)
})
M1$coef
with(AMCLag, {
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = UDS,
failcode = 3,
cluster = country)
})
M1$coef
fix(`M1`)
with(AMCLag, {
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = UDS,
failcode = 3,
strata = country)
})
M1$coef
rm(M1)
with(AMCLag, {
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = UDS,
failcode = 3,
strata = country)
})
M1$coef
M1$coef
M1$coef
attach(AMCLag)
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = UDS,
failcode = 3,
strata = country)
detach(AMCLag)
M1$coef
plot.cuminc(M1)
library(cmprsk)
install.packages(cmprsk)
install.packages("cmprsk")
library(cmprsk)
plot.cuminc(M1)
M1Predict <- predict(M1, c(-5, 0, 5, 10))
rstudio::viewData(AMCLag)
attach(AMCLag)
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = c(UDS, SystemicCrisisLag3),
failcode = 3,
strata = country)
detach(AMCLag)
?crrs
attach(AMCLag)
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(UDS, SystemicCrisisLag3),
failcode = 3,
strata = country)
detach(AMCLag)
M1$coef
M1Predict <- predict(M1, c(-5, 0, 5, 10))
attach(AMCLag)
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(UDS, SystemicCrisisLag3),
failcode = 3,
cluster = country)
detach(AMCLag)
M1$coef
M1Predict <- predict(M1, c(-5, 0, 5, 10))
attach(AMCLag)
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(UDS, SystemicCrisisLag3),
failcode = 2,
cluster = country)
detach(AMCLag)
M1$coef
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
attach(AMCLag)
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, SystemicCrisisLag3),
attach(AMCLag)
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, SystemicCrisisLag3),
failcode = 2,
cluster = country)
detach(AMCLag)
M1$coef
attach(AMCLag)
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, SystemicCrisisLag3),
failcode = 3,
cluster = country)
detach(AMCLag)
M1$coef
fix(`M1`)
summary(M1)
attach(AMCLag)
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, SystemicCrisisLag3),
failcode = 2,
cluster = country)
detach(AMCLag)
summary(M1)
attach(AMCLag)
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, SystemicCrisisLag3),
failcode = 2,
cencode = 1,
cluster = country)
detach(AMCLag)
summary(M1)
attach(AMCLag)
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(UDS, SystemicCrisisLag3),
failcode = 2,
cluster = country)
detach(AMCLag)
summary(M1)
attach(AMCLag)
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(UDS, SystemicCrisisLag3),
failcode = 2,
cluster = country)
detach(AMCLag)
summary(M1)
rm(M1)
attach(AMCLag)
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(UDS, SystemicCrisisLag3),
failcode = 2,
cluster = country)
detach(AMCLag)
summary(M1)
attach(AMCLag)
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(UDS, SystemicCrisisLag3),
failcode = 3,
cluster = country)
detach(AMCLag)
summary(M1)
rm(M1)
attach(AMCLag)
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(UDS, SystemicCrisisLag3),
failcode = 3,
ctype = 2
cluster = country)
attach(AMCLag)
attach(AMCLag)
detach(AMCLag)
attach(AMCLag)
detach(AMCLag)
detach(AMCLag)
attach(AMCLag)
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(UDS, SystemicCrisisLag3),
failcode = 3,
ctype = 2,
strata = country)
detach(AMCLag)
M1$coef
source_url("https://raw.github.com/christophergandrud/amcData/master/SourceCode/Paper1Source/LoadRPackages.R")
source_url("https://raw.github.com/christophergandrud/amcData/master/SourceCode/Paper1Source/PaperDataLoadClean.R")
search()
# Create package list
PackagesCited <- c("animation",
"apsrtable",
"devtools",
"formatR",
"ggplot2",
"googleVis",
"httr",
"knitr",
"knitcitations",
"markdown",
"openair",
"quantmod",
"RCurl",
"slidify",
"texreg",
"tools",
"twitteR",
"WDI",
"xtable",
"Zelig")
# Write citations to bibtex file
write_bib(PackagesCited,
file = "/git_repositories/Rep-Res-Book/Source/rep-res-PackagesCited.bib")
# Remove conflicting packages
detach(package:twitteR)
detach(package:rjson)
detach(package:twitteR)
?write_bib
library(splines)
pkg <- "package:splines"
detach(pkg, character.only = TRUE)
pkg <- "package:twitteR"
detach(pkg, character.only = TRUE)
search()
# Install & load required packages
## Based on https://gist.github.com/3710171
## See also http://bit.ly/PbabKd
doInstall <- FALSE  # Change to FALSE if you don't want packages installed.
toInstall <- c("animation",
"apsrtable",
"devtools",
"formatR",
"ggplot2",
"googleVis",
"knitr",
"knitcitations",
"markdown",
"openair",
"quantmod",
"RCurl",
"texreg",
"tools",
"treebase",
"WDI",
"xtable",
"Zelig")
if(doInstall){install.packages(toInstall, repos = "http://cran.us.r-project.org")}
lapply(toInstall, library, character.only = TRUE)
# Write citations to bibtex file
write_bib(toInstall,
file = "/git_repositories/Rep-Res-Book/Source/rep-res-PackagesCited.bib")
# Remove conflicting packages
detach(package:twitteR)
detach(package:rjson)
# Install & load required packages
## Based on https://gist.github.com/3710171
## See also http://bit.ly/PbabKd
doInstall <- FALSE  # Change to FALSE if you don't want packages installed.
toInstall <- c("animation",
"apsrtable",
"devtools",
"formatR",
"ggplot2",
"googleVis",
"knitr",
"knitcitations",
"markdown",
"openair",
"quantmod",
"RCurl",
"texreg",
"tools",
"treebase",
"twitteR",
"WDI",
"xtable",
"Zelig")
if(doInstall){install.packages(toInstall, repos = "http://cran.us.r-project.org")}
lapply(toInstall, library, character.only = TRUE)
# Write citations to bibtex file
write_bib(toInstall,
file = "/git_repositories/Rep-Res-Book/Source/rep-res-PackagesCited.bib")
# Remove conflicting packages
detach(package:twitteR)
detach(package:rjson)
# Install & load required packages
## Based on https://gist.github.com/3710171
## See also http://bit.ly/PbabKd
doInstall <- FALSE  # Change to FALSE if you don't want packages installed.
toInstall <- c("animation",
"apsrtable",
"devtools",
"formatR",
"ggplot2",
"googleVis",
"knitr",
"knitcitations",
"markdown",
"openair",
"quantmod",
"RCurl",
"texreg",
"tools",
"treebase",
"twitteR",
"WDI",
"xtable",
"Zelig")
if(doInstall){install.packages(toInstall, repos = "http://cran.us.r-project.org")}
lapply(toInstall, library, character.only = TRUE)
# Write citations to bibtex file
write_bib(toInstall,
file = "/git_repositories/Rep-Res-Book/Source/rep-res-PackagesCited.bib")
# Remove conflicting packages
detach(package:twitteR)
detach(package:rjson)
# Change working directory to /Rep-Res-Book/Writing_Setup/
setwd("/git_repositories/Rep-Res-Book/Writing_Setup/")
# Knit README file
knit(input = "README.Rmd", output = "/git_repositories/Rep-Res-Book/README.md")
knit2pdf(input = "Rep-Res-Parent.Rnw")
ParentDirectory <- "/git_repositories/Rep-Res-Book/Source/Parent/"
setwd(ParentDirectory)
# Compile the book's parent document
knit2pdf(input = "Rep-Res-Parent.Rnw")
search()
library(help=TTR)
AgMethaneData <- WDI(indicator = "EN.ATM.METH.AG.ZS")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
AgMethaneData <- WDI(indicator = "EN.ATM.METH.AG.ZS")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
help(":::")
detach("package:WDI", unload=TRUE)
AgMethaneData <- WDI::WDI(indicator = "EN.ATM.METH.AG.ZS")
AgMethaneData <- WDI:::WDI(indicator = "EN.ATM.METH.AG.ZS")
library(WDI)
AgMethaneData <- WDI(indicator = "EN.ATM.METH.AG.ZS")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
?textConnection
library(RCurl)
# Pull data from the internet
DataUrl <- getURL(UrlAddress)
DataUrl
fix(DataUrl)
?getURL
Wiki <- getURL("http://en.wikipedia.org/wiki/Parsing")
fix(Wiki)
fix(DataUrl)
fix(Wiki)
knit2pdf(input = "Rep-Res-Parent.Rnw")
library(XML)
library(RJSONIO)
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
?regex
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
view(Data)
?view
View(Data)
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
rstudio::viewData(AgMethaneData)
# Compile the book's parent document
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
library(reshape2)
?cast
data(cars)
melt(cars)
data(rivers)
fix(rivers)
Pres <- read.csv("http://www.ic.nhs.uk/catalogue/PUB02342/prim-care-trus-pres-data-apr-jun-2011-dat.csv")
Pres <- read.csv("http://www.ic.nhs.uk/catalogue/PUB02342/prim-care-trus-pres-data-apr-jun-2011-dat.csv")
Pres <- read.csv("http://www.nhm.ac.uk/transparency/hr/2012-03-31-NHM-junior-data.csv")
knit2pdf(input = "Rep-Res-Parent.Rnw")
?melt
Melted <- melt(WidePop, 2:4)
rstudio::viewData(Melted)
rstudio::viewData(WidePop)
Melted <- melt(WidePop, variable.name="variables")
rstudio::viewData(Melted)
Melted <- melt(WidePop, measure.vars="variables")
Melted <- melt(WidePop, measure.vars=c("variable")
Melted <- melt(WidePop, measure.vars=c("variable"))
Melted <- melt(WidePop, measure.vars=c("variable"))
variable <- c("population")
Albania <- c("2.8")
Botswana <- c("2.0")
Cambodia <- c("14.8")
WidePop <- data.frame(variables, Albania, Botswana, Cambodia, stringsAsFactors = FALSE)
Melted <- melt(WidePop, measure.vars=c("variable"))
variable <- c("population")
Albania <- c("2.8")
Botswana <- c("2.0")
Cambodia <- c("14.8")
WidePop <- data.frame(variables, Albania, Botswana, Cambodia, stringsAsFactors = FALSE)
rstudio::viewData(WidePop)
variable <- c("population")
Albania <- c("2.8")
Botswana <- c("2.0")
Cambodia <- c("14.8")
WidePop <- data.frame(variable, Albania, Botswana, Cambodia, stringsAsFactors = FALSE)
Melted <- melt(WidePop, measure.vars=c("variable"))
rstudio::viewData(Melted)
Melted <- melt(WidePop, measure.vars=2:4)
rstudio::viewData(Melted)
Melted <- melt(WidePop, measure.vars=2:4, variable.name="variable")
rstudio::viewData(Melted)
knit2pdf(input = "Rep-Res-Parent.Rnw")
variable <- c("population", "test")
Albania <- c(2.8, 1)
Botswana <- c(2.0, 1)
Cambodia <- c(14.8, 1)
WidePop <- data.frame(variable, Albania, Botswana, Cambodia, stringsAsFactors = FALSE)
Melted <- melt(WidePop, measure.vars=2:4, variable.name="variable")
rstudio::viewData(Melted)
Melted <- melt(WidePop, id.vars=2:4, variable.name="variable")
rstudio::viewData(Melted)
Melted <- melt(WidePop, id.vars=2:4, measure.vars="variable")
rstudio::viewData(Melted)
Melted <- cast(WidePop, id.vars=2:4, measure.vars="variable")
?cast
Melted <- t(WidePop, id.vars=2:4, measure.vars="variable")
Melted <- t(WidePop)
rstudio::viewData(Melted)
knit2pdf(input = "Rep-Res-Parent.Rnw")
rstudio::viewData(LongPop)
Melted <- data.frame(Melted)
rstudio::viewData(Melted)
?data.frame
rstudio::viewData(Melted)
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
mydata <- read.csv("http://dl.dropbox.com/u/20427285/Data2.dta")
library(foreign)
mydata <- read.dta("~/Desktop/Data2.dta")
mydata <- read.dta("~/Desktop/Data2.dta")
rstudio::viewData(mydata)
group2 <- subset(mydata, group2 == 1)
M1 <-  coxph(Surv(begin, end, Partisan_Spell) ~ POLCONIII + PC3_BC + BEGINbc + cumulative_crisis + polity2 + Growth + strata(new_count_ps) + cluster(imfcode), robust = TRUE, na.action=na.exclude, data=group2, control=coxph.control(eps=1e-09, iter.max=100, outer.max=100))
library(survival)
library(MSBVAR)
M1 <-  coxph(Surv(begin, end, Partisan_Spell) ~ POLCONIII + PC3_BC + BEGINbc + cumulative_crisis + polity2 + Growth + strata(new_count_ps) + cluster(imfcode), robust = TRUE, na.action=na.exclude, data=group2, control=coxph.control(eps=1e-09, iter.max=100, outer.max=100))
summary(M1)
M2 <-  coxph(Surv(begin, end, Partisan_Spell) ~ pspline(POLCONIII) + PC3_BC + BEGINbc + pspline(cumulative_crisis) + pspline(polity2) + pspline(Growth) + strata(new_count_ps) + cluster(imfcode), robust = TRUE, na.action=na.exclude, data=group2, control=coxph.control(eps=1e-09, iter.max=100, outer.max=100))
summary(M2)
