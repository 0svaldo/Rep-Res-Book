annotate("text", x = 25, y = 0.01, label = "-1 SD", colour = "blue") +
annotate("text", x = 75, y = 0.01, label = "+1 SD", colour = "blue") +
xlab("\n Simulated Data") + ylab("Density\n") + ggtitle("Density Plot for Simulated Data\n") +
theme_bw()
# Add zero variable so that the shaded area goes down to 0
Lower$Zero <- 0
Upper$Zerp <- 0
# Create density plot
ggplot(Normal, aes(x = Normal)) +
geom_density() +
geom_ribbon(data = Lower, aes(x = XLower, ymax = YLower, ymin = Zero), fill = "blue", alpha = 0.4) +
geom_ribbon(data = Upper, aes(x = XLower, ymax = YLower, ymin = Zero), fill = "blue", alpha = 0.4) +
geom_vline(xintercept = 50, colour = "red", linetype = "longdash") +
annotate("text", x = 25, y = 0.01, label = "-1 SD", colour = "blue") +
annotate("text", x = 75, y = 0.01, label = "+1 SD", colour = "blue") +
xlab("\n Simulated Data") + ylab("Density\n") + ggtitle("Density Plot for Simulated Data\n") +
theme_bw()
# Add zero variable so that the shaded area goes down to 0
Lower$Zero <- 0
Upper$Zero <- 0
# Create density plot
ggplot(Normal, aes(x = Normal)) +
geom_density() +
geom_ribbon(data = Lower, aes(x = XLower, ymax = YLower, ymin = Zero), fill = "blue", alpha = 0.4) +
geom_ribbon(data = Upper, aes(x = XLower, ymax = YLower, ymin = Zero), fill = "blue", alpha = 0.4) +
geom_vline(xintercept = 50, colour = "red", linetype = "longdash") +
annotate("text", x = 25, y = 0.01, label = "-1 SD", colour = "blue") +
annotate("text", x = 75, y = 0.01, label = "+1 SD", colour = "blue") +
xlab("\n Simulated Data") + ylab("Density\n") + ggtitle("Density Plot for Simulated Data\n") +
theme_bw()
ggplot(Normal, aes(x = Normal)) +
geom_density() +
geom_ribbon(data = Lower, aes(x = XLower, ymax = YLower, ymin = Zero), fill = "blue", alpha = 0.4) +
geom_ribbon(data = Upper, aes(x = XUpper, ymax = YUpper, ymin = Zero), fill = "blue", alpha = 0.4) +
geom_vline(xintercept = 50, colour = "red", linetype = "longdash") +
annotate("text", x = 25, y = 0.01, label = "-1 SD", colour = "blue") +
annotate("text", x = 75, y = 0.01, label = "+1 SD", colour = "blue") +
xlab("\n Simulated Data") + ylab("Density\n") + ggtitle("Density Plot for Simulated Data\n") +
theme_bw()
# Upper and Lower colours
LowerC <- "#80B2CD"
# Create density plot
ggplot(Normal, aes(x = Normal)) +
geom_density() +
geom_ribbon(data = Lower, aes(x = XLower, ymax = YLower, ymin = Zero), fill = LowerC, alpha = 0.4) +
geom_ribbon(data = Upper, aes(x = XUpper, ymax = YUpper, ymin = Zero), fill = "blue", alpha = 0.4) +
geom_vline(xintercept = 50, colour = "red", linetype = "longdash") +
annotate("text", x = 25, y = 0.01, label = "-1 SD", colour = "blue") +
annotate("text", x = 75, y = 0.01, label = "+1 SD", colour = "blue") +
xlab("\n Simulated Data") + ylab("Density\n") + ggtitle("Density Plot for Simulated Data\n") +
theme_bw()
MeanIM <- mean(InfantNoMiss$InfantMortality)
SDIM <- sd(InfantNoMiss$InfantMortality
DensityLower <- density(InfantNoMiss$InfantMortality, from = MeanIM - SDIM, to = MeanIM)
DensityLower <- density(InfantNoMiss$InfantMortality, from = (MeanIM - SDIM), to = MeanIM)
SDIM <- sd(InfantNoMiss$InfantMortality
SDIM <- sd(InfantNoMiss$InfantMortality)
# Find density for +/- 1 SD
DensityLower <- density(InfantNoMiss$InfantMortality, from = (MeanIM - SDIM), to = MeanIM)
SDIM <- sd(InfantNoMiss$InfantMortality)
DensityLower <- density(InfantNoMiss$InfantMortality, from = (MeanIM - SDIM), to = MeanIM)
fix(DensityLower)
DensityUpper <- density(InfantNoMiss$InfantMortality, from = MeanIM, to = (MeanIM + SDIM))
# Helpful information from StackExchange discussion
# http://stackoverflow.com/questions/3494593/shading-a-kernel-density-plot-between-two-points?lq=1
# Load zoo package
library(zoo)
# Find mean infant mortality
MeanIM <- mean(InfantNoMiss$InfantMortality)
# Find standard deviation of infant mortality
SDIM <- sd(InfantNoMiss$InfantMortality)
# Find density for +/- 1 SD
DensityLower <- density(InfantNoMiss$InfantMortality, from = (MeanIM - SDIM), to = MeanIM)
DensityUpper <- density(InfantNoMiss$InfantMortality, from = MeanIM, to = (MeanIM + SDIM))
# Extract density values (y values)
YLower <- DensityLower$y
YUpper <- DensityUpper$y
# Extract x values
XLower <- DensityLower$x
XUpper <- DensityUpper$x
# Merge vectors into data frames
Lower <- data.frame(YLower, XLower)
Upper <- data.frame(YUpper, XUpper)
# Add zero variable so that the shaded area goes down to 0
Lower$Zero <- 0
Upper$Zero <- 0
# Upper and Lower colours
LowerC <- "#80B2CD"
UpperC <- "#4F6F80"
# Create density plot
ggplot(Normal, aes(x = Normal)) +
geom_density() +
geom_ribbon(data = Lower, aes(x = XLower, ymax = YLower, ymin = Zero), fill = LowerC, alpha = 0.4) +
geom_ribbon(data = Upper, aes(x = XUpper, ymax = YUpper, ymin = Zero), fill = UpperC, alpha = 0.4) +
geom_vline(xintercept = 50, colour = "red", linetype = "longdash") +
annotate("text", x = 25, y = 0.01, label = "-1 SD", colour = LowerC) +
annotate("text", x = 75, y = 0.01, label = "+1 SD", colour = UpperC) +
xlab("\n Simulated Data") + ylab("Density\n") + ggtitle("Density Plot for Simulated Data\n") +
theme_bw()
ggplot(InfantNoMiss, aes(x = InfantMortality)) +
geom_density() +
geom_ribbon(data = Lower, aes(x = XLower, ymax = YLower, ymin = Zero), fill = LowerC, alpha = 0.4) +
geom_ribbon(data = Upper, aes(x = XUpper, ymax = YUpper, ymin = Zero), fill = UpperC, alpha = 0.4) +
geom_vline(xintercept = 50, colour = "red", linetype = "longdash") +
annotate("text", x = 25, y = 0.01, label = "-1 SD", colour = LowerC) +
annotate("text", x = 75, y = 0.01, label = "+1 SD", colour = UpperC) +
xlab("\n Infant Mortality (per 1000 births)") + ylab("Density\n") + ggtitle("Density Plot for Infant Mortality\n") +
theme_bw()
ggplot(InfantNoMiss, aes(x = InfantMortality)) +
geom_density() +
geom_ribbon(data = Lower, aes(x = XLower, ymax = YLower, ymin = Zero), fill = LowerC, alpha = 0.4) +
geom_ribbon(data = Upper, aes(x = XUpper, ymax = YUpper, ymin = Zero), fill = UpperC, alpha = 0.4) +
geom_vline(xintercept = 30.1, colour = "red", linetype = "longdash") +
annotate("text", x = 25, y = 0.01, label = "-1 SD", colour = LowerC) +
annotate("text", x = 75, y = 0.01, label = "+1 SD", colour = UpperC) +
xlab("\n Infant Mortality (per 1000 births)") + ylab("Density\n") + ggtitle("Density Plot for Infant Mortality\n") +
theme_bw()
fix(DensityLower)
ggplot(InfantNoMiss, aes(x = InfantMortality)) +
geom_density() +
geom_ribbon(data = Lower, aes(x = XLower, ymax = YLower, ymin = Zero), fill = LowerC, alpha = 0.4) +
geom_ribbon(data = Upper, aes(x = XUpper, ymax = YUpper, ymin = Zero), fill = UpperC, alpha = 0.4) +
geom_vline(xintercept = 30.1, colour = "red", linetype = "longdash") +
annotate("text", x = 25, y = 0.018, label = "-1 SD", colour = LowerC) +
annotate("text", x = 45, y = 0.01, label = "+1 SD", colour = UpperC) +
xlab("\n Infant Mortality (per 1000 births)") + ylab("Density\n") + ggtitle("Density Plot for Infant Mortality\n") +
theme_bw()
ggplot(InfantNoMiss, aes(x = InfantMortality)) +
geom_density() +
geom_ribbon(data = Lower, aes(x = XLower, ymax = YLower, ymin = Zero), fill = LowerC, alpha = 0.4) +
geom_ribbon(data = Upper, aes(x = XUpper, ymax = YUpper, ymin = Zero), fill = UpperC, alpha = 0.4) +
geom_vline(xintercept = 30.1, colour = "red", linetype = "longdash") +
annotate("text", x = 25, y = 0.21, label = "-1 SD", colour = LowerC) +
annotate("text", x = 45, y = 0.01, label = "+1 SD", colour = UpperC) +
xlab("\n Infant Mortality (per 1000 births)") + ylab("Density\n") + ggtitle("Density Plot for Infant Mortality\n") +
theme_bw()
ggplot(InfantNoMiss, aes(x = InfantMortality)) +
geom_density() +
geom_ribbon(data = Lower, aes(x = XLower, ymax = YLower, ymin = Zero), fill = LowerC, alpha = 0.4) +
geom_ribbon(data = Upper, aes(x = XUpper, ymax = YUpper, ymin = Zero), fill = UpperC, alpha = 0.4) +
geom_vline(xintercept = 30.1, colour = "red", linetype = "longdash") +
annotate("text", x = 25, y = 0.021, label = "-1 SD", colour = LowerC) +
annotate("text", x = 45, y = 0.01, label = "+1 SD", colour = UpperC) +
xlab("\n Infant Mortality (per 1000 births)") + ylab("Density\n") + ggtitle("Density Plot for Infant Mortality\n") +
theme_bw()
ggplot(InfantNoMiss, aes(x = InfantMortality)) +
geom_density() +
geom_ribbon(data = Lower, aes(x = XLower, ymax = YLower, ymin = Zero), fill = LowerC, alpha = 0.4) +
geom_ribbon(data = Upper, aes(x = XUpper, ymax = YUpper, ymin = Zero), fill = UpperC, alpha = 0.4) +
geom_vline(xintercept = 30.1, colour = "red", linetype = "longdash") +
annotate("text", x = 23, y = 0.021, label = "-1 SD", colour = LowerC) +
annotate("text", x = 45, y = 0.01, label = "+1 SD", colour = UpperC) +
xlab("\n Infant Mortality (per 1000 births)") + ylab("Density\n") + ggtitle("Density Plot for Infant Mortality\n") +
theme_bw()
ggplot(InfantNoMiss, aes(x = InfantMortality)) +
geom_density() +
geom_ribbon(data = Lower, aes(x = XLower, ymax = YLower, ymin = Zero), fill = LowerC, alpha = 0.4) +
geom_ribbon(data = Upper, aes(x = XUpper, ymax = YUpper, ymin = Zero), fill = UpperC, alpha = 0.4) +
geom_vline(xintercept = 30.1, colour = "red", linetype = "longdash") +
annotate("text", x = 23, y = 0.021, label = "-1 SD", colour = LowerC) +
annotate("text", x = 43, y = 0.008, label = "+1 SD", colour = UpperC) +
xlab("\n Infant Mortality (per 1000 births)") + ylab("Density\n") + ggtitle("Density Plot for Infant Mortality\n") +
theme_bw()
InfantNoMiss$LogInfantMort <- log(InfantNoMiss$InfantMortality)
hist(InfantNoMiss$LogInfantMort)
<<LogTransformScatter, fig.height=5, tidy=FALSE>>=
# Log Transform InfantMortality
InfantNoMiss$LogInfant <- log(
InfantNoMiss$InfantMortality)
# Create Histogram of log(InfantMortality)
hist(InfantNoMiss$LogInfant, main = "")
InfantNoMiss$LogInfant <- log(
InfantNoMiss$InfantMortality)
# Create Histogram of log(InfantMortality)
hist(InfantNoMiss$LogInfant, main = "")
hist(InfantNoMiss$LogInfant, main = "", xlab = "log{InfantMortality")
InfantNoMiss$logGDP <- log(InfantNoMiss$GDPperCapita)
InfantNoMiss$logGDP <- log(InfantNoMiss$GDPperCapita)
# Plot
qplot(x = logInf, y = logGDP, data = InfantNoMiss, geom = "point") +
xlab("log(Infant Mortality") + ylab("log(GDP)") +
theme_bw
# Plot
qplot(x = logInf, y = logGDP, data = InfantNoMiss, geom = "point") +
xlab("log(Infant Mortality") + ylab("log(GDP)") +
theme_bw()
InfantNoMiss$logInf <- log(
InfantNoMiss$InfantMortality)
qplot(x = logInf, y = logGDP, data = InfantNoMiss, geom = "point") +
xlab("log(Infant Mortality") + ylab("log(GDP)") +
theme_bw()
qplot(x = logInf, y = logGDP, data = InfantNoMiss, geom = "point") +
xlab("\nlog(Infant Mortality)") + ylab("log(GDP)\n") +
theme_bw(base_size=15)
qplot(x = logInf, y = logGDP, data = InfantNoMiss, geom = "point") +
stat_smooth() +
xlab("\nlog(Infant Mortality)") + ylab("log(GDP)\n") +
theme_bw(base_size=15)
?table
?data
library(package=datasets, help)
?datasets
library(help="datasets")
test <- Titanic
fix(test)
test <- data.frame(Titanic)
View(test)
TitanicDF <- data.frame(Titanic)
plot(Titanic$Sex)
Titanic$Sex <- factor(Titanic$Sex)
TitanicDF <- data.frame(Titanic, stringsAsFactors = FALSE)
Titanic$Sex <- factor(Titanic$Sex)
Titanic$Sex <- factor(Titanic[[Sex]])
Titanic$Sex <- factor(Titanic[[,Sex]])
Titanic$Sex <- factor(Titanic[['Sex']])
Titanic$Sex <- factor(Titanic['Sex'])
plot(Titanic$Sex)
plot(cars$type)
test <- cars$type
fix(test)
new <- cars$type
fix(new)
new <- cars$type
fix(new)
plot(cars$type)
new <- cars
View(new)
library(WDI)
library(countrycode)
library(reshape)
# Download data
MortalityGDP <- WDI(indicator = c("NY.GDP.PCAP.CD", "SP.DYN.IMRT.IN"), start = 2009, end = 2009, extra = TRUE)
View(MortalityGDP)
library(WDI)
library(countrycode)
library(reshape)
# Download data
MortalityGDP <- WDI(indicator = c("NY.GDP.PCAP.CD", "SP.DYN.IMRT.IN"), start = 2009, end = 2009, extra = TRUE)
#### Clean downloaded data ####
# Keep only countries
MortalityGDP$IMFCode <- countrycode(MortalityGDP$country, origin = "country.name", destination = "imf")
MortalityGDP <- subset(MortalityGDP, !is.na(IMFCode))
# Rename the main variables
MortalityGDP <- rename(MortalityGDP, c(SP.DYN.IMRT.IN = "InfantMortality"))
MortalityGDP <- rename(MortalityGDP, c(NY.GDP.PCAP.CD = "GDPperCapita"))
# Keep country GDPperCapita and InfantMortality variables
MortalityGDP <- MortalityGDP[, c("country", "GDPperCapita", "InfantMortality", "region", "income")]
View(MortalityGDP)
unique(MortalityGDP$region)
MortalityGDP$region <- MortalityGDP[MortalityGDP$region == "Middle East & North Africa (all income levels)"] <- "Middle East & North Africa"
MortalityGDP$region <- MortalityGDP$region[MortalityGDP$region == "Middle East & North Africa (all income levels)"] <- "Middle East & North Africa"
MortalityGDP$region <- MortalityGDP$region[MortalityGDP$region == "Middle East & North Africa (all income levels)",] <- "Middle East & North Africa"
MortalityGDP$region <- MortalityGDP[MortalityGDP$region == "Middle East & North Africa (all income levels)",] <- "Middle East & North Africa"
MortalityGDP$region <- MortalityGDP[MortalityGDP$region == "Middle East & North Africa (all income levels)", ] <- "Middle East & North Africa"
MortalityGDP[MortalityGDP$region == "Middle East & North Africa (all income levels)", ] <- "Middle East & North Africa"
View(MortalityGDP)
MortalityGDP <- WDI(indicator = c("NY.GDP.PCAP.CD", "SP.DYN.IMRT.IN"), start = 2009, end = 2009, extra = TRUE)
#### Clean downloaded data ####
# Keep only countries
MortalityGDP$IMFCode <- countrycode(MortalityGDP$country, origin = "country.name", destination = "imf")
MortalityGDP <- subset(MortalityGDP, !is.na(IMFCode))
# Rename the main variables
MortalityGDP <- rename(MortalityGDP, c(SP.DYN.IMRT.IN = "InfantMortality"))
MortalityGDP <- rename(MortalityGDP, c(NY.GDP.PCAP.CD = "GDPperCapita"))
# Keep country GDPperCapita and InfantMortality variables
MortalityGDP <- MortalityGDP[, c("country", "GDPperCapita", "InfantMortality", "region", "income")]
MortalityGDP[MortalityGDP$region == "Middle East & North Africa (all income levels)", ] <- "Middle East & North Africa"
View(MortalityGDP)
# Download data
MortalityGDP <- WDI(indicator = c("NY.GDP.PCAP.CD", "SP.DYN.IMRT.IN"), start = 2009, end = 2009, extra = TRUE)
#### Clean downloaded data ####
# Keep only countries
MortalityGDP$IMFCode <- countrycode(MortalityGDP$country, origin = "country.name", destination = "imf")
MortalityGDP <- subset(MortalityGDP, !is.na(IMFCode))
# Rename the main variables
MortalityGDP <- rename(MortalityGDP, c(SP.DYN.IMRT.IN = "InfantMortality"))
MortalityGDP <- rename(MortalityGDP, c(NY.GDP.PCAP.CD = "GDPperCapita"))
# Keep country GDPperCapita and InfantMortality variables
MortalityGDP <- MortalityGDP[, c("country", "GDPperCapita", "InfantMortality", "region", "income")]
MortalityGDP$region[MortalityGDP$region == "Middle East & North Africa (all income levels)", ] <- "Middle East & North Africa"
View(MortalityGDP)
MortalityGDP$region[MortalityGDP$region == "Middle East & North Africa (all income levels)", ] <- "Middle East & North Africa"
MortalityGDP$region <- character(MortalityGDP$region)
MortalityGDP$region <- as.character(MortalityGDP$region)
MortalityGDP$region[MortalityGDP$region == "Middle East & North Africa (all income levels)", ] <- "Middle East & North Africa"
MortalityGDP$region[MortalityGDP$region == "Middle East \& North Africa (all income levels)", ] <- "Middle East & North Africa"
View(MortalityGDP)
class(MortalityGDP$region)
MortalityGDP$region[MortalityGDP$region == "Middle East & North Africa (all income levels)", ] <- "Middle East/North Africa"
plot(MortalityGDP$region)
View(MortalityGDP)
MortalityGDP$region <- as.character(MortalityGDP$region)
MortalityGDP$region
summary(MortalityGDP$region)
MortalityGDP[MortalityGDP$region == "Middle East & North Africa (all income levels)"] <- "ME"
MortalityGDP[MortalityGDP$region == "Middle East & North Africa (all income levels)",] <- "ME"
MortalityGDP$region <- factor(MortalityGDP$region, labels = c(1, 2, 3, 4, 5, 6, 7, 8))
View(MortalityGDP)
# Download data
MortalityGDP <- WDI(indicator = c("NY.GDP.PCAP.CD", "SP.DYN.IMRT.IN"), start = 2009, end = 2009, extra = TRUE)
#### Clean downloaded data ####
# Keep only countries
MortalityGDP$IMFCode <- countrycode(MortalityGDP$country, origin = "country.name", destination = "imf")
MortalityGDP <- subset(MortalityGDP, !is.na(IMFCode))
# Rename the main variables
MortalityGDP <- rename(MortalityGDP, c(SP.DYN.IMRT.IN = "InfantMortality"))
MortalityGDP <- rename(MortalityGDP, c(NY.GDP.PCAP.CD = "GDPperCapita"))
# Keep country GDPperCapita and InfantMortality variables
MortalityGDP <- MortalityGDP[, c("country", "GDPperCapita", "InfantMortality", "region", "income")]
class(MortalityGDP$region)
summar(MortalityGDP$region)
summary(MortalityGDP$region)
MortalityGDP$region <- factor(MortalityGDP$region, labels = c("None", "NA", "SA", "ME", "EAP", "LA", "EUR"))
MortalityGDP$region <- factor(MortalityGDP$region, labels = c("None", "NA", "SA", "ME", "EAP", "LA", "SSA", "EUR"))
View(MortalityGDP)
library(WDI)
library(countrycode)
library(reshape)
# Download data
MortalityGDP <- WDI(indicator = c("NY.GDP.PCAP.CD", "SP.DYN.IMRT.IN"), start = 2009, end = 2009, extra = TRUE)
#### Clean downloaded data ####
# Keep only countries
MortalityGDP$IMFCode <- countrycode(MortalityGDP$country, origin = "country.name", destination = "imf")
MortalityGDP <- subset(MortalityGDP, !is.na(IMFCode))
# Rename the main variables
MortalityGDP <- rename(MortalityGDP, c(SP.DYN.IMRT.IN = "InfantMortality"))
MortalityGDP <- rename(MortalityGDP, c(NY.GDP.PCAP.CD = "GDPperCapita"))
# Keep country GDPperCapita and InfantMortality variables
MortalityGDP <- MortalityGDP[, c("country", "GDPperCapita", "InfantMortality", "region", "income")]
summary(MortalityGDP$region)
MortalityGDP$region <- factor(MortalityGDP$region, labels = c("None", "EAP", "EUR", "LA", "ME", "NA", "SA", "SSA"))
View(MortalityGDP)
# Load package
library(devtools)
# Gather data using source code at: http://bit.ly/OTWEGS
# Data is stored in a data frame: MortalityGDP
source_url("http://bit.ly/OTWEGS")
# See contents of MortalityGDP
names(MortalityGDP)
table(MortalityGDP$region, MortalityGDP$income)
View(MortalityGDP)
MortalityGDP$region <- factor(MortalityGDP$region, labels = c("EUR", "EAP", "EUR", "LA", "ME", "NA", "SA", "SSA"))
MortalityGDP$DumIncome <- MortalityGDP$GDPperCapita[
>= 25000] <- "high"
MortalityGDP$DumIncome <- MortalityGDP$GDPperCapita[
< 25000] <- "low"
MortalityGDP$DumIncome <- MortalityGDP[
MortalityGDP$GDPperCapita
>= 25000] <- "high"
MortalityGDP$DumIncome <- MortalityGDP[
MortalityGDP$GDPperCapita
< 25000] <- "low"
InfantNoMiss <- subset(MortalityGDP,
!is.na(InfantMortality))
InfantNoMiss$DumMort <- InfantNoMiss[
InfantNoMiss$InfantMortality
>= 15] <- "high"
InfantNoMiss$DumMort <- InfantNoMiss[
InfantNoMiss$InfantMortality
< 15] <- "low"
InfantNoMiss$DumMort <- InfantNoMiss[
InfantNoMiss$InfantMortality
>= 15,] <- "high"
InfantNoMiss$DumMort <- InfantNoMiss[
InfantNoMiss$InfantMortality
< 15,] <- "low"
InfantNoMiss$DumMort[InfantNoMiss$InfantMortality
>= 15] <- "high"
InfantNoMiss$DumMort[InfantNoMiss$InfantMortality
< 15] <- "low"
View(InfantNoMiss)
InfantNoMiss <- subset(MortalityGDP,
!is.na(InfantMortality))
InfantNoMiss$DumMort[InfantNoMiss$InfantMortality
>= 15] <- "high"
InfantNoMiss$DumMort[InfantNoMiss$InfantMortality
< 15] <- "low"
View(InfantNoMiss)
table(InfantNoMiss$region, InfantNoMissGDP$DumMort)
table(InfantNoMiss$region, InfantNoMiss$DumMort)
mosaicplot(table(InfantNoMiss$region, InfantNoMiss$DumMort))
MortalityGDP <- subset(MortalityGDP, region != "None")
View(MortalityGDP)
plot(MortalityGDP$region)
# Download data
MortalityGDP <- WDI(indicator = c("NY.GDP.PCAP.CD", "SP.DYN.IMRT.IN"), start = 2009, end = 2009, extra = TRUE)
#### Clean downloaded data ####
# Keep only countries
MortalityGDP$IMFCode <- countrycode(MortalityGDP$country, origin = "country.name", destination = "imf")
MortalityGDP <- subset(MortalityGDP, !is.na(IMFCode))
# Rename the main variables
MortalityGDP <- rename(MortalityGDP, c(SP.DYN.IMRT.IN = "InfantMortality"))
MortalityGDP <- rename(MortalityGDP, c(NY.GDP.PCAP.CD = "GDPperCapita"))
# Keep country GDPperCapita and InfantMortality variables
MortalityGDP <- MortalityGDP[, c("country", "GDPperCapita", "InfantMortality", "region", "income")]
# Recode region
MortalityGDP$region <- factor(MortalityGDP$region, labels = c("None", "EAP", "EUR", "LA", "ME", "NA", "SA", "SSA"))
# Remove EU
MortalityGDP <- subset(MortalityGDP, region != "None")
View(MortalityGDP)
# Load package
library(devtools)
# Gather data using source code at: http://bit.ly/OTWEGS
# Data is stored in a data frame: MortalityGDP
source_url("http://bit.ly/OTWEGS")
# See contents of MortalityGDP
names(MortalityGDP)
plot(MortalityGDP$region)
MortalityGDP <- factor(MortalityGDP$region)
##################
# Gather World Bank Data on Mortality Rate & GDP per capita for 2009
# Christopher Gandrud
# Updated 24 September 2012
##################
#### Data to gather ####
# Mortality rate, infant (per 1,000 live births): SP.DYN.IMRT.IN
# GDP per capita (current US$): NY.GDP.PCAP.CD
# Load package
library(WDI)
library(countrycode)
library(reshape)
# Download data
MortalityGDP <- WDI(indicator = c("NY.GDP.PCAP.CD", "SP.DYN.IMRT.IN"), start = 2009, end = 2009, extra = TRUE)
#### Clean downloaded data ####
# Keep only countries
MortalityGDP$IMFCode <- countrycode(MortalityGDP$country, origin = "country.name", destination = "imf")
MortalityGDP <- subset(MortalityGDP, !is.na(IMFCode))
# Rename the main variables
MortalityGDP <- rename(MortalityGDP, c(SP.DYN.IMRT.IN = "InfantMortality"))
MortalityGDP <- rename(MortalityGDP, c(NY.GDP.PCAP.CD = "GDPperCapita"))
# Keep country GDPperCapita and InfantMortality variables
MortalityGDP <- MortalityGDP[, c("country", "GDPperCapita", "InfantMortality", "region", "income")]
# Recode region
MortalityGDP$region <- factor(MortalityGDP$region, labels = c("None", "EAP", "EUR", "LA", "ME", "NA", "SA", "SSA"))
# Remove EU
MortalityGDP <- subset(MortalityGDP, region != "None")
MortalityGDP$region <- factor(MortalityGDP$region)
View(MortalityGDP)
read.table("clipboard")
read.table("clipboard")
read.table("clipboard")
read.table("clipboard")
read.table("clipboard")
library(WDI)
GDP <- WDI(indicator = "NY.GDP.MKTP.CD")
##I will name Life Expectancy at Birth as "L.E.B"##
L.E.B <- WDI(indicator = "SP.DYN.LE00.IN")
#want to see the names##
names(GDP)
names(L.E.B)
#now I merge the data
MergedData <- merge(x = GDP, y = L.E.B, by = union("country", "year"))
##To merge these data more clearly, I tried to union not only country and yearbut also the unknown code "iso2c"<-i dont know what it is, but i failed##
##It says there is an error to union "iso2c"##
NewMergedData <- merge(x = GDP, y = L.E.B, by = union("country", "year", "iso2c"))
##now I can see the mergeddata##
library(reshape)
GDP <- rename(GDP,c(NY.GDP.MKTP.CD = "GDP"))
names(GDP)
L.E.B <- rename(L.E.B,c(SP.DYN.LE00.IN = "Life Expectancy at Birth"))
names(L.E.B)
GDP <- GDP[,-1]
names(GDP)
L.E.B <- L.E.B[,-1]
names(L.E.B)
newmergeddata <- merge(x = GDP, y = L.E.B, by = union("country", "year"))
View(newmergeddata)
# Load required packages
library(knitr)
library(extrafont)
##### PDF ####
# Change working directory to /Rep-Res-Book/Source/Parent
setwd("/git_repositories/Rep-Res-Book/Source/Parent/")
# Compile the book's parent document
knit2pdf(input = "Rep-Res-Parent.Rnw")
library{xtable}
library(xtable)
?xtable
?print
# Load package
library(xtable)
# Create data frame object
Population <- c(14.3, 6.3, 66.7)
Countries <- c("Cambodia", "Laos", "Thailand")
NewData <- data.frame(Countries, Population)
?data.frame
setwd("/git_repositories/Rep-Res-Book/Source/Parent/")
knit2pdf(input = "Rep-Res-Parent.Rnw")
source_url("http://bit.ly/OTWEGS")
library(devtools)
source_url("http://bit.ly/OTWEGS")
names(MortalityGDP)
summary(MortalityGDP$GDPperCapita)
Sum <- summary(MortalityGDP$GDPperCapita)
fix(Sum)
Sum <- data.frame(Sum)
fix(Sum)
Sum <- data.frame(Sum$Names)
fix(Sum)
Sum <- as.data.frame(Sum)
fix(Sum)
Sum <- as.matrix(Sum)
View(Sum)
print(xtable(Sum), type = "html")
View(Sum)
names(Sum)
Sum <- data.frame(Sum)
View(Sum)
library(reshape)
names(Sum)
View(Sum)
print(xtable(Sum), type = "html")
