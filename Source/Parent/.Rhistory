# 15 October 2011
library(WDI)
library(gregmisc)
library(googleVis)
## Collect indicator variables based on World Bank variable Key
## Indicators to collect
# External debt stocks, private non-guaranteed (Current USD) long-term: DT.DOD.DPNG.CD
# External debt as a % of GNI: DT.DOD.DECT.GN.ZS
# Short-term debt (% of total external debt): DT.DOD.DSTC.ZS
# Real effective exchange rate index (2005 = 100): PX.REX.REER
# GDP per capita (current USD): NY.GDP.PCAP.CD
# Bank nonperforming loans to total gross loans: FB.AST.NPER.ZS
debtWB <- WDI(country="all", indicator= c("DT.DOD.DPNG.CD",
"DT.DOD.DECT.GN.ZS", "DT.DOD.DSTC.ZS", "PX.REX.REER",
"NY.GDP.PCAP.CD", "FB.AST.NPER.ZS"),
start=1980, end=2010)
## Rename variables
debtWB <-rename.vars(debtWB, from="DT.DOD.DPNG.CD", to="private.external.debt.LT", info=FALSE)
debtWB <- rename.vars(debtWB, from="DT.DOD.DECT.GN.ZS", to="total.ext.debt.per.gni", info=FALSE)
debtWB <- rename.vars(debtWB, from="DT.DOD.DSTC.ZS", to="short.term.debt.per.ext", info=FALSE)
debtWB <- rename.vars(debtWB, from="PX.REX.REER", to="forex.2005.baseline", info=FALSE)
debtWB <- rename.vars(debtWB, from="NY.GDP.PCAP.CD", to="gdp.per.capita.current.USD", info=FALSE)
debtWB <- rename.vars(debtWB, from="FB.AST.NPER.ZS", to="nonperforming.loans.per.total", info=FALSE)
## Remove iso code
debtWB <- remove.vars(debtWB, names="iso2c", info=FALSE)
## Drop Nicaragua & Uganda (extreme forex outliers)
debtWB <- subset(debtWB, country!="Uganda" & country!="Nicaragua")
## Create Google motion chart
debtWB.motion <- gvisMotionChart(debtWB, idvar="country", timevar="year",
options=list(width=700, height=600))
## View motion chart
plot(debtWB.motion)
# Load libraries
library(RCurl)
library(plyr)
library(xts)
library(ggplot2)
library(MASS)
library(reshape2)
# Load most recent data
URL <- "https://raw.github.com/christophergandrud/amcData/master/MainData/amcCountryYear.csv"
AMC <- getURL(URL)
AMC <- read.csv(textConnection(AMC))
# Load most recent data
URL <- "https://raw.github.com/christophergandrud/amcData/master/MainData/amcCountryYear.csv"
AMC <- getURL(URL)
AMC <- read.csv(textConnection(AMC))
#### Create lagged crisis variable (Crisis onset year -3) ####
# Create individual year lags
AMCLag <- ddply(AMC, .(country), transform, SCL1 = c(NA, SystemicCrisis[-length(SystemicCrisis)]))
AMCLag <- ddply(AMCLag, .(country), transform, SCL2 = c(NA, SCL1[-length(SCL1)]))
# Create combined lagged variable
attach(AMCLag)
AMCLag$SystemicCrisisLag3 <- SystemicCrisis + SCL1 + SCL2
detach(AMCLag)
# Remove old lag variables
AMCLag$SCL1 <- AMCLag$SCL2 <- NULL
#### Create Election Year +1 lag ####
lg<-function(x)c(x[2:(length(x))], NA)
AMCLag <- ddply(AMCLag, .(country), transform, ElectionYear1 = lg(ElectionYear))
AMCLag$ElectionYear1[AMCLag$ElectionYear1 == 2] <- "NoElection"
AMCLag$ElectionYear1[AMCLag$ElectionYear1 == 1] <- "Election"
#### Remove (De)centralised category
AMCLag$AMCType[AMCLag$AMCType == "(De)centralised"] <- "Decentralised"
#### Remove NA in AMC Type & Capture only an AMC's first year ####
AMCLag$AMCType[AMCLag$AMCType == ""] <- NA
NotNaAMCType <- subset(AMCLag, !is.na(AMCType) | AMCType != "None")
NotNaAMCType <- ddply(NotNaAMCType, .(country), transform, NotFirstYear = duplicated(NumAMCOpNoNA))
FirstYearNotNa <- subset(NotNaAMCType, NumAMCOpNoNA != 0 & NotFirstYear == FALSE)
#### Graphs ####
# Basic graph of AMC types
ggplot(data = FirstYearNotNa, aes(AMCType)) +
geom_bar() +
theme_bw()
#### Cumulative Count ####
TypeColors <- c("#E6AB02", "#1B9E77")
# Number operating by type
SumOp <- ddply(NotNaAMCType, .(year, AMCType), function(x) sum(x$NumAMCOpNoNA))
SumOp <- subset(SumOp, AMCType !=  "?")
SumOp <- subset(SumOp, AMCType !=  "None")
ggplot(data = SumOp, aes(year, V1)) +
geom_vline(xintercept = c(1991, 1997, 2008), linetype = "dashed", size = 0.5) +
geom_line(aes(color = AMCType), size = 2, alpha = I(0.9)) +
scale_color_manual(values = TypeColors) +
scale_x_continuous(limits = c(1980, 2011)) +
xlab("") + ylab("Number Operating\n") +
theme_bw(base_size = 15)
ggplot(data = SumCreated, aes(year, V1)) +
geom_line(aes(color = AMCType), guide_legend="") +
xlab("") + ylab("Number Created\n") +
theme_bw(base_size = 15)
ggplot(data = SumOp, aes(year, V1)) +
geom_vline(xintercept = c(1991, 1997, 2008), linetype = "dashed", size = 0.5) +
geom_line(aes(color = AMCType), size = 2, alpha = I(0.9), guide_legend="") +
scale_color_manual(values = TypeColors) +
scale_x_continuous(limits = c(1980, 2011)) +
xlab("") + ylab("Number Operating\n") +
theme_bw(base_size = 15)
ggplot(data = SumOp, aes(year, V1)) +
geom_vline(xintercept = c(1991, 1997, 2008), linetype = "dashed", size = 0.5) +
geom_line(aes(color = AMCType), size = 2, alpha = I(0.9), name="") +
scale_color_manual(values = TypeColors) +
scale_x_continuous(limits = c(1980, 2011)) +
xlab("") + ylab("Number Operating\n") +
theme_bw(base_size = 15)
ggplot(data = SumOp, aes(year, V1)) +
geom_vline(xintercept = c(1991, 1997, 2008), linetype = "dashed", size = 0.5) +
geom_line(aes(color = AMCType), size = 2, alpha = I(0.9)) +
scale_color_manual(values = TypeColors, name="") +
scale_x_continuous(limits = c(1980, 2011)) +
xlab("") + ylab("Number Operating\n") +
theme_bw(base_size = 15)
?require
librar(devtools)
library(devtools)
DATA <- read.csv("~/Desktop/DATA.csv")
viewData(DATA)
library(ggplot2)
names(DATA)
ggplot(DATA, aes(x = Long.term.unemployment, y = Suicide.rates)) + geom_point()
rstudio::viewData(DATA)
log(200/1000)
log(.1)
DATA <- read.csv("~/Downloads/DATA.csv")
short <- DATA[, c("Suicide.rates","Long.term.unemployment","Public.social.expenditure","GDP.per.capita","Real.GDP.growth")]
pairs(short)
DATA2<-subset(DATA, country!= "Korea")
DATA2<-subset(DATA, Country!= "Korea")
KS1<-lm(Suicide.rates~Long.term.unemployment, data=DATA2)
summary(KS1)
DATA.motion <- gvisMotionChart(DATA, idvar="Country", timevar="year",                     options=list(width=700, height=600))
library(googleVis)
rstudio::viewData(DATA)
DATA.motion <- gvisMotionChart(DATA, idvar="Country", timevar="Year",                     options=list(width=700, height=600))
rstudio::viewData(DATA)
DATA <- !duplicated(DATA)
rstudio::viewData(DATA2)
?duplicated
DATA <- read.csv("~/Downloads/DATA.csv")
DATA <- subset(DATA, !is.na(Year))
rstudio::viewData(DATA)
short <- DATA[, c("Suicide.rates","Long.term.unemployment","Public.social.expenditure","GDP.per.capita","Real.GDP.growth")]
library(googleVis)
DATA.motion <- gvisMotionChart(DATA, idvar="Country", timevar="Year",                     options=list(width=700, height=600))
print(DATA.motion, "chart")
DATA.motion <- gvisMotionChart(Short, idvar="Country", timevar="Year",                     options=list(width=700, height=600))
DATA.motion <- gvisMotionChart(short, idvar="Country", timevar="Year",                     options=list(width=700, height=600))
rstudio::viewData(DATA)
DATA.motion <- gvisMotionChart(DATA, idvar="Country", timevar="Year",                     options=list(width=700, height=600))
Data.motion
DATA.motion
print(DATA.motion)
plot(DATA.motion)
?print
height = 450))
library(googleVis)
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 550,
height = 450))
plot(M)
?print
?save
Z <- 1:100
J <- 1:50
save(c(Z, J), file = "~/Desktop/Test.RData")
save(Z, J, file = "~/Desktop/Test.RData")
load("~/Desktop/Test.RData")
rm(J, Z)
load("~/Desktop/Test.RData")
library(devtools)
source_url("https://raw.github.com/christophergandrud/amcData/master/SourceCode/Paper1Source/LoadRPackages.R")
source_url("https://raw.github.com/christophergandrud/amcData/master/SourceCode/Paper1Source/PaperDataLoadClean.R")
# Number Operating
SumOp <- subset(NotNaAMCType, AMCType !=  "?")
SumOp <- subset(SumOp, AMCType !=  "None")
#SumOpAll <- ddply(SumOp, .(year), function(x) sum(x$NumAMCOpNoNA))
#OperatingAllPlot <- ggplot(data = SumOpAll, aes(year, V1)) +
#  geom_vline(xintercept = c(1991, 1997, 2008), size = 0.5, color = "#DEDEDE") +
#  geom_line(size = 2, alpha = I(0.9)) +
#  scale_x_continuous(limits = c(1980, 2011)) +
#  xlab("") + ylab("Number of AMCs Operating\n") +
#  theme_bw(base_size = 15)
# Number operating by type
SumOp$Marker[SumOp$NumAMCOpNoNA >= 1] <- 1
SumOp <- ddply(SumOp, .(year, AMCType), function(x) sum(x$Marker))
OperatingTypePlot <- ggplot(data = SumOp, aes(year, V1)) +
geom_vline(xintercept = c(1991, 1997, 2008), size = 0.5, color = "#DEDEDE") +
geom_line(aes(color = AMCType, linetype = AMCType), size = 1, alpha = I(0.9)) +
scale_color_discrete(name = "") +
scale_linetype_discrete(name = "") +
scale_x_continuous(limits = c(1980, 2011)) +
xlab("") + ylab("Number of Countries\n") +
theme_bw(base_size = 15)
print(OperatingTypePlot)
#grid.arrange(OperatingAllPlot, OperatingTypePlot, ncol = 2)
library(devtools)
source_url("https://raw.github.com/christophergandrud/amcData/master/SourceCode/Paper1Source/LoadRPackages.R")
source_url("https://raw.github.com/christophergandrud/amcData/master/SourceCode/Paper1Source/PaperDataLoadClean.R")
install.packages("crrSC")
library(crrSC)
data(cdata)
rstudio::viewData(cdata)
rstudio::viewData(AMC)
rstudio::viewData(AMCLag)
AMCLag$AMCStatus <- 1
AMCLag$AMCStatus[AMCLag$AMCType == "Centralised"] <-2
AMCLag$AMCStatus[AMCLag$AMCType == "Decentralised"] <-3
rstudio::viewData(AMCLag)
rstudio::viewData(AMC)
library(msm)
?statetable.msm
names(AMCLag)
StateTable <- statetable.msm(state = AMCStatus, subject = ISOCode, data = AMCLag)
StateTable
39/15
15/39
5/15
StateTable <- unname(StateTable)
rownames(StateTable) <- c("No AMC", "Centralised", "Decentralised")
colnames(StateTable) <- c("No AMC", "Centralised", "Decentralised")
fix(StateTable)
StateTable <- data.frame(StateTable)
rstudio::viewData(StateTable)
StateTableDF <- data.frame(StateTable)
fin.heatmap <- ggplot(StateTableDF, aes(Var2, Var1)) +
geom_tile(aes(fill = Freq)) +
geom_text(aes(label = Freq)) +
scale_fill_gradient2(low = "white", high = "red", name = "") +
xlab("\nAfter") + ylab("Before\n") +
theme_bw()
fin.heatmap
StateTableDF <- subset(StateTableDF, Var1 != Var2)
### Create heatmap
StateTablePlot <- ggplot(StateTableDF, aes(Var2, Var1)) +
geom_tile(aes(fill = Freq)) +
geom_text(aes(label = Freq)) +
scale_fill_gradient2(low = "white", high = "red", name = "") +
xlab("\nAfter") + ylab("Before\n") +
theme_bw()
StateTableDF <- subset(StateTableDF, Var1 != Var2)
rstudio::viewData(StateTableDF)
### Create heatmap
StateTablePlot <- ggplot(StateTableDF, aes(Var2, Var1)) +
geom_tile(aes(fill = Freq)) +
geom_text(aes(label = Freq)) +
scale_fill_gradient2(low = "white", high = "red", name = "") +
xlab("\nAfter") + ylab("Before\n") +
theme_bw()
print(StateTablePlot)
rstudio::viewData(AMCLag)
M1 <- crrc(ftime = AMCLag$year,
fstatus = AMCLag$AMCStatus,
cov1 = AMCLag$UDS,
cluster = AMCLag$country)
summary(M1)
print(M1)
M1$coef
M1 <- crrc(ftime = AMCLag$year,
fstatus = AMCLag$AMCStatus,
cov1 = AMCLag$UDS,
failcode = 2
cluster = AMCLag$country)
M1 <- crrc(ftime = AMCLag$year,
fstatus = AMCLag$AMCStatus,
cov1 = AMCLag$UDS,
failcode = 2,
cluster = AMCLag$country)
M1$coef
M1 <- crrc(ftime = AMCLag$year,
fstatus = AMCLag$AMCStatus,
cov1 = AMCLag$UDS,
failcode = 3,
cluster = AMCLag$country)
M1$coef
plot(M1)
?with
with(AMCLag, {
M1 <- crrc(ftime = AMCLag$year,
fstatus = AMCLag$AMCStatus,
cov1 = AMCLag$UDS,
failcode = 3,
cluster = AMCLag$country)
})
M1$coef
with(AMCLag, {
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = UDS,
failcode = 3,
cluster = country)
})
M1$coef
fix(`M1`)
with(AMCLag, {
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = UDS,
failcode = 3,
strata = country)
})
M1$coef
rm(M1)
with(AMCLag, {
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = UDS,
failcode = 3,
strata = country)
})
M1$coef
M1$coef
M1$coef
attach(AMCLag)
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = UDS,
failcode = 3,
strata = country)
detach(AMCLag)
M1$coef
plot.cuminc(M1)
library(cmprsk)
install.packages(cmprsk)
install.packages("cmprsk")
library(cmprsk)
plot.cuminc(M1)
M1Predict <- predict(M1, c(-5, 0, 5, 10))
rstudio::viewData(AMCLag)
attach(AMCLag)
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = c(UDS, SystemicCrisisLag3),
failcode = 3,
strata = country)
detach(AMCLag)
?crrs
attach(AMCLag)
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(UDS, SystemicCrisisLag3),
failcode = 3,
strata = country)
detach(AMCLag)
M1$coef
M1Predict <- predict(M1, c(-5, 0, 5, 10))
attach(AMCLag)
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(UDS, SystemicCrisisLag3),
failcode = 3,
cluster = country)
detach(AMCLag)
M1$coef
M1Predict <- predict(M1, c(-5, 0, 5, 10))
attach(AMCLag)
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(UDS, SystemicCrisisLag3),
failcode = 2,
cluster = country)
detach(AMCLag)
M1$coef
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
attach(AMCLag)
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, SystemicCrisisLag3),
attach(AMCLag)
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, SystemicCrisisLag3),
failcode = 2,
cluster = country)
detach(AMCLag)
M1$coef
attach(AMCLag)
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, SystemicCrisisLag3),
failcode = 3,
cluster = country)
detach(AMCLag)
M1$coef
fix(`M1`)
summary(M1)
attach(AMCLag)
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, SystemicCrisisLag3),
failcode = 2,
cluster = country)
detach(AMCLag)
summary(M1)
attach(AMCLag)
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, SystemicCrisisLag3),
failcode = 2,
cencode = 1,
cluster = country)
detach(AMCLag)
summary(M1)
attach(AMCLag)
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(UDS, SystemicCrisisLag3),
failcode = 2,
cluster = country)
detach(AMCLag)
summary(M1)
attach(AMCLag)
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(UDS, SystemicCrisisLag3),
failcode = 2,
cluster = country)
detach(AMCLag)
summary(M1)
rm(M1)
attach(AMCLag)
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(UDS, SystemicCrisisLag3),
failcode = 2,
cluster = country)
detach(AMCLag)
summary(M1)
attach(AMCLag)
M1 <- crrc(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(UDS, SystemicCrisisLag3),
failcode = 3,
cluster = country)
detach(AMCLag)
summary(M1)
rm(M1)
attach(AMCLag)
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(UDS, SystemicCrisisLag3),
failcode = 3,
ctype = 2
cluster = country)
attach(AMCLag)
attach(AMCLag)
detach(AMCLag)
attach(AMCLag)
detach(AMCLag)
detach(AMCLag)
attach(AMCLag)
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(UDS, SystemicCrisisLag3),
failcode = 3,
ctype = 2,
strata = country)
detach(AMCLag)
M1$coef
source_url("https://raw.github.com/christophergandrud/amcData/master/SourceCode/Paper1Source/LoadRPackages.R")
source_url("https://raw.github.com/christophergandrud/amcData/master/SourceCode/Paper1Source/PaperDataLoadClean.R")
doInstall <- FALSE  # Change to FALSE if you don't want packages installed.
toInstall <- c("animation",
"apsrtable",
"devtools",
"extrafont",
"ggplot2",
"googleVis",
"knitr",
"knitcitations",
"markdown",
"openair",
"RCurl",
"texreg",
"tools",
"xtable",
"Zelig")
if(doInstall){install.packages(toInstall, repos = "http://cran.us.r-project.org")}
lapply(toInstall, library, character.only = TRUE)
##### Create PDF Book Manuscript ####
# Change working directory to /Rep-Res-Book/Source/Parent
ParentDirectory <- "/git_repositories/Rep-Res-Book/Source/Parent/"
setwd(ParentDirectory)
# Compile the book's parent document
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
library(Rtools)
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
?batch
?BATCH
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
