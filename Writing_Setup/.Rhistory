plot(x = InfantMortality,
y = (GDPperCapita/1000),
xlab = "Infant Mortality per 1000 Births",
ylab = "GDP/Capita \n (1,000s of US$)"))
with(MortalityGDP,
plot(x = InfantMortality,
y = (GDPperCapita/1000),
xlab = "Infant Mortality per 1000 Births",
ylab = "\nGDP/Capita \n (1,000s of US$)"))
with(MortalityGDP,
plot(x = InfantMortality,
y = (GDPperCapita/1000),
xlab = "Infant Mortality per 1000 Births",
ylab = "GDP/Capita (1,000s of US$)"))
with(MortalityGDP,
plot(x = InfantMortality,
y = (GDPperCapita/1000),
xlab = "Infant Mortality per 1000 Births",
ylab = "GDP/Capita (1,000s of US$)",
main = "Scatter plot of\n GDP/Capita & Infant Mortality"))
ggplot(data = MortalityGDP,
aes(x = InfantMortality,
y = GDPperCapita))
ggplot(data = MortalityGDP,
aes(x = InfantMortality,
y = GDPperCapita)) +
geom_point()
Colours <- c("#1B9E77", "#D95F02", "#7570B3",
"#E7298A", "#66A61E", "#E6AB02")
Create graph
ColourScatter <- ggplot(data = InfantNoMiss,
aes(log(InfantMortality),
log(GDPperCapita))) +
geom_point(aes(colour = income)) +
scale_color_manual(values = Colours) +
xlab("\nLog Infant Mortality") +
ylab("Log GDP/Capita\n") +
ggtitle("Scatterplot of GDP/Capita \n
& Infant Mortality")
theme_bw()
Create colour vector
Colours <- c("#1B9E77", "#D95F02", "#7570B3",
"#E7298A", "#66A61E", "#E6AB02")
Create graph
ColourScatter <- ggplot(data = InfantNoMiss,
aes(log(InfantMortality),
log(GDPperCapita))) +
geom_point(aes(colour = income)) +
scale_color_manual(values = Colours) +
xlab("\nLog Infant Mortality") +
ylab("Log GDP/Capita\n") +
ggtitle("Scatterplot of GDP/Capita \n
& Infant Mortality") +
theme_bw()
ColourScatter
ggplot(data = InfantNoMiss,
aes(log(InfantMortality),
log(GDPperCapita))) +
geom_point(aes(colour = income)) +
scale_color_manual(values = Colours) +
xlab("\nLog Infant Mortality") +
ylab("Log GDP/Capita\n") +
ggtitle("Log Transformed GDP/Capita
& Infant Mortality") +
theme_bw()
ggplot(data = InfantNoMiss,
aes(log(InfantMortality),
log(GDPperCapita))) +
geom_point(aes(colour = income)) +
scale_color_manual(values = Colours) +
xlab("\nLog Infant Mortality") +
ylab("Log GDP/Capita\n") +
ggtitle("Log Transformed Data") +
theme_bw()
ggplot(data = InfantNoMiss,
aes(log(InfantMortality),
log(GDPperCapita))) +
geom_point(aes(colour = income)) +
scale_color_manual(values = Colours) +
xlab("\nLog Infant Mortality") +
ylab("Log GDP/Capita\n") +
ggtitle("Log Transformed Data\n") +
theme_bw()
Violin <- ggplot(MortalityGDP, aes(
factor(income),
InfantMortality)) +
geom_violin() +
theme_bw()
Violin
Violin <- ggplot(MortalityGDP, aes(
factor(region),
InfantMortality)) +
geom_violin() +
theme_bw()
Violin
Violin <- ggplot(MortalityGDP, aes(
factor(region),
log(GDPperCapita)) +
geom_violin() +
theme_bw()
Violin
Violin <- ggplot(MortalityGDP, aes(
factor(region),
log(GDPperCapita)) +
geom_violin() +
theme_bw()
Violin <- ggplot(MortalityGDP, aes(
factor(region),
log(GDPperCapita))) +
geom_violin() +
theme_bw()
Violin <- ggplot(MortalityGDP, aes(
factor(region),
log(GDPperCapita))) +
geom_violin() +
theme_bw()
Violin
viewData(MortalityGDP)
Violin <- ggplot(MortalityGDP, aes(
factor(DunMort),
log(GDPperCapita))) +
geom_violin() +
theme_bw()
Violin
viewData(MortalityGDP)
Violin <- ggplot(MortalityGDP, aes(
factor(DumMort),
log(GDPperCapita))) +
geom_violin() +
theme_bw()
Violin
viewData(MortalityGDP)
names(MortalityGDP)
viewData(InfantNoMiss)
viewData(MortalityGDP)
library(devtools)
Gather data using source code at:
http://bit.ly/OTWEGS
Data is stored in a data frame: MortalityGDP
source_url("http://bit.ly/OTWEGS")
Create data with no missing values of infant mortali
InfantNoMiss <- subset(MortalityGDP,
!is.na(InfantMortality))
Create High/Low Income Variable
InfantNoMiss$DumMort[InfantNoMiss$InfantMortality
>= 15] <- "high"
InfantNoMiss$DumMort[InfantNoMiss$InfantMortality
< 15] <- "low"
Violin <- ggplot(InfantNoMiss, aes(
factor(DumMort),
log(GDPperCapita))) +
geom_violin() +
theme_bw()
Violin
ggplot(InfantNoMiss, aes(
factor(DumMort),
log(GDPperCapita))) +
geom_violin(fill = "#E7298A") +
xlab("\n Infant Mortality") +
ylab("Log GDP.Capital\n")
theme_bw(base_size = 16)
ggplot(InfantNoMiss, aes(
factor(DumMort),
log(GDPperCapita))) +
geom_violin(fill = "#E7298A",
colour = "#E7298A") +
xlab("\n Infant Mortality") +
ylab("Log GDP.Capital\n") +
theme_bw(base_size = 16)
ggplot(InfantNoMiss, aes(
factor(DumMort),
log(GDPperCapita))) +
geom_violin(fill = "#E7298A",
colour = "#E7298A") +
geom_point() +
xlab("\n Infant Mortality") +
ylab("Log GDP.Capital\n") +
theme_bw(base_size = 16)
ggplot(InfantNoMiss, aes(
factor(DumMort),
log(GDPperCapita))) +
geom_violin(fill = "#E7298A",
colour = "#E7298A") +
geom_jitter() +
xlab("\n Infant Mortality") +
ylab("Log GDP.Capital\n") +
theme_bw(base_size = 16)
ggplot(InfantNoMiss, aes(
factor(DumMort),
log(GDPperCapita))) +
geom_violin(fill = "#E7298A",
colour = "#E7298A") +
geom_jitter() +
xlab("\n Infant Mortality") +
ylab("Log GDP.Capital\n") +
theme_bw(base_size = 16)
Violin <- ggplot(InfantNoMiss, aes(
factor(DumMort),
log(GDPperCapita))) +
geom_violin(fill = "#E7298A",
colour = "#E7298A",
alpha = I(0.5)) +
geom_jitter(color = "#7570B3") +
xlab("\n Infant Mortality") +
ylab("Log GDP.Capital\n") +
theme_bw(base_size = 16)
Violin
library(GoogleVis)
library(googleVis)
?gvisGeoMap
?var
library(ZeligBayesian)
data(macro)
z.out <- zelig(
unem ~ gdp + capmob + trade,
model = "normal.bayes",
data = macro,
verbose=TRUE
)
library(ZeligBayesian)
z.out <- zelig(
unem ~ gdp + capmob + trade,
model = "normal.bayes",
data = macro,
verbose=TRUE
)
data(macro)
z.out <- zelig(
unem ~ gdp + capmob + trade,
model = "normal.bayes",
data = macro,
verbose=TRUE
)
download.file("http://bit.ly/PO9XsF",
destfile = "ames.RData")
# Load Data
load("ames.RData")
nrow(ames)
# Take a random sample of 100 runners
amesSamp <- ames[sample(1:nrow(ames), 100,
replace=FALSE),]
# Find number of runners in sample
nrow(amesSamp)
source_url("http://bit.ly/NXdCpk")
library(devtools)
library(MatchIt)
library(Zelig)
library(stats)
source_url("http://bit.ly/NXdCpk")
source_url("http://bit.ly/Nehu34")
vars <- c("Quarter", "ElectionPeriod", "pres_party", "error.prop.deflator.q2", "time_to_election",
"recession", "senate_dem_rep", "house_dem_rep", "DebtGDP", "ExpenditureGDP",
"PotentialGDP", "GlobalModel", "FedFunds", "FedFunds2qChange", "DiscountRate",
"DiscountRate2qChange", "Chair"
)
cpi.complete <- cpi.data[complete.cases(cpi.data[vars]),]
cpi.complete <- cpi.complete[vars]
#### Matching Model ####
# Party, Only pres*ElectionPeriod Interaction
cpi.matched.party <- matchit(pres_party ~ recession + time_to_election + ElectionPeriod + senate_dem_rep + house_dem_rep + ExpenditureGDP + PotentialGDP + GlobalModel + DiscountRate2qChange + pres_party*ElectionPeriod, data = cpi.complete, method = "genetic", pop.size = 161)
warnings()
cpi.matched.party.all <- matchit(pres_party ~ recession + time_to_election + ElectionPeriod + senate_dem_rep + house_dem_rep + ExpenditureGDP + PotentialGDP + GlobalModel + DiscountRate2qChange + pres_party*ElectionPeriod + pres_party*senate_dem_rep + pres_party*house_dem_rep + senate_dem_rep + house_dem_rep, data = cpi.complete, method = "genetic", pop.size = 161)
plot(cpi.matched.election)
plot(cpi.matched.all.party)
plot(cpi.matched.party.all)
plot(cpi.matched.party.all, type = "jitter")
plot(cpi.matched.party, type = "jitter")
plot(cpi.matched.party)
?plot
par(mfrow(2, 2))
par(mfrow = c(2, 2))
plot(cpi.matched.party)
par(mfrow = c(2, 2))
print(plot(cpi.matched.party))
par(mfrow = c(2, 2))
print(plot(cpi.matched.party, ask = FALSE))
?matchit
help.matchit()
help.matchit
plot(cpi.matched.party, type = "QQ")
plot(cpi.matched.party, type = "jitter")
plot(cpi.matched.party, type = "jitter", interactive = FALSE)
par(mfrow = c(3, 2))
print(plot(cpi.matched.party, ask = FALSE))
par(mfrow = c(4, 2))
print(plot(cpi.matched.party, ask = FALSE))
par(mfrow = c(4, 4))
print(plot(cpi.matched.party, ask = FALSE))
par(mfrow = c(4, 4))
plot(cpi.matched.party, interactive = FALSE)
plot(cpi.matched.party, interactive = FALSE)
dev.off()
par(mfrow = c(4, 4))
plot(cpi.matched.party, interactive = FALSE)
dev.off()
plot(cpi.matched.election, type = "jitter", interactive = FALSE)
plot(cpi.matched.party, type = "jitter", interactive = FALSE, main = "")
data(cars)
plot(dist, speed, main = "Scatterplot of Stopping Distance and Speed")
viewData(cars)
with(dist,
plot(dist, speed, main = "Scatterplot of Stopping Distance and Speed")
)
with(dist, {
plot(dist, speed, main = "Scatterplot of Stopping Distance and Speed")
})
plot(cars$dist, cars$speed, main = "Scatterplot of Stopping Distance and Speed")
plot(cars$dist, cars$speed,
main = "Scatterplot of Stopping Distance and Speed",
xlab = "Stopping Distance",
ylab = "Speed")
library(ggplot2)
ggplot(cars, aes(speed)) +
geom_density()
ggplot(cars, aes(speed)) +
geom_density() +
theme_bw()
ggplot(cars, aes(speed)) +
geom_density() +
xlab("Speed \n") +
ylab("Density\n") +
theme_bw()
# Load Cars data
data(cars)
# Plot dist and speed
plot(cars$dist, cars$speed,
main = "Scatterplot of Stopping Distance and Speed",
xlab = "Stopping Distance",
ylab = "Speed")
ggplot(cars, aes(speed, dist)) +
geom_point() +
xlab("\nSpeed") +
ylab("Density\n") +
theme_bw()
ggplot(cars, aes(speed, dist)) +
geom_point() +
xlab("\nSpeed") +
ylab("Stopping Distance\n") +
theme_bw(base_size = 15)
library(devtools)
source_url("http://bit.ly/OTWEGS")
ggplot(data = InfantNoMiss, aes(log(InfantMortality),
log(GDPperCapita))) +
geom_point(aes(colour = income)) +
theme_bw()
InfantNoMiss <- subset(MortalityGDP,
!is.na(InfantMortality))
# Create High/Low Income Variable
InfantNoMiss$DumMort[InfantNoMiss$InfantMortality
>= 15] <- "high"
InfantNoMiss$DumMort[InfantNoMiss$InfantMortality
< 15] <- "low"
# Create scatter plot divided by region
ggplot(data = InfantNoMiss, aes(log(InfantMortality),
log(GDPperCapita))) +
geom_point(aes(colour = income)) +
theme_bw()
ggplot(cars, aes(speed, dist)) +
geom_point() +
geom_smooth() +
xlab("\nSpeed") +
ylab("Stopping Distance\n") +
theme_bw(base_size = 15)
ggplot(cars, aes(speed, dist)) +
geom_point() +
xlab("\nSpeed") +
ylab("Stopping Distance\n") +
theme_bw(base_size = 15)
library(ggplot2)
# Create a density plot of Speed
ggplot(cars, aes(speed, dist)) +
geom_point() +
xlab("\nSpeed") +
ylab("Stopping Distance\n") +
theme_bw(base_size = 15)
Colours <- c("#1B9E77", "#D95F02", "#7570B3",
"#E7298A", "#66A61E", "#E6AB02")
# Create graph
ColourScatter <- ggplot(data = InfantNoMiss,
aes(log(InfantMortality),
log(GDPperCapita))) +
geom_point(aes(colour = income)) +
scale_color_manual(values = Colours) +
xlab("\nLog Infant Mortality") +
ylab("Log GDP/Capita\n") +
ggtitle("Log Transformed Data\n") +
theme_bw()
ColourScatter
# Create graph
ggplot(data = InfantNoMiss,
aes(log(InfantMortality),
income)) +
geom_point(aes(colour = income)) +
scale_color_manual(values = Colours) +
xlab("\nLog Infant Mortality") +
ylab("Log GDP/Capita\n") +
ggtitle("Log Transformed Data\n") +
theme_bw()
ggplot(data = InfantNoMiss,
aes(log(InfantMortality),
income)) +
geom_point(aes(colour = income), size 10) +
scale_color_manual(values = Colours) +
xlab("\nLog Infant Mortality") +
ylab("Log GDP/Capita\n") +
ggtitle("Log Transformed Data\n") +
theme_bw()
ggplot(data = InfantNoMiss,
aes(log(InfantMortality),
income)) +
geom_point(size = 10) +
scale_color_manual(values = Colours) +
xlab("\nLog Infant Mortality") +
ylab("Log GDP/Capita\n") +
ggtitle("Log Transformed Data\n") +
theme_bw()
# Create graph
ggplot(data = InfantNoMiss,
aes(log(InfantMortality),
income)) +
geom_point(size = 10, shape = 3) +
scale_color_manual(values = Colours) +
xlab("\nLog Infant Mortality") +
ylab("Log GDP/Capita\n") +
ggtitle("Log Transformed Data\n") +
theme_bw()
ggplot(cars, aes(speed, dist)) +
geom_point() +
geom_smoth() +
xlab("\nSpeed") +
ylab("Stopping Distance\n") +
theme_bw(base_size = 15)
ggplot(cars, aes(speed, dist)) +
geom_point() +
geom_smooth() +
xlab("\nSpeed") +
ylab("Stopping Distance\n") +
theme_bw(base_size = 15)
Install & load required packages
## Based on https://gist.github.com/3710171
## See also http://bit.ly/PbabKd
doInstall <- FALSE  # Change to FALSE if you don't want packages installed.
toInstall <- c("apsrtable",
"devtools",
"extrafont",
"ggplot2",
"knitr",
"knitcitations",
"markdown",
"openair",
"RCurl",
"texreg",
"tools",
"xtable",
"Zelig")
if(doInstall){install.packages(toInstall, repos = "http://cran.us.r-project.org")}
lapply(toInstall, library, character.only = TRUE)
##### Create PDF Book Manuscript ####
# Change working directory to /Rep-Res-Book/Source/Parent
ParentDirectory <- "/git_repositories/Rep-Res-Book/Source/Parent/"
setwd(ParentDirectory)
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
library(devtools)
?source_gist
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
embed_fonts("Rep-Res-Parent.pdf")
setwd("/git_repositories/Rep-Res-Book/Writing_Setup/")
knit(input = "README.Rmd", output = "/git_repositories/Rep-Res-Book/README.md")
