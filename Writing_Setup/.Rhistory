factor(DumMort),
log(GDPperCapita))) +
geom_violin(fill = "#E7298A",
colour = "#E7298A") +
geom_jitter() +
xlab("\n Infant Mortality") +
ylab("Log GDP.Capital\n") +
theme_bw(base_size = 16)
ggplot(InfantNoMiss, aes(
factor(DumMort),
log(GDPperCapita))) +
geom_violin(fill = "#E7298A",
colour = "#E7298A") +
geom_jitter() +
xlab("\n Infant Mortality") +
ylab("Log GDP.Capital\n") +
theme_bw(base_size = 16)
Violin <- ggplot(InfantNoMiss, aes(
factor(DumMort),
log(GDPperCapita))) +
geom_violin(fill = "#E7298A",
colour = "#E7298A",
alpha = I(0.5)) +
geom_jitter(color = "#7570B3") +
xlab("\n Infant Mortality") +
ylab("Log GDP.Capital\n") +
theme_bw(base_size = 16)
Violin
library(GoogleVis)
library(googleVis)
?gvisGeoMap
?var
library(ZeligBayesian)
data(macro)
z.out <- zelig(
unem ~ gdp + capmob + trade,
model = "normal.bayes",
data = macro,
verbose=TRUE
)
library(ZeligBayesian)
z.out <- zelig(
unem ~ gdp + capmob + trade,
model = "normal.bayes",
data = macro,
verbose=TRUE
)
data(macro)
z.out <- zelig(
unem ~ gdp + capmob + trade,
model = "normal.bayes",
data = macro,
verbose=TRUE
)
download.file("http://bit.ly/PO9XsF",
destfile = "ames.RData")
# Load Data
load("ames.RData")
nrow(ames)
# Take a random sample of 100 runners
amesSamp <- ames[sample(1:nrow(ames), 100,
replace=FALSE),]
# Find number of runners in sample
nrow(amesSamp)
# Install & load required packages
## Based on https://gist.github.com/3710171
## See also http://bit.ly/PbabKd
doInstall <- FALSE  # Change to FALSE if you don't want packages installed.
toInstall <- c("apsrtable",
"devtools",
"extrafont",
"ggplot2",
"knitr",
"knitcitations",
"markdown",
"openair",
"RCurl",
"texreg",
"tools",
"xtable",
"Zelig")
if(doInstall){install.packages(toInstall, repos = "http://cran.us.r-project.org")}
lapply(toInstall, library, character.only = TRUE)
##### Create PDF Book Manuscript ####
# Change working directory to /Rep-Res-Book/Source/Parent
ParentDirectory <- "/git_repositories/Rep-Res-Book/Source/Parent/"
setwd(ParentDirectory)
# Compile the book's parent document
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
?setdiff
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
RemoveObjects <- setdiff(ls(), "CharacterVect")
fix(RemoveObjects)
knit2pdf(input = "Rep-Res-Parent.Rnw")
rm(RemoveObjects)
RemoveObjects <- setdiff(ls(), "CharacterVect")
fix(RemoveObjects)
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
doInstall <- FALSE  # Change to FALSE if you don't want packages installed.
toInstall <- c("apsrtable",
"devtools",
"extrafont",
"ggplot2",
"knitr",
"knitcitations",
"markdown",
"openair",
"RCurl",
"texreg",
"tools",
"xtable",
"Zelig")
if(doInstall){install.packages(toInstall, repos = "http://cran.us.r-project.org")}
lapply(toInstall, library, character.only = TRUE)
##### Create PDF Book Manuscript ####
# Change working directory to /Rep-Res-Book/Source/Parent
ParentDirectory <- "/git_repositories/Rep-Res-Book/Source/Parent/"
setwd(ParentDirectory)
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
knit2pdf(input = "Rep-Res-Parent.Rnw")
embed_fonts("Rep-Res-Parent.pdf")
# Clean up /git_repositories/Rep-Res-Book/Source/Parent/
DeleteFiles <- setdiff(list.files(ParentDirectory), c("Rep-Res-Parent.Rnw", "Rep-Res-Parent.pdf", "krantz.cls", "figure", "cache"))
unlink(DeleteFiles)
# Change working directory to /Rep-Res-Book/Writing_Setup/
setwd("/git_repositories/Rep-Res-Book/Writing_Setup/")
knit(input = "README.Rmd", output = "/git_repositories/Rep-Res-Book/README.md")
library(devtools)
ActualForeURL <- "https://raw.github.com/christophergandrud/GreenBook/master/Analysis/ActualVsForecastGraph.R"
source_url(ActualForeURL)
library(devtools)
ActualForeURL <- "https://raw.github.com/christophergandrud/GreenBook/master/Analysis/ActualVsForecastGraph.R"
source_url(ActualForeURL)
# Run graph source code
PartisanErrorURL <- "https://raw.github.com/christophergandrud/GreenBook/master/Analysis/ErrorPresPartyGraph.R"
source_url(PartisanErrorURL)
# Run main analysis source code
AnalysisURL <- "https://raw.github.com/christophergandrud/GreenBook/master/Analysis/MainAnalysis2.R"
source_url(AnalysisURL)
# Local
#source("/git_repositories/GreenBook/Analysis/MainAnalysis2.R")
pres_party.r <- c(0, 1)
ModelParty <- setx(PL7, pres_party = pres_party.r)
ModelParty.sim <- sim(PL7, x = ModelParty)
ModelParty.ev <- ModelParty.sim$qi
ModelParty.ev <-data.frame(ModelParty.ev$ev)
names(ModelParty.ev) <- c("Rep", "Dem")
ModelParty.ev <- melt(ModelParty.ev, measure = 1:2)
ModelParty.ev$variable <- factor(ModelParty.ev$variable)
# Plot
PartyBreak <- c("Rep", "Dem")
NamePartyBreak <- c("Republican President", "Democratic President")
viewData(ModelParty.ev)
viewData(ModelParty.ev)
ModelParty.evPer <- ddply(ModelParty.ev, .(variable), transform, Lower = value < quantile(value, c(0.025)))
ModelParty.evPer <- ddply(ModelParty.evPer, .(variable), transform, Upper = value > quantile(value, c(0.975)))
# Remove variables outside of the middle 95%
ModelParty.evPer <- subset(ModelParty.evPer, Lower == FALSE & Upper == FALSE)
viewData(ModelParty.evPer)
ModelParty.evPer <- subset(ModelParty.evPer, Lower == FALSE & Upper == FALSE)
PartyBreak <- c("Rep", "Dem")
NamePartyBreak <- c("Republican President", "Democratic President")
ModelPartyPlot <- ggplot(data = ModelParty.evPer, aes(variable, value)) +
geom_hline(aes(intercept= 0), linetype = "dotted") +
stat_summary(fun.y = mean, geom = "line", aes(group = 1), colour = "grey70") +
geom_point(shape = 21, aes(color = variable), alpha = I(0.05), size = 7) +
scale_color_manual(values = partisan.colors, guide = FALSE) + # partisan.colors defined in the main .Rnw file
scale_x_discrete(breaks = PartyBreak, labels = NamePartyBreak) +
xlab("") + ylab("Expected Standardized Forecast Error\n") +
theme_bw(base_size = 11)
print(ModelPartyPlot)
1900/2
################
# President*Congress Interaction Graph
# Christopher Gandrud
# Updated 31 July 2012
################
# Create range of values to simulate expected values across
pres_party.r <- c(0, 1)
# Set fitted values
NL11SetDem <- setx(NL11, pres_party = pres_party.r, house_dem_rep = 1.2, senate_dem_rep = 1.2)
NL11SetRep <- setx(NL11, pres_party = pres_party.r, house_dem_rep = 0.8, senate_dem_rep = 0.8)
# Simulate expected values.
NL11SimDem <- sim(NL11, x = NL11SetDem)
NL11SimRep <- sim(NL11, x = NL11SetRep)
# Extract expected values from simulations (Dem)
NL11SimDem.ev <- NL11SimDem$qi
NL11SimDem.ev <-data.frame(NL11SimDem.ev$ev)
names(NL11SimDem.ev) <- c("Rep. Pres.", "Dem. Pres.")
NL11SimDem.ev <- melt(NL11SimDem.ev, measure = 1:2)
# Extract expected values from simulations (Rep)
NL11SimRep.ev <- NL11SimRep$qi
NL11SimRep.ev <-data.frame(NL11SimRep.ev$ev)
names(NL11SimRep.ev) <- c("Rep. Pres.", "Dem. Pres.")
NL11SimRep.ev <- melt(NL11SimRep.ev, measure = 1:2)
# Final clean up
NL11SimDem.ev$variable <- factor(NL11SimDem.ev$variable)
NL11SimDem.ev$Congress <- "Dem."
NL11SimRep.ev$variable <- factor(NL11SimRep.ev$variable)
NL11SimRep.ev$Congress <- "Rep."
# Append both sets of simulation results
NL11Bound <- rbind(NL11SimRep.ev, NL11SimDem.ev)
viewData(NL11Bound)
NL11BoundPer <- ddply(NL11Bound, .(c(variable, Congress)), transform, Lower = value < quantile(value, c(0.025)))
NL11BoundPer <- ddply(NL11Bound, .(variable, Congress), transform, Lower = value < quantile(value, c(0.025)))
NL11BoundPer <- ddply(NL11BoundPer, .(variable, Congress), transform, Upper = value > quantile(value, c(0.975)))
# Remove variables outside of the middle 95%
NL11BoundPer <- subset(NL11BoundPer, Lower == FALSE & Upper == FALSE)
# Partisan colours
partisan.congress.colours = c("Rep." = "#C42B00", "Dem." = "#2259B3")
PartyInteractionPlot <- ggplot(data = NL11Bound, aes(variable, value)) +
geom_hline(aes(intercept= 0), linetype = "dotted") +
stat_summary(fun.y = mean, geom = "line", aes(group = Congress), colour = "grey70") +
geom_point(shape = 21, aes(color = Congress), alpha = I(0.05), size = 7) +
scale_y_continuous(limits = c(-1, 0.75)) +
xlab("") + ylab("") +
scale_color_manual(values = partisan.congress.colours, name = "Control\nof\nCongress") +
guides(colour = guide_legend(override.aes = list(alpha = 1))) +
theme_bw(base_size = 11)
partisan.congress.colours = c("Rep." = "#C42B00", "Dem." = "#2259B3")
PartyInteractionPlot <- ggplot(data = NL11Bound, aes(variable, value)) +
geom_hline(aes(intercept= 0), linetype = "dotted") +
stat_summary(fun.y = mean, geom = "line", aes(group = Congress), colour = "grey70") +
geom_point(shape = 21, aes(color = Congress), alpha = I(0.05), size = 7) +
scale_y_continuous(limits = c(-1, 0.75)) +
xlab("") + ylab("") +
scale_color_manual(values = partisan.congress.colours, name = "Control\nof\nCongress") +
guides(colour = guide_legend(override.aes = list(alpha = 1))) +
theme_bw(base_size = 11)
print(PartyInteractionPlot)
################
# President*Congress Interaction Graph
# Christopher Gandrud
# Updated 31 July 2012
################
# Create range of values to simulate expected values across
pres_party.r <- c(0, 1)
# Set fitted values
NL11SetDem <- setx(NL11, pres_party = pres_party.r, house_dem_rep = 1.2, senate_dem_rep = 1.2)
NL11SetRep <- setx(NL11, pres_party = pres_party.r, house_dem_rep = 0.8, senate_dem_rep = 0.8)
# Simulate expected values.
NL11SimDem <- sim(NL11, x = NL11SetDem)
NL11SimRep <- sim(NL11, x = NL11SetRep)
# Extract expected values from simulations (Dem)
NL11SimDem.ev <- NL11SimDem$qi
NL11SimDem.ev <-data.frame(NL11SimDem.ev$ev)
names(NL11SimDem.ev) <- c("Rep. Pres.", "Dem. Pres.")
NL11SimDem.ev <- melt(NL11SimDem.ev, measure = 1:2)
# Extract expected values from simulations (Rep)
NL11SimRep.ev <- NL11SimRep$qi
NL11SimRep.ev <-data.frame(NL11SimRep.ev$ev)
names(NL11SimRep.ev) <- c("Rep. Pres.", "Dem. Pres.")
NL11SimRep.ev <- melt(NL11SimRep.ev, measure = 1:2)
# Final clean up
NL11SimDem.ev$variable <- factor(NL11SimDem.ev$variable)
NL11SimDem.ev$Congress <- "Dem."
NL11SimRep.ev$variable <- factor(NL11SimRep.ev$variable)
NL11SimRep.ev$Congress <- "Rep."
# Append both sets of simulation results
NL11Bound <- rbind(NL11SimRep.ev, NL11SimDem.ev)
#### Create plot ####
# Partisan colours
partisan.congress.colours = c("Rep." = "#C42B00", "Dem." = "#2259B3")
PartyInteractionPlot <- ggplot(data = NL11Bound, aes(variable, value)) +
geom_hline(aes(intercept= 0), linetype = "dotted") +
stat_summary(fun.y = mean, geom = "line", aes(group = Congress), colour = "grey70") +
geom_point(shape = 21, aes(color = Congress), alpha = I(0.05), size = 7) +
scale_y_continuous(limits = c(-1, 0.75)) +
xlab("") + ylab("") +
scale_color_manual(values = partisan.congress.colours, name = "Control\nof\nCongress") +
guides(colour = guide_legend(override.aes = list(alpha = 1))) +
theme_bw(base_size = 11)
print(PartyInteractionPlot)
partisan.congress.colours = c("Rep." = "#C42B00", "Dem." = "#2259B3")
PartyInteractionPlot <- ggplot(data = NL11BoundPer, aes(variable, value)) +
geom_hline(aes(intercept= 0), linetype = "dotted") +
stat_summary(fun.y = mean, geom = "line", aes(group = Congress), colour = "grey70") +
geom_point(shape = 21, aes(color = Congress), alpha = I(0.05), size = 7) +
scale_y_continuous(limits = c(-1, 0.75)) +
xlab("") + ylab("") +
scale_color_manual(values = partisan.congress.colours, name = "Control\nof\nCongress") +
guides(colour = guide_legend(override.aes = list(alpha = 1))) +
theme_bw(base_size = 11)
print(PartyInteractionPlot)
################
# President*Election Interaction Graph
# Christopher Gandrud
# Updated 3 August 2012
################
# Create range of values to simulate expected values across
pres_party.r <- c(0, 1)
# Set fitted values
NL8SetElection <- setx(NL8, pres_party = pres_party.r, ElectionPeriod = 1)
NL8SetNonElection <- setx(NL8, pres_party = pres_party.r, ElectionPeriod = 0)
# Simulate expected values.
NL8SimElection <- sim(NL8, x = NL8SetElection)
NL8SimNonElection <- sim(NL8, x = NL8SetNonElection)
# Extract expected values from simulations (Election)
NL8SimElection.ev <- NL8SimElection$qi
NL8SimElection.ev <-data.frame(NL8SimElection.ev$ev)
names(NL8SimElection.ev) <- c("Rep. Pres.", "Dem. Pres.")
NL8SimElection.ev <- melt(NL8SimElection.ev, measure = 1:2)
# Extract expected values from simulations (NonElection)
NL8SimNonElection.ev <- NL8SimNonElection$qi
NL8SimNonElection.ev <-data.frame(NL8SimNonElection.ev$ev)
names(NL8SimNonElection.ev) <- c("Rep. Pres.", "Dem. Pres.")
NL8SimNonElection.ev <- melt(NL8SimNonElection.ev, measure = 1:2)
# Final clean up
NL8SimElection.ev$variable <- factor(NL8SimElection.ev$variable)
NL8SimElection.ev$Congress <- "Yes"
NL8SimNonElection.ev$variable <- factor(NL8SimNonElection.ev$variable)
NL8SimNonElection.ev$Congress <- "No"
# Partisan colours
election.colours = c("No" = "#B35B40", "Yes" = "#696969")
ElectionInteractionPlot <- ggplot(data = NL8Bound, aes(variable, value)) +
geom_hline(aes(intercept= 0), linetype = "dotted") +
stat_summary(fun.y = mean, geom = "line", aes(group = Congress), colour = "grey70") +
geom_point(shape = 21, aes(color = Congress), alpha = I(0.07), size = 7) +
scale_y_continuous(limits = c(-1, 0.75)) +
xlab("") + ylab("Expected Standardized Forecast Error\n") +
scale_color_manual(values = election.colours, name = "Election\nPeriod") +
guides(colour = guide_legend(override.aes = list(alpha = 1))) +
theme_bw(base_size = 11)
################
# President*Election Interaction Graph
# Christopher Gandrud
# Updated 10 October 2012
################
# Create range of values to simulate expected values across
pres_party.r <- c(0, 1)
# Set fitted values
NL8SetElection <- setx(NL8, pres_party = pres_party.r, ElectionPeriod = 1)
NL8SetNonElection <- setx(NL8, pres_party = pres_party.r, ElectionPeriod = 0)
# Simulate expected values.
NL8SimElection <- sim(NL8, x = NL8SetElection)
NL8SimNonElection <- sim(NL8, x = NL8SetNonElection)
# Extract expected values from simulations (Election)
NL8SimElection.ev <- NL8SimElection$qi
NL8SimElection.ev <-data.frame(NL8SimElection.ev$ev)
names(NL8SimElection.ev) <- c("Rep. Pres.", "Dem. Pres.")
NL8SimElection.ev <- melt(NL8SimElection.ev, measure = 1:2)
# Extract expected values from simulations (NonElection)
NL8SimNonElection.ev <- NL8SimNonElection$qi
NL8SimNonElection.ev <-data.frame(NL8SimNonElection.ev$ev)
names(NL8SimNonElection.ev) <- c("Rep. Pres.", "Dem. Pres.")
NL8SimNonElection.ev <- melt(NL8SimNonElection.ev, measure = 1:2)
# Final clean up
NL8SimElection.ev$variable <- factor(NL8SimElection.ev$variable)
NL8SimElection.ev$Congress <- "Yes"
NL8SimNonElection.ev$variable <- factor(NL8SimNonElection.ev$variable)
NL8SimNonElection.ev$Congress <- "No"
# Append both sets of simulation results
NL8Bound <- rbind(NL8SimNonElection.ev, NL8SimElection.ev)
viewData(NL8Bound)
# Create range of values to simulate expected values across
pres_party.r <- c(0, 1)
# Set fitted values
NL8SetElection <- setx(NL8, pres_party = pres_party.r, ElectionPeriod = 1)
NL8SetNonElection <- setx(NL8, pres_party = pres_party.r, ElectionPeriod = 0)
# Simulate expected values.
NL8SimElection <- sim(NL8, x = NL8SetElection)
NL8SimNonElection <- sim(NL8, x = NL8SetNonElection)
# Extract expected values from simulations (Election)
NL8SimElection.ev <- NL8SimElection$qi
NL8SimElection.ev <-data.frame(NL8SimElection.ev$ev)
names(NL8SimElection.ev) <- c("Rep. Pres.", "Dem. Pres.")
viewData(NL8SimElection.ev)
# Partisan colours
election.colours = c("No" = "#B35B40", "Yes" = "#696969")
ElectionInteractionPlot <- ggplot(data = NL8Bound, aes(variable, value)) +
geom_hline(aes(intercept= 0), linetype = "dotted") +
stat_summary(fun.y = mean, geom = "line", aes(group = Congress), colour = "grey70") +
geom_point(shape = 21, aes(color = Congress), alpha = I(0.07), size = 7) +
scale_y_continuous(limits = c(-1, 0.75)) +
xlab("") + ylab("Expected Standardized Forecast Error\n") +
scale_color_manual(values = election.colours, name = "Election\nPeriod") +
guides(colour = guide_legend(override.aes = list(alpha = 1))) +
theme_bw(base_size = 11)
print(ElectionInteractionPlot)
# Remove values outside of the 2.5% and 97.5% quantiles
# Find 2.5% and 97.5% quantiles for HRCC
NL8BoundPer <- ddply(NL8Bound, .(variable, Election), transform, Lower = value < quantile(value, c(0.025)))
NL8BoundPer <- ddply(NL8BoundPer, .(variable, Election), transform, Upper = value > quantile(value, c(0.975)))
# Remove variables outside of the middle 95%
NL8BoundPer <- subset(NL8BoundPer, Lower == FALSE & Upper == FALSE)
#### Create plots ####
# Partisan colours
election.colours = c("No" = "#B35B40", "Yes" = "#696969")
ElectionInteractionPlot <- ggplot(data = NL8Bound, aes(variable, value)) +
geom_hline(aes(intercept= 0), linetype = "dotted") +
stat_summary(fun.y = mean, geom = "line", aes(group = Election), colour = "grey70") +
geom_point(shape = 21, aes(color = Election), alpha = I(0.07), size = 7) +
scale_y_continuous(limits = c(-1, 0.75)) +
xlab("") + ylab("Expected Standardized Forecast Error\n") +
scale_color_manual(values = election.colours, name = "Election\nPeriod") +
guides(colour = guide_legend(override.aes = list(alpha = 1))) +
theme_bw(base_size = 11)
NL8BoundPer <- ddply(NL8Bound, .(variable, Election), transform, Lower = value < quantile(value, c(0.025)))
################
# President*Election Interaction Graph
# Christopher Gandrud
# Updated 10 October 2012
################
# Create range of values to simulate expected values across
pres_party.r <- c(0, 1)
# Set fitted values
NL8SetElection <- setx(NL8, pres_party = pres_party.r, ElectionPeriod = 1)
NL8SetNonElection <- setx(NL8, pres_party = pres_party.r, ElectionPeriod = 0)
# Simulate expected values.
NL8SimElection <- sim(NL8, x = NL8SetElection)
NL8SimNonElection <- sim(NL8, x = NL8SetNonElection)
# Extract expected values from simulations (Election)
NL8SimElection.ev <- NL8SimElection$qi
NL8SimElection.ev <-data.frame(NL8SimElection.ev$ev)
names(NL8SimElection.ev) <- c("Rep. Pres.", "Dem. Pres.")
NL8SimElection.ev <- melt(NL8SimElection.ev, measure = 1:2)
# Extract expected values from simulations (NonElection)
NL8SimNonElection.ev <- NL8SimNonElection$qi
NL8SimNonElection.ev <-data.frame(NL8SimNonElection.ev$ev)
names(NL8SimNonElection.ev) <- c("Rep. Pres.", "Dem. Pres.")
NL8SimNonElection.ev <- melt(NL8SimNonElection.ev, measure = 1:2)
# Final clean up
NL8SimElection.ev$variable <- factor(NL8SimElection.ev$variable)
NL8SimElection.ev$Election <- "Yes"
NL8SimNonElection.ev$variable <- factor(NL8SimNonElection.ev$variable)
NL8SimNonElection.ev$Election <- "No"
# Append both sets of simulation results
NL8Bound <- rbind(NL8SimNonElection.ev, NL8SimElection.ev)
# Remove values outside of the 2.5% and 97.5% quantiles
# Find 2.5% and 97.5% quantiles for HRCC
NL8BoundPer <- ddply(NL8Bound, .(variable, Election), transform, Lower = value < quantile(value, c(0.025)))
NL8BoundPer <- ddply(NL8BoundPer, .(variable, Election), transform, Upper = value > quantile(value, c(0.975)))
# Remove variables outside of the middle 95%
NL8BoundPer <- subset(NL8BoundPer, Lower == FALSE & Upper == FALSE)
#### Create plots ####
# Partisan colours
election.colours = c("No" = "#B35B40", "Yes" = "#696969")
ElectionInteractionPlot <- ggplot(data = NL8Bound, aes(variable, value)) +
geom_hline(aes(intercept= 0), linetype = "dotted") +
stat_summary(fun.y = mean, geom = "line", aes(group = Election), colour = "grey70") +
geom_point(shape = 21, aes(color = Election), alpha = I(0.07), size = 7) +
scale_y_continuous(limits = c(-1, 0.75)) +
xlab("") + ylab("Expected Standardized Forecast Error\n") +
scale_color_manual(values = election.colours, name = "Election\nPeriod") +
guides(colour = guide_legend(override.aes = list(alpha = 1))) +
theme_bw(base_size = 11)
ElectionInteractionPlot
print(ElectionInteractionPlot)
ElectionInteractionPlot <- ggplot(data = NL8BoundPer, aes(variable, value)) +
geom_hline(aes(intercept= 0), linetype = "dotted") +
stat_summary(fun.y = mean, geom = "line", aes(group = Election), colour = "grey70") +
geom_point(shape = 21, aes(color = Election), alpha = I(0.07), size = 7) +
scale_y_continuous(limits = c(-1, 0.75)) +
xlab("") + ylab("Expected Standardized Forecast Error\n") +
scale_color_manual(values = election.colours, name = "Election\nPeriod") +
guides(colour = guide_legend(override.aes = list(alpha = 1))) +
theme_bw(base_size = 11)
print(ElectionInteractionPlot)
