geom_linerange(size = 3, alpha = 0.6) +
scale_x_discrete(breaks = breaks, labels = break.labels) +
#scale_y_continuous(breaks = c(-1, 0.0, 0.5), labels = c("-1", "0", "0.5")) +
scale_color_manual(values = cols, name = "") +
geom_hline(aes(intercept= 0), linetype = "dotted") +
ylab("\nCoefficient Estimate") + xlab("") +
coord_flip() +
theme_bw(base_size = 11)
print(est.plot)
rstudio::viewData(estimates)
CoefPlotPrep <- function(x){
require(ZeligBayesian)
y <- substr(deparse(substitute(x)), start = 1, stop = 1)
z <- substr(deparse(substitute(x)), start = 2, stop = 2)
n <- substr(deparse(substitute(x)), start = 3, stop = 3)
# Find confidence bounds
if (z == "L"){
Conf <- confint(x)
Sum <- as.data.frame(Conf)
} else if (z == "B"){
Conf <- summary(x)
Sum <- as.data.frame(Conf$summary)
}
Sum$var <- rownames(Sum)
# Extract lower bounds
if (z == "L"){
Lower.molten <- reshape2::melt(Sum, id = c("var"), measure.vars = c("2.5 %"))
} else if (z == "B"){
Lower.molten <- reshape2::melt(Sum, id = c("var"), measure.vars = c("2.5%"))
}
Lower.molten <- reshape::rename(Lower.molten, c(value = "lower"))
Lower.molten <- Lower.molten[, -2]
# Extract upper bounds
if (z == "L"){
Upper.molten <- reshape2::melt(Sum, id = c("var"), measure.vars = c("97.5 %"))
} else if (z == "B"){
Upper.molten <- reshape2::melt(Sum, id = c("var"), measure.vars = c("97.5%"))
}
Upper.molten <- reshape::rename(Upper.molten, c(value = "upper"))
Upper.molten <- Upper.molten[, -2]
# Merge upper and lower bounds
Molten <- merge(Lower.molten, Upper.molten)
# Add descriptors
if (y == "N"){
Molten$match <- "Not Matched"
} else if (y == "P"){
Molten$match <- "Matched"
}
if (z == "L"){
Molten$method <- "Normal Linear"
} else if (z == "B"){
Molten$method <- "Normal Bayes"
}
Name <- paste0(y, z, n, "Estimates")
assign(Name, Molten, envir = .GlobalEnv)
}
#### Run function ####
CoefPlotPrep(NL5)
CoefPlotPrep(PL5)
CoefPlotPrep(NB1)
CoefPlotPrep(PB1)
# Bind into one data frame
estimates <- rbind(NL5Estimates, PL5Estimates, NB1Estimates, PB1Estimates)
# Remove Intercept
estimates <- subset(estimates, var != c("(Intercept)"))
estimates <- subset(estimates, var != c("sigma2"))
##### Create comparison plot ####
cols <- c("#B35B40", "#696969")
breaks <- c("pres_party", "ExpenditureGDP", "recession", "DebtGDP", "time_to_election", "PotentialGDP", "DiscountRate2qChange", "UNRATE", "GlobalModelAfter 1996")
break.labels <- c("Dem. President", "Gov. Expenditure (% GDP)", "Recession", "Gov. Debt (% GDP)", "Quarters Until Election", "Output Gap", "Discount Rate Change", "Unemployment Rate", "Global Model")
est.plot <- ggplot(data = estimates, aes(x = reorder(var, lower), ymin = lower, ymax = upper, colour = match)) +
facet_grid(~ method) +
geom_linerange(size = 3, alpha = 0.6) +
scale_x_discrete(breaks = breaks, labels = break.labels) +
#scale_y_continuous(breaks = c(-1, 0.0, 0.5), labels = c("-1", "0", "0.5")) +
scale_color_manual(values = cols, name = "") +
geom_hline(aes(intercept= 0), linetype = "dotted") +
ylab("\nCoefficient Estimate") + xlab("") +
coord_flip() +
theme_bw(base_size = 11)
print(est.plot)
rstudio::viewData(cpi.data)
install.packages(c("ape", "foreign", "lattice", "maptools", "Matrix", "nlme", "R.utils", "rpart", "shapes", "survival", "timereg", "xts", "yaml"))
URL <- "https://raw.github.com/christophergandrud/amcData/master/MainData/amcCountryYear.csv"
AMC <- getURL(URL)
source_url("https://raw.github.com/christophergandrud/amcData/master/SourceCode/Paper1Source/LoadRPackages.R")
devtools::source_url("https://raw.github.com/christophergandrud/amcData/master/SourceCode/Paper1Source/LoadRPackages.R")
# Load most recent data
URL <- "https://raw.github.com/christophergandrud/amcData/master/MainData/amcCountryYear.csv"
AMC <- getURL(URL)
AMC <- read.csv(textConnection(AMC))
rstudio::viewData(AMC)
#### Create lagged crisis variable (Crisis onset year -3) ####
# Create individual year lags
AMCLag <- ddply(AMC, .(country), transform, SCL1 = c(NA, SystemicCrisis[-length(SystemicCrisis)]))
AMCLag <- ddply(AMCLag, .(country), transform, SCL2 = c(NA, SCL1[-length(SCL1)]))
?lag
# Create combined lagged variable
attach(AMCLag)
AMCLag$SystemicCrisisLag3 <- SystemicCrisis + SCL1 + SCL2
detach(AMCLag)
# Remove old lag variables
AMCLag$SCL1 <- AMCLag$SCL2 <- NULL
lg <- function(x)c(x[2:(length(x))], NA)
AMCLag <- ddply(AMCLag, .(country), transform, ElectionYear1 = lg(ElectionYear))
AMCLag$ElectionYear1[AMCLag$ElectionYear1 == 2] <- "NoElection"
AMCLag$ElectionYear1[AMCLag$ElectionYear1 == 1] <- "Election"
#### Remove (De)centralised category
AMCLag$AMCType[AMCLag$AMCType == "(De)centralised"] <- "Decentralised"
library(crrSC)
library(cmprsk)
# devtools::source_url("https://raw.github.com/christophergandrud/amcData/master/SourceCode/Paper1Source/LoadRPackages.R")
# devtools::source_url("https://raw.github.com/christophergandrud/amcData/master/SourceCode/Paper1Source/PaperDataLoadClean.R")
devtools::source_url("https://raw.github.com/christophergandrud/amcData/master/SourceCode/Paper1Source/LoadRPackages.R")
devtools::source_url("https://raw.github.com/christophergandrud/amcData/master/SourceCode/Paper1Source/PaperDataLoadClean.R")
AMCLag$AMCStatus <- 1
AMCLag$AMCStatus[AMCLag$AMCType == "Centralised"] <-2
AMCLag$AMCStatus[AMCLag$AMCType == "Decentralised"] <-3
?crrs
attach(AMCLag)
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, execrlc, SystemicCrisisLag3),
failcode = 2,
ctype = 1,
strata = country)
detach(AMCLag)
print(M1)
fix(`M1`)
names(crrs)
fix(`M1`)
library(simtvc)
??simtvc
library(knitr)
Test <- print(M1, "coefficients")
Test <- print(M1, "coefficients:")
Test <- print(crrs)
Test <- print(M1)
fix(Test)
citation(simtvc)
library(simtvc)
citation("simtvc")
library(cmprsk)
library(crrSC)
devtools::source_url("https://raw.github.com/christophergandrud/amcData/master/SourceCode/Paper1Source/LoadRPackages.R")
devtools::source_url("https://raw.github.com/christophergandrud/amcData/master/SourceCode/Paper1Source/PaperDataLoadClean.R")
AMCLag$AMCStatus <- 1
AMCLag$AMCStatus[AMCLag$AMCType == "Centralised"] <-2
AMCLag$AMCStatus[AMCLag$AMCType == "Decentralised"] <-3
# Stratified competing risks model
with (AMCLag){
with (AMCLag){
with(AMCLag){
?with
with(AMCLag, {
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, execrlc, SystemicCrisisLag3),
failcode = 2,
ctype = 1,
strata = country)
})
print(M1)
with(AMCLag, {
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, execrlc, SystemicCrisisLag3),
failcode = 2,
ctype = 1,
strata = country)
print(M1)
})
)
M1 <- crrs(ftime = year,
attach(AMCLag)
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, execrlc, SystemicCrisisLag3),
attach(AMCLag)
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, execrlc, SystemicCrisisLag3),
failcode = 2,
ctype = 1,
strata = country)
detach(AMCLag)
print(M1)
fix(`M1`)
plot.cuminc
?plot.cuminc
?cuminc
cuminc
?strata
install.packages("riskRegression")
library(riskRegression)
strata(country), data = AMCLag, cause = 2)
M1 < FGR(Hist(year, AMCStatus) ~ govfrac + execrlc + SystemicCrisisLag3 + strata(country), data = AMCLag, cause = 2)
M1 < FGR(Hist(year, AMCStatus) ~ govfrac + execrlc + SystemicCrisisLag3 + strataa(country), data = AMCLag, cause = 2)
M1 < FGR(Hist(year, AMCStatus) ~ govfrac + execrlc + SystemicCrisisLag3 + strata(country), data = AMCLag, cause = 2)
M2 <- FGR(Hist(year, AMCStatus) ~ govfrac + execrlc + SystemicCrisisLag3 + strata(country), data = AMCLag, cause = 2)
M2 <- ARR(Hist(year, AMCStatus) ~ govfrac + execrlc + SystemicCrisisLag3 + strata(country), data = AMCLag, cause = 2)
print(M2)
print(M1)
attach(AMCLag)
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, factor(execrlc), SystemicCrisisLag3),
failcode = 2,
ctype = 1,
strata = country)
detach(AMCLag)
print(M1)
print(M2)
print(M2)
print(M1)
plotEffects
plotEffects(M2)
?hist
?Surv
?crr
Test <- M1$coef
Test
attach(AMCLag)
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, as.factor(execrlc), SystemicCrisisLag3),
failcode = 2,
ctype = 1,
strata = country)
detach(AMCLag)
print(M1)
attach(AMCLag)
M3 <- crr(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, as.factor(execrlc), SystemicCrisisLag3),
failcode = 2,
cengroup = country)
detach(AMCLag)
summary(M3)
attach(AMCLag)
M3 <- crr(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, execrlc, SystemicCrisisLag3),
failcode = 2,
cengroup = country)
detach(AMCLag)
summary(M3)
print(M1)
?vcoc
vcoc
?vcov
vcov
UseMethod("vcov")
UseMethod("vcov")
Test <- vcov(M1)
rstudio::viewData(Test)
TestAgain <- cuminc(M1)
attach(AMCLag)
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac, SystemicCrisisLag3),
failcode = 2,
ctype = 1,
strata = country)
Test <- cuminc(M1)
?cumin
?cuminc
attach(AMCLag)
M2 <- cuminc(ftime = year,
detach(AMCLag)
fstatus = AMCStatus,
strata = country)
detach(AMCLag)
############## Try to figure out how to similuate using normal dist. Main issue: CIF for Strata #######
detach(AMCLag)
attach(AMCLag)
M2 <- cuminc(ftime = year,
fstatus = AMCStatus,
strata = country)
print(M2)
plot(M2)
range(AMCLag$year)
attach(AMCLag)
M2 <- cuminc(ftime = (year - 1979),
detach(AMCLag)
detach(AMCLag)
attach(AMCLag)
M2 <- cuminc(ftime = (year - 1979),
fstatus = AMCStatus,
strata = country)
detach(AMCLag)
print(M2)
plot(M2)
?rmultnorm
library(MSBVAR)
?rmultnorm
library(foreign)
write.dta(AMCLag, file = "~/Desktop/AMC.dta")
print(M1)
exp(0.3417)
attach(AMCLag)
M1 <- crrs(ftime = year,
fstatus = AMCStatus,
cov1 = cbind(govfrac),
failcode = 2,
ctype = 1,
strata = country)
detach(AMCLag)
print(M1)
attach(AMCLag)
M1 <- crrs(ftime = year - 1980,
fstatus = AMCStatus,
cov1 = cbind(govfrac),
failcode = 2,
ctype = 1,
strata = country)
detach(AMCLag)
print(M1)
attach(AMCLag)
M1 <- crrs(ftime = year - 1980,
fstatus = AMCStatus,
cov1 = cbind(govfrac),
failcode = 2,
# ctype = 1,
strata = country)
detach(AMCLag)
print(M1)
rstudio::viewData(AMCLag)
?crrc
AMCLag$AMCStatus[AMCLag$year == 2012 & AMCLag$NumAMCCountryNoNA == 0] <- 4
range(AMCLag$AMCStatus)
summary(AMCLag$AMCStatus)
?crrc
devtools::source_url("https://raw.github.com/christophergandrud/amcData/master/SourceCode/Paper1Source/LoadRPackages.R")
devtools::source_url("https://raw.github.com/christophergandrud/amcData/master/SourceCode/Paper1Source/PaperDataLoadClean.R")
AMCLag$AMCStatus <- 1
AMCLag$AMCStatus[AMCLag$AMCType == "Centralised"] <-2
AMCLag$AMCStatus[AMCLag$AMCType == "Decentralised"] <-3
AMCLag$AMCStatus[AMCLag$year == 2012 & AMCLag$NumAMCCountryNoNA == 0] <- 4
# Stratified competing risks model
library(cmprsk)
library(crrSC)
attach(AMCLag)
M1 <- crrc(ftime = year - 1980,
fstatus = AMCStatus,
cov1 = cbind(govfrac),
failcode = 2,
cencode = 1,
cluster = country)
detach(AMCLag)
print(M1)
AMCLag$AMCStatus <- NA
AMCLag$AMCStatus[AMCLag$AMCType == "Centralised"] <-2
AMCLag$AMCStatus[AMCLag$AMCType == "Decentralised"] <-3
AMCLag$AMCStatus[AMCLag$year == 2012 & AMCLag$NumAMCCountryNoNA == 0] <- 4
# Stratified competing risks model
attach(AMCLag)
M1 <- crrc(ftime = year - 1980,
fstatus = AMCStatus,
cov1 = cbind(govfrac),
failcode = 2,
cencode = 1,
cluster = country)
detach(AMCLag)
print(M1)
attach(AMCLag)
M1 <- crrc(ftime = year - 1980,
fstatus = AMCStatus,
cov1 = cbind(govfrac, SystemicCrisisLag3),
failcode = 2,
cencode = 1,
cluster = country)
detach(AMCLag)
print(M1)
rstudio::viewData(AMCLag)
AMCLag$AMCStatus <- 0
AMCLag$AMCStatus[AMCLag$AMCType == "Centralised"] <-2
AMCLag$AMCStatus[AMCLag$AMCType == "Decentralised"] <-3
AMCLag$AMCStatus[AMCLag$year == 2012 & AMCLag$NumAMCCountryNoNA == 0] <- 4
# Stratified competing risks model
attach(AMCLag)
M1 <- crrc(ftime = year - 1980,
fstatus = AMCStatus,
cov1 = cbind(govfrac, SystemicCrisisLag3),
failcode = 2,
cencode = 1,
cluster = country)
detach(AMCLag)
print(M1)
attach(AMCLag)
M1 <- crrc(ftime = year - 1980,
fstatus = AMCStatus,
cov1 = cbind(govfrac, SystemicCrisisLag3),
failcode = 2,
cencode = 4,
cluster = country)
detach(AMCLag)
print(M1)
AMCLag$AMCStatus <- 1
AMCLag$AMCStatus[AMCLag$AMCType == "Centralised"] <-2
AMCLag$AMCStatus[AMCLag$AMCType == "Decentralised"] <-3
AMCLag$AMCStatus[AMCLag$year == 2012 & AMCLag$NumAMCCountryNoNA == 0] <- 4
# Stratified competing risks model
attach(AMCLag)
M1 <- crrc(ftime = year - 1980,
fstatus = AMCStatus,
cov1 = cbind(govfrac, SystemicCrisisLag3),
failcode = 3,
cencode = 4,
cluster = country)
detach(AMCLag)
print(M1)
data(cdata)
rstudio::viewData(cdata)
data(center)
rstudio::viewData(center)
duplicated(center$id)
attach(AMCLag)
M1 <- crrc(ftime = year - 1980,
fstatus = AMCStatus,
cov1 = cbind(govfrac, SystemicCrisisLag3, UDS),
failcode = 3,
cencode = 4,
cluster = country)
detach(AMCLag)
print(M1)
?crr
rstudio::viewData(AMCLag)
attach(AMCLag)
M1 <- crrc(ftime = year - 1980,
fstatus = AMCStatus,
cov1 = cbind(govfrac),
failcode = 3,
cencode = 4,
cluster = country)
detach(AMCLag)
print(M1)
?Hist
data(Melenoma)
library(riskRegression)
data(Melenoma)
data(Melanoma)
rstudio::viewData(Melanoma)
rstudio::viewData(AMCLag)
AMCShort <- subset(AMCLag, AMCAnyCreated == 1)
rstudio::viewData(AMCShort)
AMCShort2 <- subset(AMCLag, AMCStatus == 4)
rstudio::viewData(AMCShort2)
AMCShort1 <- subset(AMCLag, AMCAnyCreated == 1)
AMCShort <- rbind(AMCShort1, AMCShort2)
attach(AMCShort)
M1 <- crrc(ftime = year - 1980,
fstatus = AMCStatus,
cov1 = cbind(govfrac),
failcode = 2,
cencode = 4,
cluster = country)
detach(AMCShort)
print(M1)
attach(AMCShort)
M1 <- crrc(ftime = year - 1980,
fstatus = AMCStatus,
cov1 = cbind(govfrac),
failcode = 3,
cencode = 4,
cluster = country)
detach(AMCShort)
print(M1)
attach(AMCShort)
M1 <- crrc(ftime = year - 1980,
fstatus = AMCStatus,
cov1 = cbind(govfrac, SystemicCrisisLag3, UDS),
failcode = 3,
cencode = 4,
cluster = country)
detach(AMCShort)
print(M1)
ParentDirectory <- "/git_repositories/Rep-Res-Book/Source/"
## README.Rmd
SetupDirectory <- "/git_repositories/Rep-Res-Book/Writing_Setup/"
##### Create PDF Book Manuscript ####
# Compile the book's parent document
setwd(ParentDirectory)
knitr::knit2pdf(input = "Rep-Res-Parent.Rnw")
knitr::knit2pdf(input = "Rep-Res-Parent.Rnw")
knitr::knit2pdf(input = "Rep-Res-Parent.Rnw")
knitr::knit2pdf(input = "Rep-Res-Parent.Rnw")
knitr::knit2pdf(input = "Rep-Res-Parent.Rnw")
knitr::knit2pdf(input = "Rep-Res-Parent.Rnw")
knitr::knit2pdf(input = "Rep-Res-Parent.Rnw")
knitr::knit2pdf(input = "Rep-Res-Parent.Rnw")
knitr::knit2pdf(input = "Rep-Res-Parent.Rnw")
knitr::knit2pdf(input = "Rep-Res-Parent.Rnw")
￼install_github("repmis", "christophergandrud")
install_github("repmis", "christophergandrud")
library(repmis)
knitr::knit2pdf(input = "Rep-Res-Parent.Rnw")
knitr::knit2pdf(input = "Rep-Res-Parent.Rnw")
knitr::knit2pdf(input = "Rep-Res-Parent.Rnw")
knitr::knit2pdf(input = "Rep-Res-Parent.Rnw")
knitr::knit2pdf(input = "Rep-Res-Parent.Rnw")
knitr::knit2pdf(input = "Rep-Res-Parent.Rnw")
knitr::knit2pdf(input = "Rep-Res-Parent.Rnw")
knitr::knit2pdf(input = "Rep-Res-Parent.Rnw")
knitr::knit2pdf(input = "Rep-Res-Parent.Rnw")
knitr::knit2pdf(input = "Rep-Res-Parent.Rnw")
knitr::knit2pdf(input = "Rep-Res-Parent.Rnw")
# Embed fonts
extrafont::embed_fonts("Rep-Res-Parent.pdf")
setwd(SetupDirectory)
# Knit README file
knitr::knit(input = "README.Rmd", output = "/git_repositories/Rep-Res-Book/README.md")
